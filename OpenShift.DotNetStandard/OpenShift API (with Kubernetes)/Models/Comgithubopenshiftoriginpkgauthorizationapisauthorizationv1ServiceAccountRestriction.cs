// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ServiceAccountRestriction matches a service account by a string match
    /// on either the service-account name or the name of the service
    /// account's namespace.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1ServiceAccountRestriction
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1ServiceAccountRestriction
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1ServiceAccountRestriction() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1ServiceAccountRestriction
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1ServiceAccountRestriction(IList<string> namespaces, IList<Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1ServiceAccountReference> serviceaccounts)
        {
            Namespaces = namespaces;
            Serviceaccounts = serviceaccounts;
        }

        /// <summary>
        /// Namespaces specifies a list of literal namespace names.
        /// </summary>
        [JsonProperty(PropertyName = "namespaces")]
        public IList<string> Namespaces { get; set; }

        /// <summary>
        /// ServiceAccounts specifies a list of literal service-account names.
        /// </summary>
        [JsonProperty(PropertyName = "serviceaccounts")]
        public IList<Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1ServiceAccountReference> Serviceaccounts { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Namespaces == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Namespaces");
            }
            if (Serviceaccounts == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Serviceaccounts");
            }
            if (this.Serviceaccounts != null)
            {
                foreach (var element in this.Serviceaccounts)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
