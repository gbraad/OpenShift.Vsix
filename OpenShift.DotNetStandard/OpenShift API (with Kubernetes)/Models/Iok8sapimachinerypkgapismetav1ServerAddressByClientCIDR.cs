// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ServerAddressByClientCIDR helps the client to determine the server
    /// address that they should use, depending on the clientCIDR that they
    /// match.
    /// </summary>
    public partial class Iok8sapimachinerypkgapismetav1ServerAddressByClientCIDR
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapimachinerypkgapismetav1ServerAddressByClientCIDR class.
        /// </summary>
        public Iok8sapimachinerypkgapismetav1ServerAddressByClientCIDR() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapimachinerypkgapismetav1ServerAddressByClientCIDR class.
        /// </summary>
        public Iok8sapimachinerypkgapismetav1ServerAddressByClientCIDR(string clientCIDR, string serverAddress)
        {
            ClientCIDR = clientCIDR;
            ServerAddress = serverAddress;
        }

        /// <summary>
        /// The CIDR with which clients can match their IP to figure out the
        /// server address that they should use.
        /// </summary>
        [JsonProperty(PropertyName = "clientCIDR")]
        public string ClientCIDR { get; set; }

        /// <summary>
        /// Address of this server, suitable for a client that matches the
        /// above CIDR. This can be a hostname, hostname:port, IP or IP:port.
        /// </summary>
        [JsonProperty(PropertyName = "serverAddress")]
        public string ServerAddress { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (ClientCIDR == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientCIDR");
            }
            if (ServerAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServerAddress");
            }
        }
    }
}
