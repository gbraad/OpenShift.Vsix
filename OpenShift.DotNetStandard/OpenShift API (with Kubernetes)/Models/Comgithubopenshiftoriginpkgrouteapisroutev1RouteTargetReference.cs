// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// RouteTargetReference specifies the target that resolve into endpoints.
    /// Only the 'Service' kind is allowed. Use 'weight' field to emphasize
    /// one over others.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgrouteapisroutev1RouteTargetReference
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgrouteapisroutev1RouteTargetReference
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgrouteapisroutev1RouteTargetReference() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgrouteapisroutev1RouteTargetReference
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgrouteapisroutev1RouteTargetReference(string kind, string name, int weight)
        {
            Kind = kind;
            Name = name;
            Weight = weight;
        }

        /// <summary>
        /// The kind of target that the route is referring to. Currently, only
        /// 'Service' is allowed
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// name of the service/target that is being referred to. e.g. name of
        /// the service
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// weight as an integer between 0 and 256, default 1, that specifies
        /// the target's relative weight against other target reference
        /// objects. 0 suppresses requests to this backend.
        /// </summary>
        [JsonProperty(PropertyName = "weight")]
        public int Weight { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Kind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kind");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
