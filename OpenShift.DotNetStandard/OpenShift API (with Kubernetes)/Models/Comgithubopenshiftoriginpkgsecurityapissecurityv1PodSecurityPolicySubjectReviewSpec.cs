// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// PodSecurityPolicySubjectReviewSpec defines specification for
    /// PodSecurityPolicySubjectReview
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgsecurityapissecurityv1PodSecurityPolicySubjectReviewSpec
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgsecurityapissecurityv1PodSecurityPolicySubjectReviewSpec
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgsecurityapissecurityv1PodSecurityPolicySubjectReviewSpec() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgsecurityapissecurityv1PodSecurityPolicySubjectReviewSpec
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgsecurityapissecurityv1PodSecurityPolicySubjectReviewSpec(Iok8skubernetespkgapiv1PodTemplateSpec template, IList<string> groups = default(IList<string>), string user = default(string))
        {
            Groups = groups;
            Template = template;
            User = user;
        }

        /// <summary>
        /// groups is the groups you're testing for.
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public IList<string> Groups { get; set; }

        /// <summary>
        /// template is the PodTemplateSpec to check. If
        /// template.spec.serviceAccountName is empty it will not be
        /// defaulted. If its non-empty, it will be checked.
        /// </summary>
        [JsonProperty(PropertyName = "template")]
        public Iok8skubernetespkgapiv1PodTemplateSpec Template { get; set; }

        /// <summary>
        /// user is the user you're testing for. If you specify "user" but not
        /// "group", then is it interpreted as "What if user were not a
        /// member of any groups. If user and groups are empty, then the
        /// check is performed using *only* the serviceAccountName in the
        /// template.
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public string User { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Template == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Template");
            }
            if (this.Template != null)
            {
                this.Template.Validate();
            }
        }
    }
}
