// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Represents a Ceph Filesystem mount that lasts the lifetime of a pod
    /// Cephfs volumes do not support ownership management or SELinux
    /// relabeling.
    /// </summary>
    public partial class Iok8skubernetespkgapiv1CephFSVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1CephFSVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1CephFSVolumeSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1CephFSVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1CephFSVolumeSource(IList<string> monitors, string path = default(string), bool? readOnlyProperty = default(bool?), string secretFile = default(string), Iok8skubernetespkgapiv1LocalObjectReference secretRef = default(Iok8skubernetespkgapiv1LocalObjectReference), string user = default(string))
        {
            Monitors = monitors;
            Path = path;
            ReadOnlyProperty = readOnlyProperty;
            SecretFile = secretFile;
            SecretRef = secretRef;
            User = user;
        }

        /// <summary>
        /// Required: Monitors is a collection of Ceph monitors More info:
        /// https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        /// </summary>
        [JsonProperty(PropertyName = "monitors")]
        public IList<string> Monitors { get; set; }

        /// <summary>
        /// Optional: Used as the mounted root, rather than the full Ceph
        /// tree, default is /
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Optional: Defaults to false (read/write). ReadOnly here will force
        /// the ReadOnly setting in VolumeMounts. More info:
        /// https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// Optional: SecretFile is the path to key ring for User, default is
        /// /etc/ceph/user.secret More info:
        /// https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        /// </summary>
        [JsonProperty(PropertyName = "secretFile")]
        public string SecretFile { get; set; }

        /// <summary>
        /// Optional: SecretRef is reference to the authentication secret for
        /// User, default is empty. More info:
        /// https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        /// </summary>
        [JsonProperty(PropertyName = "secretRef")]
        public Iok8skubernetespkgapiv1LocalObjectReference SecretRef { get; set; }

        /// <summary>
        /// Optional: User is the rados user name, default is admin More info:
        /// https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public string User { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Monitors == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Monitors");
            }
        }
    }
}
