// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Represents a StorageOS persistent volume resource.
    /// </summary>
    public partial class Iok8skubernetespkgapiv1StorageOSPersistentVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1StorageOSPersistentVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1StorageOSPersistentVolumeSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1StorageOSPersistentVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1StorageOSPersistentVolumeSource(string fsType = default(string), bool? readOnlyProperty = default(bool?), Iok8skubernetespkgapiv1ObjectReference secretRef = default(Iok8skubernetespkgapiv1ObjectReference), string volumeName = default(string), string volumeNamespace = default(string))
        {
            FsType = fsType;
            ReadOnlyProperty = readOnlyProperty;
            SecretRef = secretRef;
            VolumeName = volumeName;
            VolumeNamespace = volumeNamespace;
        }

        /// <summary>
        /// Filesystem type to mount. Must be a filesystem type supported by
        /// the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly
        /// inferred to be "ext4" if unspecified.
        /// </summary>
        [JsonProperty(PropertyName = "fsType")]
        public string FsType { get; set; }

        /// <summary>
        /// Defaults to false (read/write). ReadOnly here will force the
        /// ReadOnly setting in VolumeMounts.
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// SecretRef specifies the secret to use for obtaining the StorageOS
        /// API credentials.  If not specified, default values will be
        /// attempted.
        /// </summary>
        [JsonProperty(PropertyName = "secretRef")]
        public Iok8skubernetespkgapiv1ObjectReference SecretRef { get; set; }

        /// <summary>
        /// VolumeName is the human-readable name of the StorageOS volume.
        /// Volume names are only unique within a namespace.
        /// </summary>
        [JsonProperty(PropertyName = "volumeName")]
        public string VolumeName { get; set; }

        /// <summary>
        /// VolumeNamespace specifies the scope of the volume within
        /// StorageOS.  If no namespace is specified then the Pod's namespace
        /// will be used.  This allows the Kubernetes name scoping to be
        /// mirrored within StorageOS for tighter integration. Set VolumeName
        /// to any name to override the default behaviour. Set to "default"
        /// if you are not using namespaces within StorageOS. Namespaces that
        /// do not pre-exist within StorageOS will be created.
        /// </summary>
        [JsonProperty(PropertyName = "volumeNamespace")]
        public string VolumeNamespace { get; set; }

    }
}
