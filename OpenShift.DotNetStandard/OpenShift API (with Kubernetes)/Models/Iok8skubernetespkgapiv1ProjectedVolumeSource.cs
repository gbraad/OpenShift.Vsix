// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Represents a projected volume source
    /// </summary>
    public partial class Iok8skubernetespkgapiv1ProjectedVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1ProjectedVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1ProjectedVolumeSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1ProjectedVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1ProjectedVolumeSource(IList<Iok8skubernetespkgapiv1VolumeProjection> sources, int? defaultMode = default(int?))
        {
            DefaultMode = defaultMode;
            Sources = sources;
        }

        /// <summary>
        /// Mode bits to use on created files by default. Must be a value
        /// between 0 and 0777. Directories within the path are not affected
        /// by this setting. This might be in conflict with other options
        /// that affect the file mode, like fsGroup, and the result can be
        /// other mode bits set.
        /// </summary>
        [JsonProperty(PropertyName = "defaultMode")]
        public int? DefaultMode { get; set; }

        /// <summary>
        /// list of volume projections
        /// </summary>
        [JsonProperty(PropertyName = "sources")]
        public IList<Iok8skubernetespkgapiv1VolumeProjection> Sources { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Sources == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sources");
            }
        }
    }
}
