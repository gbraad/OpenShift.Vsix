// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes
    /// do not support ownership management or SELinux relabeling.
    /// </summary>
    public partial class Iok8skubernetespkgapiv1NFSVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1NFSVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1NFSVolumeSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1NFSVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1NFSVolumeSource(string path, string server, bool? readOnlyProperty = default(bool?))
        {
            Path = path;
            ReadOnlyProperty = readOnlyProperty;
            Server = server;
        }

        /// <summary>
        /// Path that is exported by the NFS server. More info:
        /// https://kubernetes.io/docs/concepts/storage/volumes#nfs
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// ReadOnly here will force the NFS export to be mounted with
        /// read-only permissions. Defaults to false. More info:
        /// https://kubernetes.io/docs/concepts/storage/volumes#nfs
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// Server is the hostname or IP address of the NFS server. More info:
        /// https://kubernetes.io/docs/concepts/storage/volumes#nfs
        /// </summary>
        [JsonProperty(PropertyName = "server")]
        public string Server { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Path");
            }
            if (Server == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Server");
            }
        }
    }
}
