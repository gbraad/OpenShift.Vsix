// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Represents a Photon Controller persistent disk resource.
    /// </summary>
    public partial class Iok8skubernetespkgapiv1PhotonPersistentDiskVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1PhotonPersistentDiskVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1PhotonPersistentDiskVolumeSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1PhotonPersistentDiskVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1PhotonPersistentDiskVolumeSource(string pdID, string fsType = default(string))
        {
            FsType = fsType;
            PdID = pdID;
        }

        /// <summary>
        /// Filesystem type to mount. Must be a filesystem type supported by
        /// the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly
        /// inferred to be "ext4" if unspecified.
        /// </summary>
        [JsonProperty(PropertyName = "fsType")]
        public string FsType { get; set; }

        /// <summary>
        /// ID that identifies Photon Controller persistent disk
        /// </summary>
        [JsonProperty(PropertyName = "pdID")]
        public string PdID { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (PdID == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PdID");
            }
        }
    }
}
