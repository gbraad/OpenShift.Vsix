// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ImageSignature holds a signature of an image. It allows to verify
    /// image identity and possibly other claims as long as the signature is
    /// trusted. Based on this information it is possible to restrict
    /// runnable images to those matching cluster-wide policy. Mandatory
    /// fields should be parsed by clients doing image verification. The
    /// others are parsed from signature's content by the server. They serve
    /// just an informative purpose.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgimageapisimagev1ImageSignature
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgimageapisimagev1ImageSignature class.
        /// </summary>
        public Comgithubopenshiftoriginpkgimageapisimagev1ImageSignature() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgimageapisimagev1ImageSignature class.
        /// </summary>
        public Comgithubopenshiftoriginpkgimageapisimagev1ImageSignature(byte[] content, string type, string apiVersion = default(string), IList<Comgithubopenshiftoriginpkgimageapisimagev1SignatureCondition> conditions = default(IList<Comgithubopenshiftoriginpkgimageapisimagev1SignatureCondition>), DateTime? created = default(DateTime?), string imageIdentity = default(string), Comgithubopenshiftoriginpkgimageapisimagev1SignatureIssuer issuedBy = default(Comgithubopenshiftoriginpkgimageapisimagev1SignatureIssuer), Comgithubopenshiftoriginpkgimageapisimagev1SignatureSubject issuedTo = default(Comgithubopenshiftoriginpkgimageapisimagev1SignatureSubject), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta), IDictionary<string, string> signedClaims = default(IDictionary<string, string>))
        {
            ApiVersion = apiVersion;
            Conditions = conditions;
            Content = content;
            Created = created;
            ImageIdentity = imageIdentity;
            IssuedBy = issuedBy;
            IssuedTo = issuedTo;
            Kind = kind;
            Metadata = metadata;
            SignedClaims = signedClaims;
            Type = type;
        }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Conditions represent the latest available observations of a
        /// signature's current state.
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public IList<Comgithubopenshiftoriginpkgimageapisimagev1SignatureCondition> Conditions { get; set; }

        /// <summary>
        /// Required: An opaque binary string which is an image's signature.
        /// </summary>
        [JsonProperty(PropertyName = "content")]
        public byte[] Content { get; set; }

        /// <summary>
        /// If specified, it is the time of signature's creation.
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// A human readable string representing image's identity. It could be
        /// a product name and version, or an image pull spec (e.g.
        /// "registry.access.redhat.com/rhel7/rhel:7.2").
        /// </summary>
        [JsonProperty(PropertyName = "imageIdentity")]
        public string ImageIdentity { get; set; }

        /// <summary>
        /// If specified, it holds information about an issuer of signing
        /// certificate or key (a person or entity who signed the signing
        /// certificate or key).
        /// </summary>
        [JsonProperty(PropertyName = "issuedBy")]
        public Comgithubopenshiftoriginpkgimageapisimagev1SignatureIssuer IssuedBy { get; set; }

        /// <summary>
        /// If specified, it holds information about a subject of signing
        /// certificate or key (a person or entity who signed the image).
        /// </summary>
        [JsonProperty(PropertyName = "issuedTo")]
        public Comgithubopenshiftoriginpkgimageapisimagev1SignatureSubject IssuedTo { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Contains claims from the signature.
        /// </summary>
        [JsonProperty(PropertyName = "signedClaims")]
        public IDictionary<string, string> SignedClaims { get; set; }

        /// <summary>
        /// Required: Describes a type of stored blob.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Content == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Content");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (this.Conditions != null)
            {
                foreach (var element in this.Conditions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.IssuedTo != null)
            {
                this.IssuedTo.Validate();
            }
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
        }
    }
}
