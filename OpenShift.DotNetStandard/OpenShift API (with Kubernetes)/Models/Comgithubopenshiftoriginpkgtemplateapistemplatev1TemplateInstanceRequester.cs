// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// TemplateInstanceRequester holds the identity of an agent requesting a
    /// template instantiation.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgtemplateapistemplatev1TemplateInstanceRequester
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgtemplateapistemplatev1TemplateInstanceRequester
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgtemplateapistemplatev1TemplateInstanceRequester() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgtemplateapistemplatev1TemplateInstanceRequester
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgtemplateapistemplatev1TemplateInstanceRequester(IDictionary<string, IList<string>> extra = default(IDictionary<string, IList<string>>), IList<string> groups = default(IList<string>), string uid = default(string), string username = default(string))
        {
            Extra = extra;
            Groups = groups;
            Uid = uid;
            Username = username;
        }

        /// <summary>
        /// extra holds additional information provided by the authenticator.
        /// </summary>
        [JsonProperty(PropertyName = "extra")]
        public IDictionary<string, IList<string>> Extra { get; set; }

        /// <summary>
        /// groups represent the groups this user is a part of.
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public IList<string> Groups { get; set; }

        /// <summary>
        /// uid is a unique value that identifies this user across time; if
        /// this user is deleted and another user by the same name is added,
        /// they will have different UIDs.
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public string Uid { get; set; }

        /// <summary>
        /// username uniquely identifies this user among all active users.
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

    }
}
