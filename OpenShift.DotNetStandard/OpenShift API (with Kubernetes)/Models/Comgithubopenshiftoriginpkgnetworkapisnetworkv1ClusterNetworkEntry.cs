// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ClusterNetworkEntry defines an individual cluster network. The CIDRs
    /// cannot overlap with other cluster network CIDRs, CIDRs reserved for
    /// external ips, CIDRs reserved for service networks, and CIDRs reserved
    /// for ingress ips.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgnetworkapisnetworkv1ClusterNetworkEntry
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgnetworkapisnetworkv1ClusterNetworkEntry
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgnetworkapisnetworkv1ClusterNetworkEntry() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgnetworkapisnetworkv1ClusterNetworkEntry
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgnetworkapisnetworkv1ClusterNetworkEntry(string cIDR, long hostSubnetLength)
        {
            CIDR = cIDR;
            HostSubnetLength = hostSubnetLength;
        }

        /// <summary>
        /// CIDR defines the total range of a cluster networks address space.
        /// </summary>
        [JsonProperty(PropertyName = "CIDR")]
        public string CIDR { get; set; }

        /// <summary>
        /// HostSubnetLength is the number of bits of the accompanying CIDR
        /// address to allocate to each node. eg, 8 would mean that each node
        /// would have a /24 slice of the overlay network for its pods.
        /// </summary>
        [JsonProperty(PropertyName = "hostSubnetLength")]
        public long HostSubnetLength { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (CIDR == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CIDR");
            }
        }
    }
}
