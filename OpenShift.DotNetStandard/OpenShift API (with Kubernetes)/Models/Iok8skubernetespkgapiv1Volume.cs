// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Volume represents a named volume in a pod that may be accessed by any
    /// container in the pod.
    /// </summary>
    public partial class Iok8skubernetespkgapiv1Volume
    {
        /// <summary>
        /// Initializes a new instance of the Iok8skubernetespkgapiv1Volume
        /// class.
        /// </summary>
        public Iok8skubernetespkgapiv1Volume() { }

        /// <summary>
        /// Initializes a new instance of the Iok8skubernetespkgapiv1Volume
        /// class.
        /// </summary>
        public Iok8skubernetespkgapiv1Volume(string name, Iok8skubernetespkgapiv1AWSElasticBlockStoreVolumeSource awsElasticBlockStore = default(Iok8skubernetespkgapiv1AWSElasticBlockStoreVolumeSource), Iok8skubernetespkgapiv1AzureDiskVolumeSource azureDisk = default(Iok8skubernetespkgapiv1AzureDiskVolumeSource), Iok8skubernetespkgapiv1AzureFileVolumeSource azureFile = default(Iok8skubernetespkgapiv1AzureFileVolumeSource), Iok8skubernetespkgapiv1CephFSVolumeSource cephfs = default(Iok8skubernetespkgapiv1CephFSVolumeSource), Iok8skubernetespkgapiv1CinderVolumeSource cinder = default(Iok8skubernetespkgapiv1CinderVolumeSource), Iok8skubernetespkgapiv1ConfigMapVolumeSource configMap = default(Iok8skubernetespkgapiv1ConfigMapVolumeSource), Iok8skubernetespkgapiv1DownwardAPIVolumeSource downwardAPI = default(Iok8skubernetespkgapiv1DownwardAPIVolumeSource), Iok8skubernetespkgapiv1EmptyDirVolumeSource emptyDir = default(Iok8skubernetespkgapiv1EmptyDirVolumeSource), Iok8skubernetespkgapiv1FCVolumeSource fc = default(Iok8skubernetespkgapiv1FCVolumeSource), Iok8skubernetespkgapiv1FlexVolumeSource flexVolume = default(Iok8skubernetespkgapiv1FlexVolumeSource), Iok8skubernetespkgapiv1FlockerVolumeSource flocker = default(Iok8skubernetespkgapiv1FlockerVolumeSource), Iok8skubernetespkgapiv1GCEPersistentDiskVolumeSource gcePersistentDisk = default(Iok8skubernetespkgapiv1GCEPersistentDiskVolumeSource), Iok8skubernetespkgapiv1GitRepoVolumeSource gitRepo = default(Iok8skubernetespkgapiv1GitRepoVolumeSource), Iok8skubernetespkgapiv1GlusterfsVolumeSource glusterfs = default(Iok8skubernetespkgapiv1GlusterfsVolumeSource), Iok8skubernetespkgapiv1HostPathVolumeSource hostPath = default(Iok8skubernetespkgapiv1HostPathVolumeSource), Iok8skubernetespkgapiv1ISCSIVolumeSource iscsi = default(Iok8skubernetespkgapiv1ISCSIVolumeSource), Iok8skubernetespkgapiv1NFSVolumeSource nfs = default(Iok8skubernetespkgapiv1NFSVolumeSource), Iok8skubernetespkgapiv1PersistentVolumeClaimVolumeSource persistentVolumeClaim = default(Iok8skubernetespkgapiv1PersistentVolumeClaimVolumeSource), Iok8skubernetespkgapiv1PhotonPersistentDiskVolumeSource photonPersistentDisk = default(Iok8skubernetespkgapiv1PhotonPersistentDiskVolumeSource), Iok8skubernetespkgapiv1PortworxVolumeSource portworxVolume = default(Iok8skubernetespkgapiv1PortworxVolumeSource), Iok8skubernetespkgapiv1ProjectedVolumeSource projected = default(Iok8skubernetespkgapiv1ProjectedVolumeSource), Iok8skubernetespkgapiv1QuobyteVolumeSource quobyte = default(Iok8skubernetespkgapiv1QuobyteVolumeSource), Iok8skubernetespkgapiv1RBDVolumeSource rbd = default(Iok8skubernetespkgapiv1RBDVolumeSource), Iok8skubernetespkgapiv1ScaleIOVolumeSource scaleIO = default(Iok8skubernetespkgapiv1ScaleIOVolumeSource), Iok8skubernetespkgapiv1SecretVolumeSource secret = default(Iok8skubernetespkgapiv1SecretVolumeSource), Iok8skubernetespkgapiv1StorageOSVolumeSource storageos = default(Iok8skubernetespkgapiv1StorageOSVolumeSource), Iok8skubernetespkgapiv1VsphereVirtualDiskVolumeSource vsphereVolume = default(Iok8skubernetespkgapiv1VsphereVirtualDiskVolumeSource))
        {
            AwsElasticBlockStore = awsElasticBlockStore;
            AzureDisk = azureDisk;
            AzureFile = azureFile;
            Cephfs = cephfs;
            Cinder = cinder;
            ConfigMap = configMap;
            DownwardAPI = downwardAPI;
            EmptyDir = emptyDir;
            Fc = fc;
            FlexVolume = flexVolume;
            Flocker = flocker;
            GcePersistentDisk = gcePersistentDisk;
            GitRepo = gitRepo;
            Glusterfs = glusterfs;
            HostPath = hostPath;
            Iscsi = iscsi;
            Name = name;
            Nfs = nfs;
            PersistentVolumeClaim = persistentVolumeClaim;
            PhotonPersistentDisk = photonPersistentDisk;
            PortworxVolume = portworxVolume;
            Projected = projected;
            Quobyte = quobyte;
            Rbd = rbd;
            ScaleIO = scaleIO;
            Secret = secret;
            Storageos = storageos;
            VsphereVolume = vsphereVolume;
        }

        /// <summary>
        /// AWSElasticBlockStore represents an AWS Disk resource that is
        /// attached to a kubelet's host machine and then exposed to the pod.
        /// More info:
        /// https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        /// </summary>
        [JsonProperty(PropertyName = "awsElasticBlockStore")]
        public Iok8skubernetespkgapiv1AWSElasticBlockStoreVolumeSource AwsElasticBlockStore { get; set; }

        /// <summary>
        /// AzureDisk represents an Azure Data Disk mount on the host and bind
        /// mount to the pod.
        /// </summary>
        [JsonProperty(PropertyName = "azureDisk")]
        public Iok8skubernetespkgapiv1AzureDiskVolumeSource AzureDisk { get; set; }

        /// <summary>
        /// AzureFile represents an Azure File Service mount on the host and
        /// bind mount to the pod.
        /// </summary>
        [JsonProperty(PropertyName = "azureFile")]
        public Iok8skubernetespkgapiv1AzureFileVolumeSource AzureFile { get; set; }

        /// <summary>
        /// CephFS represents a Ceph FS mount on the host that shares a pod's
        /// lifetime
        /// </summary>
        [JsonProperty(PropertyName = "cephfs")]
        public Iok8skubernetespkgapiv1CephFSVolumeSource Cephfs { get; set; }

        /// <summary>
        /// Cinder represents a cinder volume attached and mounted on kubelets
        /// host machine More info:
        /// https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        /// </summary>
        [JsonProperty(PropertyName = "cinder")]
        public Iok8skubernetespkgapiv1CinderVolumeSource Cinder { get; set; }

        /// <summary>
        /// ConfigMap represents a configMap that should populate this volume
        /// </summary>
        [JsonProperty(PropertyName = "configMap")]
        public Iok8skubernetespkgapiv1ConfigMapVolumeSource ConfigMap { get; set; }

        /// <summary>
        /// DownwardAPI represents downward API about the pod that should
        /// populate this volume
        /// </summary>
        [JsonProperty(PropertyName = "downwardAPI")]
        public Iok8skubernetespkgapiv1DownwardAPIVolumeSource DownwardAPI { get; set; }

        /// <summary>
        /// EmptyDir represents a temporary directory that shares a pod's
        /// lifetime. More info:
        /// https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        /// </summary>
        [JsonProperty(PropertyName = "emptyDir")]
        public Iok8skubernetespkgapiv1EmptyDirVolumeSource EmptyDir { get; set; }

        /// <summary>
        /// FC represents a Fibre Channel resource that is attached to a
        /// kubelet's host machine and then exposed to the pod.
        /// </summary>
        [JsonProperty(PropertyName = "fc")]
        public Iok8skubernetespkgapiv1FCVolumeSource Fc { get; set; }

        /// <summary>
        /// FlexVolume represents a generic volume resource that is
        /// provisioned/attached using an exec based plugin. This is an alpha
        /// feature and may change in future.
        /// </summary>
        [JsonProperty(PropertyName = "flexVolume")]
        public Iok8skubernetespkgapiv1FlexVolumeSource FlexVolume { get; set; }

        /// <summary>
        /// Flocker represents a Flocker volume attached to a kubelet's host
        /// machine. This depends on the Flocker control service being running
        /// </summary>
        [JsonProperty(PropertyName = "flocker")]
        public Iok8skubernetespkgapiv1FlockerVolumeSource Flocker { get; set; }

        /// <summary>
        /// GCEPersistentDisk represents a GCE Disk resource that is attached
        /// to a kubelet's host machine and then exposed to the pod. More
        /// info:
        /// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        /// </summary>
        [JsonProperty(PropertyName = "gcePersistentDisk")]
        public Iok8skubernetespkgapiv1GCEPersistentDiskVolumeSource GcePersistentDisk { get; set; }

        /// <summary>
        /// GitRepo represents a git repository at a particular revision.
        /// </summary>
        [JsonProperty(PropertyName = "gitRepo")]
        public Iok8skubernetespkgapiv1GitRepoVolumeSource GitRepo { get; set; }

        /// <summary>
        /// Glusterfs represents a Glusterfs mount on the host that shares a
        /// pod's lifetime. More info:
        /// https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
        /// </summary>
        [JsonProperty(PropertyName = "glusterfs")]
        public Iok8skubernetespkgapiv1GlusterfsVolumeSource Glusterfs { get; set; }

        /// <summary>
        /// HostPath represents a pre-existing file or directory on the host
        /// machine that is directly exposed to the container. This is
        /// generally used for system agents or other privileged things that
        /// are allowed to see the host machine. Most containers will NOT
        /// need this. More info:
        /// https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        /// </summary>
        [JsonProperty(PropertyName = "hostPath")]
        public Iok8skubernetespkgapiv1HostPathVolumeSource HostPath { get; set; }

        /// <summary>
        /// ISCSI represents an ISCSI Disk resource that is attached to a
        /// kubelet's host machine and then exposed to the pod. More info:
        /// https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md
        /// </summary>
        [JsonProperty(PropertyName = "iscsi")]
        public Iok8skubernetespkgapiv1ISCSIVolumeSource Iscsi { get; set; }

        /// <summary>
        /// Volume's name. Must be a DNS_LABEL and unique within the pod. More
        /// info:
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// NFS represents an NFS mount on the host that shares a pod's
        /// lifetime More info:
        /// https://kubernetes.io/docs/concepts/storage/volumes#nfs
        /// </summary>
        [JsonProperty(PropertyName = "nfs")]
        public Iok8skubernetespkgapiv1NFSVolumeSource Nfs { get; set; }

        /// <summary>
        /// PersistentVolumeClaimVolumeSource represents a reference to a
        /// PersistentVolumeClaim in the same namespace. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        /// </summary>
        [JsonProperty(PropertyName = "persistentVolumeClaim")]
        public Iok8skubernetespkgapiv1PersistentVolumeClaimVolumeSource PersistentVolumeClaim { get; set; }

        /// <summary>
        /// PhotonPersistentDisk represents a PhotonController persistent disk
        /// attached and mounted on kubelets host machine
        /// </summary>
        [JsonProperty(PropertyName = "photonPersistentDisk")]
        public Iok8skubernetespkgapiv1PhotonPersistentDiskVolumeSource PhotonPersistentDisk { get; set; }

        /// <summary>
        /// PortworxVolume represents a portworx volume attached and mounted
        /// on kubelets host machine
        /// </summary>
        [JsonProperty(PropertyName = "portworxVolume")]
        public Iok8skubernetespkgapiv1PortworxVolumeSource PortworxVolume { get; set; }

        /// <summary>
        /// Items for all in one resources secrets, configmaps, and downward
        /// API
        /// </summary>
        [JsonProperty(PropertyName = "projected")]
        public Iok8skubernetespkgapiv1ProjectedVolumeSource Projected { get; set; }

        /// <summary>
        /// Quobyte represents a Quobyte mount on the host that shares a pod's
        /// lifetime
        /// </summary>
        [JsonProperty(PropertyName = "quobyte")]
        public Iok8skubernetespkgapiv1QuobyteVolumeSource Quobyte { get; set; }

        /// <summary>
        /// RBD represents a Rados Block Device mount on the host that shares
        /// a pod's lifetime. More info:
        /// https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
        /// </summary>
        [JsonProperty(PropertyName = "rbd")]
        public Iok8skubernetespkgapiv1RBDVolumeSource Rbd { get; set; }

        /// <summary>
        /// ScaleIO represents a ScaleIO persistent volume attached and
        /// mounted on Kubernetes nodes.
        /// </summary>
        [JsonProperty(PropertyName = "scaleIO")]
        public Iok8skubernetespkgapiv1ScaleIOVolumeSource ScaleIO { get; set; }

        /// <summary>
        /// Secret represents a secret that should populate this volume. More
        /// info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        /// </summary>
        [JsonProperty(PropertyName = "secret")]
        public Iok8skubernetespkgapiv1SecretVolumeSource Secret { get; set; }

        /// <summary>
        /// StorageOS represents a StorageOS volume attached and mounted on
        /// Kubernetes nodes.
        /// </summary>
        [JsonProperty(PropertyName = "storageos")]
        public Iok8skubernetespkgapiv1StorageOSVolumeSource Storageos { get; set; }

        /// <summary>
        /// VsphereVolume represents a vSphere volume attached and mounted on
        /// kubelets host machine
        /// </summary>
        [JsonProperty(PropertyName = "vsphereVolume")]
        public Iok8skubernetespkgapiv1VsphereVirtualDiskVolumeSource VsphereVolume { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (this.AwsElasticBlockStore != null)
            {
                this.AwsElasticBlockStore.Validate();
            }
            if (this.AzureDisk != null)
            {
                this.AzureDisk.Validate();
            }
            if (this.AzureFile != null)
            {
                this.AzureFile.Validate();
            }
            if (this.Cephfs != null)
            {
                this.Cephfs.Validate();
            }
            if (this.Cinder != null)
            {
                this.Cinder.Validate();
            }
            if (this.Fc != null)
            {
                this.Fc.Validate();
            }
            if (this.FlexVolume != null)
            {
                this.FlexVolume.Validate();
            }
            if (this.GcePersistentDisk != null)
            {
                this.GcePersistentDisk.Validate();
            }
            if (this.GitRepo != null)
            {
                this.GitRepo.Validate();
            }
            if (this.Glusterfs != null)
            {
                this.Glusterfs.Validate();
            }
            if (this.HostPath != null)
            {
                this.HostPath.Validate();
            }
            if (this.Iscsi != null)
            {
                this.Iscsi.Validate();
            }
            if (this.Nfs != null)
            {
                this.Nfs.Validate();
            }
            if (this.PersistentVolumeClaim != null)
            {
                this.PersistentVolumeClaim.Validate();
            }
            if (this.PhotonPersistentDisk != null)
            {
                this.PhotonPersistentDisk.Validate();
            }
            if (this.PortworxVolume != null)
            {
                this.PortworxVolume.Validate();
            }
            if (this.Projected != null)
            {
                this.Projected.Validate();
            }
            if (this.Quobyte != null)
            {
                this.Quobyte.Validate();
            }
            if (this.Rbd != null)
            {
                this.Rbd.Validate();
            }
            if (this.ScaleIO != null)
            {
                this.ScaleIO.Validate();
            }
            if (this.VsphereVolume != null)
            {
                this.VsphereVolume.Validate();
            }
        }
    }
}
