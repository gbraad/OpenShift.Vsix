// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// BuildStatus contains the status of a build
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgbuildapisbuildv1BuildStatus
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgbuildapisbuildv1BuildStatus class.
        /// </summary>
        public Comgithubopenshiftoriginpkgbuildapisbuildv1BuildStatus() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgbuildapisbuildv1BuildStatus class.
        /// </summary>
        public Comgithubopenshiftoriginpkgbuildapisbuildv1BuildStatus(string phase, bool? cancelled = default(bool?), DateTime? completionTimestamp = default(DateTime?), Iok8skubernetespkgapiv1ObjectReference config = default(Iok8skubernetespkgapiv1ObjectReference), long? duration = default(long?), string logSnippet = default(string), string message = default(string), Comgithubopenshiftoriginpkgbuildapisbuildv1BuildStatusOutput output = default(Comgithubopenshiftoriginpkgbuildapisbuildv1BuildStatusOutput), string outputDockerImageReference = default(string), string reason = default(string), IList<Comgithubopenshiftoriginpkgbuildapisbuildv1StageInfo> stages = default(IList<Comgithubopenshiftoriginpkgbuildapisbuildv1StageInfo>), DateTime? startTimestamp = default(DateTime?))
        {
            Cancelled = cancelled;
            CompletionTimestamp = completionTimestamp;
            Config = config;
            Duration = duration;
            LogSnippet = logSnippet;
            Message = message;
            Output = output;
            OutputDockerImageReference = outputDockerImageReference;
            Phase = phase;
            Reason = reason;
            Stages = stages;
            StartTimestamp = startTimestamp;
        }

        /// <summary>
        /// cancelled describes if a cancel event was triggered for the build.
        /// </summary>
        [JsonProperty(PropertyName = "cancelled")]
        public bool? Cancelled { get; set; }

        /// <summary>
        /// completionTimestamp is a timestamp representing the server time
        /// when this Build was finished, whether that build failed or
        /// succeeded.  It reflects the time at which the Pod running the
        /// Build terminated. It is represented in RFC3339 form and is in UTC.
        /// </summary>
        [JsonProperty(PropertyName = "completionTimestamp")]
        public DateTime? CompletionTimestamp { get; set; }

        /// <summary>
        /// config is an ObjectReference to the BuildConfig this Build is
        /// based on.
        /// </summary>
        [JsonProperty(PropertyName = "config")]
        public Iok8skubernetespkgapiv1ObjectReference Config { get; set; }

        /// <summary>
        /// duration contains time.Duration object describing build time.
        /// </summary>
        [JsonProperty(PropertyName = "duration")]
        public long? Duration { get; set; }

        /// <summary>
        /// logSnippet is the last few lines of the build log.  This value is
        /// only set for builds that failed.
        /// </summary>
        [JsonProperty(PropertyName = "logSnippet")]
        public string LogSnippet { get; set; }

        /// <summary>
        /// message is a human-readable message indicating details about why
        /// the build has this status.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// output describes the Docker image the build has produced.
        /// </summary>
        [JsonProperty(PropertyName = "output")]
        public Comgithubopenshiftoriginpkgbuildapisbuildv1BuildStatusOutput Output { get; set; }

        /// <summary>
        /// outputDockerImageReference contains a reference to the Docker
        /// image that will be built by this build. Its value is computed
        /// from Build.Spec.Output.To, and should include the registry
        /// address, so that it can be used to push and pull the image.
        /// </summary>
        [JsonProperty(PropertyName = "outputDockerImageReference")]
        public string OutputDockerImageReference { get; set; }

        /// <summary>
        /// phase is the point in the build lifecycle. Possible values are
        /// "New", "Pending", "Running", "Complete", "Failed", "Error", and
        /// "Cancelled".
        /// </summary>
        [JsonProperty(PropertyName = "phase")]
        public string Phase { get; set; }

        /// <summary>
        /// reason is a brief CamelCase string that describes any failure and
        /// is meant for machine parsing and tidy display in the CLI.
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// stages contains details about each stage that occurs during the
        /// build including start time, duration (in milliseconds), and the
        /// steps that occured within each stage.
        /// </summary>
        [JsonProperty(PropertyName = "stages")]
        public IList<Comgithubopenshiftoriginpkgbuildapisbuildv1StageInfo> Stages { get; set; }

        /// <summary>
        /// startTimestamp is a timestamp representing the server time when
        /// this Build started running in a Pod. It is represented in RFC3339
        /// form and is in UTC.
        /// </summary>
        [JsonProperty(PropertyName = "startTimestamp")]
        public DateTime? StartTimestamp { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Phase == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Phase");
            }
        }
    }
}
