// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ClusterResourceQuotaSelector is used to select projects.  At least one
    /// of LabelSelector or AnnotationSelector must present.  If only one is
    /// present, it is the only selection criteria.  If both are specified,
    /// the project must match both restrictions.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgquotaapisquotav1ClusterResourceQuotaSelector
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgquotaapisquotav1ClusterResourceQuotaSelector
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgquotaapisquotav1ClusterResourceQuotaSelector() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgquotaapisquotav1ClusterResourceQuotaSelector
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgquotaapisquotav1ClusterResourceQuotaSelector(IDictionary<string, string> annotations, Iok8sapimachinerypkgapismetav1LabelSelector labels)
        {
            Annotations = annotations;
            Labels = labels;
        }

        /// <summary>
        /// AnnotationSelector is used to select projects by annotation.
        /// </summary>
        [JsonProperty(PropertyName = "annotations")]
        public IDictionary<string, string> Annotations { get; set; }

        /// <summary>
        /// LabelSelector is used to select projects by label.
        /// </summary>
        [JsonProperty(PropertyName = "labels")]
        public Iok8sapimachinerypkgapismetav1LabelSelector Labels { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Annotations == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Annotations");
            }
            if (Labels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Labels");
            }
        }
    }
}
