// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// PersistentVolumeClaimStatus is the current status of a persistent
    /// volume claim.
    /// </summary>
    public partial class Iok8skubernetespkgapiv1PersistentVolumeClaimStatus
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1PersistentVolumeClaimStatus class.
        /// </summary>
        public Iok8skubernetespkgapiv1PersistentVolumeClaimStatus() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1PersistentVolumeClaimStatus class.
        /// </summary>
        public Iok8skubernetespkgapiv1PersistentVolumeClaimStatus(IList<string> accessModes = default(IList<string>), IDictionary<string, string> capacity = default(IDictionary<string, string>), string phase = default(string))
        {
            AccessModes = accessModes;
            Capacity = capacity;
            Phase = phase;
        }

        /// <summary>
        /// AccessModes contains the actual access modes the volume backing
        /// the PVC has. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </summary>
        [JsonProperty(PropertyName = "accessModes")]
        public IList<string> AccessModes { get; set; }

        /// <summary>
        /// Represents the actual resources of the underlying volume.
        /// </summary>
        [JsonProperty(PropertyName = "capacity")]
        public IDictionary<string, string> Capacity { get; set; }

        /// <summary>
        /// Phase represents the current phase of PersistentVolumeClaim.
        /// </summary>
        [JsonProperty(PropertyName = "phase")]
        public string Phase { get; set; }

    }
}
