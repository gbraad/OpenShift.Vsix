// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// DeploymentConfigSpec represents the desired state of the deployment.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgappsapisappsv1DeploymentConfigSpec
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgappsapisappsv1DeploymentConfigSpec
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgappsapisappsv1DeploymentConfigSpec() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgappsapisappsv1DeploymentConfigSpec
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgappsapisappsv1DeploymentConfigSpec(int? minReadySeconds = default(int?), bool? paused = default(bool?), int? replicas = default(int?), int? revisionHistoryLimit = default(int?), IDictionary<string, string> selector = default(IDictionary<string, string>), Comgithubopenshiftoriginpkgappsapisappsv1DeploymentStrategy strategy = default(Comgithubopenshiftoriginpkgappsapisappsv1DeploymentStrategy), Iok8skubernetespkgapiv1PodTemplateSpec template = default(Iok8skubernetespkgapiv1PodTemplateSpec), bool? test = default(bool?), IList<Comgithubopenshiftoriginpkgappsapisappsv1DeploymentTriggerPolicy> triggers = default(IList<Comgithubopenshiftoriginpkgappsapisappsv1DeploymentTriggerPolicy>))
        {
            MinReadySeconds = minReadySeconds;
            Paused = paused;
            Replicas = replicas;
            RevisionHistoryLimit = revisionHistoryLimit;
            Selector = selector;
            Strategy = strategy;
            Template = template;
            Test = test;
            Triggers = triggers;
        }

        /// <summary>
        /// MinReadySeconds is the minimum number of seconds for which a newly
        /// created pod should be ready without any of its container
        /// crashing, for it to be considered available. Defaults to 0 (pod
        /// will be considered available as soon as it is ready)
        /// </summary>
        [JsonProperty(PropertyName = "minReadySeconds")]
        public int? MinReadySeconds { get; set; }

        /// <summary>
        /// Paused indicates that the deployment config is paused resulting in
        /// no new deployments on template changes or changes in the template
        /// caused by other triggers.
        /// </summary>
        [JsonProperty(PropertyName = "paused")]
        public bool? Paused { get; set; }

        /// <summary>
        /// Replicas is the number of desired replicas.
        /// </summary>
        [JsonProperty(PropertyName = "replicas")]
        public int? Replicas { get; set; }

        /// <summary>
        /// RevisionHistoryLimit is the number of old ReplicationControllers
        /// to retain to allow for rollbacks. This field is a pointer to
        /// allow for differentiation between an explicit zero and not
        /// specified. Defaults to 10. (This only applies to
        /// DeploymentConfigs created via the new group API resource, not the
        /// legacy resource.)
        /// </summary>
        [JsonProperty(PropertyName = "revisionHistoryLimit")]
        public int? RevisionHistoryLimit { get; set; }

        /// <summary>
        /// Selector is a label query over pods that should match the Replicas
        /// count.
        /// </summary>
        [JsonProperty(PropertyName = "selector")]
        public IDictionary<string, string> Selector { get; set; }

        /// <summary>
        /// Strategy describes how a deployment is executed.
        /// </summary>
        [JsonProperty(PropertyName = "strategy")]
        public Comgithubopenshiftoriginpkgappsapisappsv1DeploymentStrategy Strategy { get; set; }

        /// <summary>
        /// Template is the object that describes the pod that will be created
        /// if insufficient replicas are detected.
        /// </summary>
        [JsonProperty(PropertyName = "template")]
        public Iok8skubernetespkgapiv1PodTemplateSpec Template { get; set; }

        /// <summary>
        /// Test ensures that this deployment config will have zero replicas
        /// except while a deployment is running. This allows the deployment
        /// config to be used as a continuous deployment test - triggering on
        /// images, running the deployment, and then succeeding or failing.
        /// Post strategy hooks and After actions can be used to integrate
        /// successful deployment with an action.
        /// </summary>
        [JsonProperty(PropertyName = "test")]
        public bool? Test { get; set; }

        /// <summary>
        /// Triggers determine how updates to a DeploymentConfig result in new
        /// deployments. If no triggers are defined, a new deployment can
        /// only occur as a result of an explicit client update to the
        /// DeploymentConfig with a new LatestVersion. If null, defaults to
        /// having a config change trigger.
        /// </summary>
        [JsonProperty(PropertyName = "triggers")]
        public IList<Comgithubopenshiftoriginpkgappsapisappsv1DeploymentTriggerPolicy> Triggers { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.Strategy != null)
            {
                this.Strategy.Validate();
            }
            if (this.Template != null)
            {
                this.Template.Validate();
            }
            if (this.Triggers != null)
            {
                foreach (var element in this.Triggers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
