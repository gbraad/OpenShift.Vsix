// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// GroupVersion contains the "group/version" and "version" string of a
    /// version. It is made a struct to keep extensibility.
    /// </summary>
    public partial class Iok8sapimachinerypkgapismetav1GroupVersionForDiscovery
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapimachinerypkgapismetav1GroupVersionForDiscovery class.
        /// </summary>
        public Iok8sapimachinerypkgapismetav1GroupVersionForDiscovery() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapimachinerypkgapismetav1GroupVersionForDiscovery class.
        /// </summary>
        public Iok8sapimachinerypkgapismetav1GroupVersionForDiscovery(string groupVersion, string version)
        {
            GroupVersion = groupVersion;
            Version = version;
        }

        /// <summary>
        /// groupVersion specifies the API group and version in the form
        /// "group/version"
        /// </summary>
        [JsonProperty(PropertyName = "groupVersion")]
        public string GroupVersion { get; set; }

        /// <summary>
        /// version specifies the version in the form of "version". This is to
        /// save the clients the trouble of splitting the GroupVersion.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (GroupVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GroupVersion");
            }
            if (Version == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Version");
            }
        }
    }
}
