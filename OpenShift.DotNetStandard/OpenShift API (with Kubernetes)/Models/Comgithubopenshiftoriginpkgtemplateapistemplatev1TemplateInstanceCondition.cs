// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// TemplateInstanceCondition contains condition information for a
    /// TemplateInstance.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgtemplateapistemplatev1TemplateInstanceCondition
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgtemplateapistemplatev1TemplateInstanceCondition
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgtemplateapistemplatev1TemplateInstanceCondition() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgtemplateapistemplatev1TemplateInstanceCondition
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgtemplateapistemplatev1TemplateInstanceCondition(DateTime lastTransitionTime, string message, string reason, string status, string type)
        {
            LastTransitionTime = lastTransitionTime;
            Message = message;
            Reason = reason;
            Status = status;
            Type = type;
        }

        /// <summary>
        /// LastTransitionTime is the last time a condition status
        /// transitioned from one state to another.
        /// </summary>
        [JsonProperty(PropertyName = "lastTransitionTime")]
        public DateTime LastTransitionTime { get; set; }

        /// <summary>
        /// Message is a human readable description of the details of the last
        /// transition, complementing reason.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Reason is a brief machine readable explanation for the condition's
        /// last transition.
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Status of the condition, one of True, False or Unknown.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Type of the condition, currently Ready or InstantiateFailure.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
            if (Reason == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Reason");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
