// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// The image stream import resource provides an easy way for a user to
    /// find and import Docker images from other Docker registries into the
    /// server. Individual images or an entire image repository may be
    /// imported, and users may choose to see the results of the import prior
    /// to tagging the resulting images into the specified image stream.
    /// 
    /// This API is intended for end-user tools that need to see the metadata
    /// of the image prior to import (for instance, to generate an
    /// application from it). Clients that know the desired image can
    /// continue to create spec.tags directly into their image streams.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgimageapisimagev1ImageStreamImport
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgimageapisimagev1ImageStreamImport
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgimageapisimagev1ImageStreamImport() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgimageapisimagev1ImageStreamImport
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgimageapisimagev1ImageStreamImport(Comgithubopenshiftoriginpkgimageapisimagev1ImageStreamImportSpec spec, Comgithubopenshiftoriginpkgimageapisimagev1ImageStreamImportStatus status, string apiVersion = default(string), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta))
        {
            ApiVersion = apiVersion;
            Kind = kind;
            Metadata = metadata;
            Spec = spec;
            Status = status;
        }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Spec is a description of the images that the user wishes to import
        /// </summary>
        [JsonProperty(PropertyName = "spec")]
        public Comgithubopenshiftoriginpkgimageapisimagev1ImageStreamImportSpec Spec { get; set; }

        /// <summary>
        /// Status is the the result of importing the image
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public Comgithubopenshiftoriginpkgimageapisimagev1ImageStreamImportStatus Status { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Spec == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Spec");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
            if (this.Spec != null)
            {
                this.Spec.Validate();
            }
            if (this.Status != null)
            {
                this.Status.Validate();
            }
        }
    }
}
