// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// GroupRestriction matches a group either by a string match on the group
    /// name or a label selector applied to group labels.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1GroupRestriction
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1GroupRestriction
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1GroupRestriction() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1GroupRestriction
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1GroupRestriction(IList<string> groups, IList<Iok8sapimachinerypkgapismetav1LabelSelector> labels)
        {
            Groups = groups;
            Labels = labels;
        }

        /// <summary>
        /// Groups is a list of groups used to match against an individual
        /// user's groups. If the user is a member of one of the whitelisted
        /// groups, the user is allowed to be bound to a role.
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public IList<string> Groups { get; set; }

        /// <summary>
        /// Selectors specifies a list of label selectors over group labels.
        /// </summary>
        [JsonProperty(PropertyName = "labels")]
        public IList<Iok8sapimachinerypkgapismetav1LabelSelector> Labels { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Groups == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Groups");
            }
            if (Labels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Labels");
            }
        }
    }
}
