// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// APIResource specifies the name of a resource and whether it is
    /// namespaced.
    /// </summary>
    public partial class Iok8sapimachinerypkgapismetav1APIResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapimachinerypkgapismetav1APIResource class.
        /// </summary>
        public Iok8sapimachinerypkgapismetav1APIResource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapimachinerypkgapismetav1APIResource class.
        /// </summary>
        public Iok8sapimachinerypkgapismetav1APIResource(string kind, string name, bool namespaced, string singularName, IList<string> verbs, IList<string> categories = default(IList<string>), IList<string> shortNames = default(IList<string>))
        {
            Categories = categories;
            Kind = kind;
            Name = name;
            Namespaced = namespaced;
            ShortNames = shortNames;
            SingularName = singularName;
            Verbs = verbs;
        }

        /// <summary>
        /// categories is a list of the grouped resources this resource
        /// belongs to (e.g. 'all')
        /// </summary>
        [JsonProperty(PropertyName = "categories")]
        public IList<string> Categories { get; set; }

        /// <summary>
        /// kind is the kind for the resource (e.g. 'Foo' is the kind for a
        /// resource 'foo')
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// name is the plural name of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// namespaced indicates if a resource is namespaced or not.
        /// </summary>
        [JsonProperty(PropertyName = "namespaced")]
        public bool Namespaced { get; set; }

        /// <summary>
        /// shortNames is a list of suggested short names of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "shortNames")]
        public IList<string> ShortNames { get; set; }

        /// <summary>
        /// singularName is the singular name of the resource.  This allows
        /// clients to handle plural and singular opaquely. The singularName
        /// is more correct for reporting status on a single item and both
        /// singular and plural are allowed from the kubectl CLI interface.
        /// </summary>
        [JsonProperty(PropertyName = "singularName")]
        public string SingularName { get; set; }

        /// <summary>
        /// verbs is a list of supported kube verbs (this includes get, list,
        /// watch, create, update, patch, delete, deletecollection, and proxy)
        /// </summary>
        [JsonProperty(PropertyName = "verbs")]
        public IList<string> Verbs { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Kind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kind");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (SingularName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SingularName");
            }
            if (Verbs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Verbs");
            }
        }
    }
}
