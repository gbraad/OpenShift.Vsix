// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Projects are the unit of isolation and collaboration in OpenShift. A
    /// project has one or more members, a quota on the resources that the
    /// project may consume, and the security controls on the resources in
    /// the project. Within a project, members may have different roles -
    /// project administrators can set membership, editors can create and
    /// manage the resources, and viewers can see but not access running
    /// containers. In a normal cluster project administrators are not able
    /// to alter their quotas - that is restricted to cluster administrators.
    /// 
    /// Listing or watching projects will return only projects the user has
    /// the reader role on.
    /// 
    /// An OpenShift project is an alternative representation of a Kubernetes
    /// namespace. Projects are exposed as editable to end users while
    /// namespaces are not. Direct creation of a project is typically
    /// restricted to administrators, while end users should use the
    /// requestproject resource.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgprojectapisprojectv1Project
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgprojectapisprojectv1Project class.
        /// </summary>
        public Comgithubopenshiftoriginpkgprojectapisprojectv1Project() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgprojectapisprojectv1Project class.
        /// </summary>
        public Comgithubopenshiftoriginpkgprojectapisprojectv1Project(string apiVersion = default(string), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta), Comgithubopenshiftoriginpkgprojectapisprojectv1ProjectSpec spec = default(Comgithubopenshiftoriginpkgprojectapisprojectv1ProjectSpec), Comgithubopenshiftoriginpkgprojectapisprojectv1ProjectStatus status = default(Comgithubopenshiftoriginpkgprojectapisprojectv1ProjectStatus))
        {
            ApiVersion = apiVersion;
            Kind = kind;
            Metadata = metadata;
            Spec = spec;
            Status = status;
        }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Spec defines the behavior of the Namespace.
        /// </summary>
        [JsonProperty(PropertyName = "spec")]
        public Comgithubopenshiftoriginpkgprojectapisprojectv1ProjectSpec Spec { get; set; }

        /// <summary>
        /// Status describes the current status of a Namespace
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public Comgithubopenshiftoriginpkgprojectapisprojectv1ProjectStatus Status { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
        }
    }
}
