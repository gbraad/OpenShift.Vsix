// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// AzureFile represents an Azure File Service mount on the host and bind
    /// mount to the pod.
    /// </summary>
    public partial class Iok8skubernetespkgapiv1AzureFileVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1AzureFileVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1AzureFileVolumeSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1AzureFileVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1AzureFileVolumeSource(string secretName, string shareName, bool? readOnlyProperty = default(bool?))
        {
            ReadOnlyProperty = readOnlyProperty;
            SecretName = secretName;
            ShareName = shareName;
        }

        /// <summary>
        /// Defaults to false (read/write). ReadOnly here will force the
        /// ReadOnly setting in VolumeMounts.
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// the name of secret that contains Azure Storage Account Name and Key
        /// </summary>
        [JsonProperty(PropertyName = "secretName")]
        public string SecretName { get; set; }

        /// <summary>
        /// Share Name
        /// </summary>
        [JsonProperty(PropertyName = "shareName")]
        public string ShareName { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (SecretName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SecretName");
            }
            if (ShareName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShareName");
            }
        }
    }
}
