// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// SignatureSubject holds information about a person or entity who
    /// created the signature.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgimageapisimagev1SignatureSubject
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgimageapisimagev1SignatureSubject class.
        /// </summary>
        public Comgithubopenshiftoriginpkgimageapisimagev1SignatureSubject() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgimageapisimagev1SignatureSubject class.
        /// </summary>
        public Comgithubopenshiftoriginpkgimageapisimagev1SignatureSubject(string publicKeyID, string commonName = default(string), string organization = default(string))
        {
            CommonName = commonName;
            Organization = organization;
            PublicKeyID = publicKeyID;
        }

        /// <summary>
        /// Common name (e.g. openshift-signing-service).
        /// </summary>
        [JsonProperty(PropertyName = "commonName")]
        public string CommonName { get; set; }

        /// <summary>
        /// Organization name.
        /// </summary>
        [JsonProperty(PropertyName = "organization")]
        public string Organization { get; set; }

        /// <summary>
        /// If present, it is a human readable key id of public key belonging
        /// to the subject used to verify image signature. It should contain
        /// at least 64 lowest bits of public key's fingerprint (e.g.
        /// 0x685ebe62bf278440).
        /// </summary>
        [JsonProperty(PropertyName = "publicKeyID")]
        public string PublicKeyID { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (PublicKeyID == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PublicKeyID");
            }
        }
    }
}
