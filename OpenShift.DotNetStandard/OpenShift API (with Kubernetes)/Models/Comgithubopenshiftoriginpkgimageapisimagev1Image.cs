// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Image is an immutable representation of a Docker image and metadata at
    /// a point in time.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgimageapisimagev1Image
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgimageapisimagev1Image class.
        /// </summary>
        public Comgithubopenshiftoriginpkgimageapisimagev1Image() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgimageapisimagev1Image class.
        /// </summary>
        public Comgithubopenshiftoriginpkgimageapisimagev1Image(IList<Comgithubopenshiftoriginpkgimageapisimagev1ImageLayer> dockerImageLayers, string apiVersion = default(string), string dockerImageConfig = default(string), string dockerImageManifest = default(string), string dockerImageManifestMediaType = default(string), Iok8sapimachinerypkgruntimeRawExtension dockerImageMetadata = default(Iok8sapimachinerypkgruntimeRawExtension), string dockerImageMetadataVersion = default(string), string dockerImageReference = default(string), IList<byte[]> dockerImageSignatures = default(IList<byte[]>), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta), IList<Comgithubopenshiftoriginpkgimageapisimagev1ImageSignature> signatures = default(IList<Comgithubopenshiftoriginpkgimageapisimagev1ImageSignature>))
        {
            ApiVersion = apiVersion;
            DockerImageConfig = dockerImageConfig;
            DockerImageLayers = dockerImageLayers;
            DockerImageManifest = dockerImageManifest;
            DockerImageManifestMediaType = dockerImageManifestMediaType;
            DockerImageMetadata = dockerImageMetadata;
            DockerImageMetadataVersion = dockerImageMetadataVersion;
            DockerImageReference = dockerImageReference;
            DockerImageSignatures = dockerImageSignatures;
            Kind = kind;
            Metadata = metadata;
            Signatures = signatures;
        }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// DockerImageConfig is a JSON blob that the runtime uses to set up
        /// the container. This is a part of manifest schema v2.
        /// </summary>
        [JsonProperty(PropertyName = "dockerImageConfig")]
        public string DockerImageConfig { get; set; }

        /// <summary>
        /// DockerImageLayers represents the layers in the image. May not be
        /// set if the image does not define that data.
        /// </summary>
        [JsonProperty(PropertyName = "dockerImageLayers")]
        public IList<Comgithubopenshiftoriginpkgimageapisimagev1ImageLayer> DockerImageLayers { get; set; }

        /// <summary>
        /// DockerImageManifest is the raw JSON of the manifest
        /// </summary>
        [JsonProperty(PropertyName = "dockerImageManifest")]
        public string DockerImageManifest { get; set; }

        /// <summary>
        /// DockerImageManifestMediaType specifies the mediaType of manifest.
        /// This is a part of manifest schema v2.
        /// </summary>
        [JsonProperty(PropertyName = "dockerImageManifestMediaType")]
        public string DockerImageManifestMediaType { get; set; }

        /// <summary>
        /// DockerImageMetadata contains metadata about this image
        /// </summary>
        [JsonProperty(PropertyName = "dockerImageMetadata")]
        public Iok8sapimachinerypkgruntimeRawExtension DockerImageMetadata { get; set; }

        /// <summary>
        /// DockerImageMetadataVersion conveys the version of the object,
        /// which if empty defaults to "1.0"
        /// </summary>
        [JsonProperty(PropertyName = "dockerImageMetadataVersion")]
        public string DockerImageMetadataVersion { get; set; }

        /// <summary>
        /// DockerImageReference is the string that can be used to pull this
        /// image.
        /// </summary>
        [JsonProperty(PropertyName = "dockerImageReference")]
        public string DockerImageReference { get; set; }

        /// <summary>
        /// DockerImageSignatures provides the signatures as opaque blobs.
        /// This is a part of manifest schema v1.
        /// </summary>
        [JsonProperty(PropertyName = "dockerImageSignatures")]
        public IList<byte[]> DockerImageSignatures { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Signatures holds all signatures of the image.
        /// </summary>
        [JsonProperty(PropertyName = "signatures")]
        public IList<Comgithubopenshiftoriginpkgimageapisimagev1ImageSignature> Signatures { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (DockerImageLayers == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DockerImageLayers");
            }
            if (this.DockerImageLayers != null)
            {
                foreach (var element in this.DockerImageLayers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.DockerImageMetadata != null)
            {
                this.DockerImageMetadata.Validate();
            }
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
            if (this.Signatures != null)
            {
                foreach (var element1 in this.Signatures)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
