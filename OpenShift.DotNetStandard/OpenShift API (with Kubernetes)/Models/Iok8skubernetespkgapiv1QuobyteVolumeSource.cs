// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte
    /// volumes do not support ownership management or SELinux relabeling.
    /// </summary>
    public partial class Iok8skubernetespkgapiv1QuobyteVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1QuobyteVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1QuobyteVolumeSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1QuobyteVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1QuobyteVolumeSource(string registry, string volume, string group = default(string), bool? readOnlyProperty = default(bool?), string user = default(string))
        {
            Group = group;
            ReadOnlyProperty = readOnlyProperty;
            Registry = registry;
            User = user;
            Volume = volume;
        }

        /// <summary>
        /// Group to map volume access to Default is no group
        /// </summary>
        [JsonProperty(PropertyName = "group")]
        public string Group { get; set; }

        /// <summary>
        /// ReadOnly here will force the Quobyte volume to be mounted with
        /// read-only permissions. Defaults to false.
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// Registry represents a single or multiple Quobyte Registry services
        /// specified as a string as host:port pair (multiple entries are
        /// separated with commas) which acts as the central registry for
        /// volumes
        /// </summary>
        [JsonProperty(PropertyName = "registry")]
        public string Registry { get; set; }

        /// <summary>
        /// User to map volume access to Defaults to serivceaccount user
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public string User { get; set; }

        /// <summary>
        /// Volume is a string that references an already created Quobyte
        /// volume by name.
        /// </summary>
        [JsonProperty(PropertyName = "volume")]
        public string Volume { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Registry == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Registry");
            }
            if (Volume == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Volume");
            }
        }
    }
}
