// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// SELinux  Strategy Options defines the strategy type and any options
    /// used to create the strategy.
    /// </summary>
    public partial class Iok8skubernetespkgapisextensionsv1beta1SELinuxStrategyOptions
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapisextensionsv1beta1SELinuxStrategyOptions
        /// class.
        /// </summary>
        public Iok8skubernetespkgapisextensionsv1beta1SELinuxStrategyOptions() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapisextensionsv1beta1SELinuxStrategyOptions
        /// class.
        /// </summary>
        public Iok8skubernetespkgapisextensionsv1beta1SELinuxStrategyOptions(string rule, Iok8skubernetespkgapiv1SELinuxOptions seLinuxOptions = default(Iok8skubernetespkgapiv1SELinuxOptions))
        {
            Rule = rule;
            SeLinuxOptions = seLinuxOptions;
        }

        /// <summary>
        /// type is the strategy that will dictate the allowable labels that
        /// may be set.
        /// </summary>
        [JsonProperty(PropertyName = "rule")]
        public string Rule { get; set; }

        /// <summary>
        /// seLinuxOptions required to run as; required for MustRunAs More
        /// info:
        /// https://git.k8s.io/community/contributors/design-proposals/security_context.md
        /// </summary>
        [JsonProperty(PropertyName = "seLinuxOptions")]
        public Iok8skubernetespkgapiv1SELinuxOptions SeLinuxOptions { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Rule == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Rule");
            }
        }
    }
}
