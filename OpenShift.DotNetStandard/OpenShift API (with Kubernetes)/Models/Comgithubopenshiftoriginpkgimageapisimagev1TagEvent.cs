// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// TagEvent is used by ImageStreamStatus to keep a historical record of
    /// images associated with a tag.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgimageapisimagev1TagEvent
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgimageapisimagev1TagEvent class.
        /// </summary>
        public Comgithubopenshiftoriginpkgimageapisimagev1TagEvent() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgimageapisimagev1TagEvent class.
        /// </summary>
        public Comgithubopenshiftoriginpkgimageapisimagev1TagEvent(DateTime created, string dockerImageReference, long generation, string image)
        {
            Created = created;
            DockerImageReference = dockerImageReference;
            Generation = generation;
            Image = image;
        }

        /// <summary>
        /// Created holds the time the TagEvent was created
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public DateTime Created { get; set; }

        /// <summary>
        /// DockerImageReference is the string that can be used to pull this
        /// image
        /// </summary>
        [JsonProperty(PropertyName = "dockerImageReference")]
        public string DockerImageReference { get; set; }

        /// <summary>
        /// Generation is the spec tag generation that resulted in this tag
        /// being updated
        /// </summary>
        [JsonProperty(PropertyName = "generation")]
        public long Generation { get; set; }

        /// <summary>
        /// Image is the image
        /// </summary>
        [JsonProperty(PropertyName = "image")]
        public string Image { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (DockerImageReference == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DockerImageReference");
            }
            if (Image == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Image");
            }
        }
    }
}
