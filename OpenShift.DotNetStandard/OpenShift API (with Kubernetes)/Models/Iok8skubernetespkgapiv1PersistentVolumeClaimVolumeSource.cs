// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// PersistentVolumeClaimVolumeSource references the user's PVC in the
    /// same namespace. This volume finds the bound PV and mounts that volume
    /// for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a
    /// wrapper around another type of volume that is owned by someone else
    /// (the system).
    /// </summary>
    public partial class Iok8skubernetespkgapiv1PersistentVolumeClaimVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1PersistentVolumeClaimVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1PersistentVolumeClaimVolumeSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1PersistentVolumeClaimVolumeSource class.
        /// </summary>
        public Iok8skubernetespkgapiv1PersistentVolumeClaimVolumeSource(string claimName, bool? readOnlyProperty = default(bool?))
        {
            ClaimName = claimName;
            ReadOnlyProperty = readOnlyProperty;
        }

        /// <summary>
        /// ClaimName is the name of a PersistentVolumeClaim in the same
        /// namespace as the pod using this volume. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        /// </summary>
        [JsonProperty(PropertyName = "claimName")]
        public string ClaimName { get; set; }

        /// <summary>
        /// Will force the ReadOnly setting in VolumeMounts. Default false.
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (ClaimName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClaimName");
            }
        }
    }
}
