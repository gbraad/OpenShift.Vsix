// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// UserRestriction matches a user either by a string match on the user
    /// name, a string match on the name of a group to which the user
    /// belongs, or a label selector applied to the user labels.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1UserRestriction
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1UserRestriction
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1UserRestriction() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1UserRestriction
        /// class.
        /// </summary>
        public Comgithubopenshiftoriginpkgauthorizationapisauthorizationv1UserRestriction(IList<string> groups, IList<Iok8sapimachinerypkgapismetav1LabelSelector> labels, IList<string> users)
        {
            Groups = groups;
            Labels = labels;
            Users = users;
        }

        /// <summary>
        /// Groups specifies a list of literal group names.
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public IList<string> Groups { get; set; }

        /// <summary>
        /// Selectors specifies a list of label selectors over user labels.
        /// </summary>
        [JsonProperty(PropertyName = "labels")]
        public IList<Iok8sapimachinerypkgapismetav1LabelSelector> Labels { get; set; }

        /// <summary>
        /// Users specifies a list of literal user names.
        /// </summary>
        [JsonProperty(PropertyName = "users")]
        public IList<string> Users { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Groups == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Groups");
            }
            if (Labels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Labels");
            }
            if (Users == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Users");
            }
        }
    }
}
