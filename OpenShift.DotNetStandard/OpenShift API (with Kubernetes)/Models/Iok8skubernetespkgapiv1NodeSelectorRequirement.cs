// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// A node selector requirement is a selector that contains values, a key,
    /// and an operator that relates the key and values.
    /// </summary>
    public partial class Iok8skubernetespkgapiv1NodeSelectorRequirement
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1NodeSelectorRequirement class.
        /// </summary>
        public Iok8skubernetespkgapiv1NodeSelectorRequirement() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapiv1NodeSelectorRequirement class.
        /// </summary>
        public Iok8skubernetespkgapiv1NodeSelectorRequirement(string key, string operatorProperty, IList<string> values = default(IList<string>))
        {
            Key = key;
            OperatorProperty = operatorProperty;
            Values = values;
        }

        /// <summary>
        /// The label key that the selector applies to.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// Represents a key's relationship to a set of values. Valid
        /// operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public string OperatorProperty { get; set; }

        /// <summary>
        /// An array of string values. If the operator is In or NotIn, the
        /// values array must be non-empty. If the operator is Exists or
        /// DoesNotExist, the values array must be empty. If the operator is
        /// Gt or Lt, the values array must have a single element, which will
        /// be interpreted as an integer. This array is replaced during a
        /// strategic merge patch.
        /// </summary>
        [JsonProperty(PropertyName = "values")]
        public IList<string> Values { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Key == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Key");
            }
            if (OperatorProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperatorProperty");
            }
        }
    }
}
