// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Upon log in, every user of the system receives a User and Identity
    /// resource. Administrators may directly manipulate the attributes of
    /// the users for their own tracking, or set groups via the API. The user
    /// name is unique and is chosen based on the value provided by the
    /// identity provider - if a user already exists with the incoming name,
    /// the user name may have a number appended to it depending on the
    /// configuration of the system.
    /// </summary>
    public partial class Comgithubopenshiftoriginpkguserapisuserv1User
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkguserapisuserv1User class.
        /// </summary>
        public Comgithubopenshiftoriginpkguserapisuserv1User() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftoriginpkguserapisuserv1User class.
        /// </summary>
        public Comgithubopenshiftoriginpkguserapisuserv1User(IList<string> groups, IList<string> identities, string apiVersion = default(string), string fullName = default(string), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta))
        {
            ApiVersion = apiVersion;
            FullName = fullName;
            Groups = groups;
            Identities = identities;
            Kind = kind;
            Metadata = metadata;
        }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// FullName is the full name of user
        /// </summary>
        [JsonProperty(PropertyName = "fullName")]
        public string FullName { get; set; }

        /// <summary>
        /// Groups specifies group names this user is a member of. This field
        /// is deprecated and will be removed in a future release. Instead,
        /// create a Group object containing the name of this User.
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public IList<string> Groups { get; set; }

        /// <summary>
        /// Identities are the identities associated with this user
        /// </summary>
        [JsonProperty(PropertyName = "identities")]
        public IList<string> Identities { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Groups == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Groups");
            }
            if (Identities == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Identities");
            }
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
        }
    }
}
