// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// RouteIngress holds information about the places where a route is
    /// exposed.
    /// </summary>
    public partial class Comgithubopenshiftapiroutev1RouteIngress
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiroutev1RouteIngress class.
        /// </summary>
        public Comgithubopenshiftapiroutev1RouteIngress() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiroutev1RouteIngress class.
        /// </summary>
        public Comgithubopenshiftapiroutev1RouteIngress(IList<Comgithubopenshiftapiroutev1RouteIngressCondition> conditions = default(IList<Comgithubopenshiftapiroutev1RouteIngressCondition>), string host = default(string), string routerCanonicalHostname = default(string), string routerName = default(string), string wildcardPolicy = default(string))
        {
            Conditions = conditions;
            Host = host;
            RouterCanonicalHostname = routerCanonicalHostname;
            RouterName = routerName;
            WildcardPolicy = wildcardPolicy;
        }

        /// <summary>
        /// Conditions is the state of the route, may be empty.
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public IList<Comgithubopenshiftapiroutev1RouteIngressCondition> Conditions { get; set; }

        /// <summary>
        /// Host is the host string under which the route is exposed; this
        /// value is required
        /// </summary>
        [JsonProperty(PropertyName = "host")]
        public string Host { get; set; }

        /// <summary>
        /// CanonicalHostname is the external host name for the router that
        /// can be used as a CNAME for the host requested for this route.
        /// This value is optional and may not be set in all cases.
        /// </summary>
        [JsonProperty(PropertyName = "routerCanonicalHostname")]
        public string RouterCanonicalHostname { get; set; }

        /// <summary>
        /// Name is a name chosen by the router to identify itself; this value
        /// is required
        /// </summary>
        [JsonProperty(PropertyName = "routerName")]
        public string RouterName { get; set; }

        /// <summary>
        /// Wildcard policy is the wildcard policy that was allowed where this
        /// route is exposed.
        /// </summary>
        [JsonProperty(PropertyName = "wildcardPolicy")]
        public string WildcardPolicy { get; set; }

    }
}
