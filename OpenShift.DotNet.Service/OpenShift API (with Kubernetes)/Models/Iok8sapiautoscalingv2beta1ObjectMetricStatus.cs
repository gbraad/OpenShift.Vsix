// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ObjectMetricStatus indicates the current value of a metric describing
    /// a kubernetes object (for example, hits-per-second on an Ingress
    /// object).
    /// </summary>
    public partial class Iok8sapiautoscalingv2beta1ObjectMetricStatus
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiautoscalingv2beta1ObjectMetricStatus class.
        /// </summary>
        public Iok8sapiautoscalingv2beta1ObjectMetricStatus() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiautoscalingv2beta1ObjectMetricStatus class.
        /// </summary>
        public Iok8sapiautoscalingv2beta1ObjectMetricStatus(string currentValue, string metricName, Iok8sapiautoscalingv2beta1CrossVersionObjectReference target)
        {
            CurrentValue = currentValue;
            MetricName = metricName;
            Target = target;
        }

        /// <summary>
        /// currentValue is the current value of the metric (as a quantity).
        /// </summary>
        [JsonProperty(PropertyName = "currentValue")]
        public string CurrentValue { get; set; }

        /// <summary>
        /// metricName is the name of the metric in question.
        /// </summary>
        [JsonProperty(PropertyName = "metricName")]
        public string MetricName { get; set; }

        /// <summary>
        /// target is the described Kubernetes object.
        /// </summary>
        [JsonProperty(PropertyName = "target")]
        public Iok8sapiautoscalingv2beta1CrossVersionObjectReference Target { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (CurrentValue == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CurrentValue");
            }
            if (MetricName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MetricName");
            }
            if (Target == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Target");
            }
            if (this.Target != null)
            {
                this.Target.Validate();
            }
        }
    }
}
