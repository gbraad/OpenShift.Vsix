// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// PodsMetricSource indicates how to scale on a metric describing each
    /// pod in the current scale target (for example,
    /// transactions-processed-per-second). The values will be averaged
    /// together before being compared to the target value.
    /// </summary>
    public partial class Iok8sapiautoscalingv2beta1PodsMetricSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiautoscalingv2beta1PodsMetricSource class.
        /// </summary>
        public Iok8sapiautoscalingv2beta1PodsMetricSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiautoscalingv2beta1PodsMetricSource class.
        /// </summary>
        public Iok8sapiautoscalingv2beta1PodsMetricSource(string metricName, string targetAverageValue)
        {
            MetricName = metricName;
            TargetAverageValue = targetAverageValue;
        }

        /// <summary>
        /// metricName is the name of the metric in question
        /// </summary>
        [JsonProperty(PropertyName = "metricName")]
        public string MetricName { get; set; }

        /// <summary>
        /// targetAverageValue is the target value of the average of the
        /// metric across all relevant pods (as a quantity)
        /// </summary>
        [JsonProperty(PropertyName = "targetAverageValue")]
        public string TargetAverageValue { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (MetricName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MetricName");
            }
            if (TargetAverageValue == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetAverageValue");
            }
        }
    }
}
