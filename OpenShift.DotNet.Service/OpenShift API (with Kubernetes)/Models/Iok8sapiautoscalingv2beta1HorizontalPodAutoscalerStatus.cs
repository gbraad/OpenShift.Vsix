// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// HorizontalPodAutoscalerStatus describes the current status of a
    /// horizontal pod autoscaler.
    /// </summary>
    public partial class Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerStatus
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerStatus class.
        /// </summary>
        public Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerStatus() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerStatus class.
        /// </summary>
        public Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerStatus(IList<Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerCondition> conditions, IList<Iok8sapiautoscalingv2beta1MetricStatus> currentMetrics, int currentReplicas, int desiredReplicas, DateTime? lastScaleTime = default(DateTime?), long? observedGeneration = default(long?))
        {
            Conditions = conditions;
            CurrentMetrics = currentMetrics;
            CurrentReplicas = currentReplicas;
            DesiredReplicas = desiredReplicas;
            LastScaleTime = lastScaleTime;
            ObservedGeneration = observedGeneration;
        }

        /// <summary>
        /// conditions is the set of conditions required for this autoscaler
        /// to scale its target, and indicates whether or not those
        /// conditions are met.
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public IList<Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerCondition> Conditions { get; set; }

        /// <summary>
        /// currentMetrics is the last read state of the metrics used by this
        /// autoscaler.
        /// </summary>
        [JsonProperty(PropertyName = "currentMetrics")]
        public IList<Iok8sapiautoscalingv2beta1MetricStatus> CurrentMetrics { get; set; }

        /// <summary>
        /// currentReplicas is current number of replicas of pods managed by
        /// this autoscaler, as last seen by the autoscaler.
        /// </summary>
        [JsonProperty(PropertyName = "currentReplicas")]
        public int CurrentReplicas { get; set; }

        /// <summary>
        /// desiredReplicas is the desired number of replicas of pods managed
        /// by this autoscaler, as last calculated by the autoscaler.
        /// </summary>
        [JsonProperty(PropertyName = "desiredReplicas")]
        public int DesiredReplicas { get; set; }

        /// <summary>
        /// lastScaleTime is the last time the HorizontalPodAutoscaler scaled
        /// the number of pods, used by the autoscaler to control how often
        /// the number of pods is changed.
        /// </summary>
        [JsonProperty(PropertyName = "lastScaleTime")]
        public DateTime? LastScaleTime { get; set; }

        /// <summary>
        /// observedGeneration is the most recent generation observed by this
        /// autoscaler.
        /// </summary>
        [JsonProperty(PropertyName = "observedGeneration")]
        public long? ObservedGeneration { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Conditions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Conditions");
            }
            if (CurrentMetrics == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CurrentMetrics");
            }
            if (this.Conditions != null)
            {
                foreach (var element in this.Conditions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.CurrentMetrics != null)
            {
                foreach (var element1 in this.CurrentMetrics)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
