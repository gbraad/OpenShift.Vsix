// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// TLSConfig defines config used to secure a route and provide termination
    /// </summary>
    public partial class Comgithubopenshiftapiroutev1TLSConfig
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiroutev1TLSConfig class.
        /// </summary>
        public Comgithubopenshiftapiroutev1TLSConfig() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiroutev1TLSConfig class.
        /// </summary>
        public Comgithubopenshiftapiroutev1TLSConfig(string termination, string caCertificate = default(string), string certificate = default(string), string destinationCACertificate = default(string), string insecureEdgeTerminationPolicy = default(string), string key = default(string))
        {
            CaCertificate = caCertificate;
            Certificate = certificate;
            DestinationCACertificate = destinationCACertificate;
            InsecureEdgeTerminationPolicy = insecureEdgeTerminationPolicy;
            Key = key;
            Termination = termination;
        }

        /// <summary>
        /// caCertificate provides the cert authority certificate contents
        /// </summary>
        [JsonProperty(PropertyName = "caCertificate")]
        public string CaCertificate { get; set; }

        /// <summary>
        /// certificate provides certificate contents
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public string Certificate { get; set; }

        /// <summary>
        /// destinationCACertificate provides the contents of the ca
        /// certificate of the final destination.  When using reencrypt
        /// termination this file should be provided in order to have routers
        /// use it for health checks on the secure connection. If this field
        /// is not specified, the router may provide its own destination CA
        /// and perform hostname validation using the short service name
        /// (service.namespace.svc), which allows infrastructure generated
        /// certificates to automatically verify.
        /// </summary>
        [JsonProperty(PropertyName = "destinationCACertificate")]
        public string DestinationCACertificate { get; set; }

        /// <summary>
        /// insecureEdgeTerminationPolicy indicates the desired behavior for
        /// insecure connections to a route. While each router may make its
        /// own decisions on which ports to expose, this is normally port 80.
        /// 
        /// * Allow - traffic is sent to the server on the insecure port
        /// (default) * Disable - no traffic is allowed on the insecure port.
        /// * Redirect - clients are redirected to the secure port.
        /// </summary>
        [JsonProperty(PropertyName = "insecureEdgeTerminationPolicy")]
        public string InsecureEdgeTerminationPolicy { get; set; }

        /// <summary>
        /// key provides key file contents
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// termination indicates termination type.
        /// </summary>
        [JsonProperty(PropertyName = "termination")]
        public string Termination { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Termination == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Termination");
            }
        }
    }
}
