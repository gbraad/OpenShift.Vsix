// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Event is a report of an event somewhere in the cluster. It generally
    /// denotes some state change in the system.
    /// </summary>
    public partial class Iok8sapieventsv1beta1Event
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapieventsv1beta1Event class.
        /// </summary>
        public Iok8sapieventsv1beta1Event() { }

        /// <summary>
        /// Initializes a new instance of the Iok8sapieventsv1beta1Event class.
        /// </summary>
        public Iok8sapieventsv1beta1Event(DateTime eventTime, string action = default(string), string apiVersion = default(string), int? deprecatedCount = default(int?), DateTime? deprecatedFirstTimestamp = default(DateTime?), DateTime? deprecatedLastTimestamp = default(DateTime?), Iok8sapicorev1EventSource deprecatedSource = default(Iok8sapicorev1EventSource), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta), string note = default(string), string reason = default(string), Iok8sapicorev1ObjectReference regarding = default(Iok8sapicorev1ObjectReference), Iok8sapicorev1ObjectReference related = default(Iok8sapicorev1ObjectReference), string reportingController = default(string), string reportingInstance = default(string), Iok8sapieventsv1beta1EventSeries series = default(Iok8sapieventsv1beta1EventSeries), string type = default(string))
        {
            Action = action;
            ApiVersion = apiVersion;
            DeprecatedCount = deprecatedCount;
            DeprecatedFirstTimestamp = deprecatedFirstTimestamp;
            DeprecatedLastTimestamp = deprecatedLastTimestamp;
            DeprecatedSource = deprecatedSource;
            EventTime = eventTime;
            Kind = kind;
            Metadata = metadata;
            Note = note;
            Reason = reason;
            Regarding = regarding;
            Related = related;
            ReportingController = reportingController;
            ReportingInstance = reportingInstance;
            Series = series;
            Type = type;
        }

        /// <summary>
        /// What action was taken/failed regarding to the regarding object.
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public string Action { get; set; }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Deprecated field assuring backward compatibility with core.v1
        /// Event type
        /// </summary>
        [JsonProperty(PropertyName = "deprecatedCount")]
        public int? DeprecatedCount { get; set; }

        /// <summary>
        /// Deprecated field assuring backward compatibility with core.v1
        /// Event type
        /// </summary>
        [JsonProperty(PropertyName = "deprecatedFirstTimestamp")]
        public DateTime? DeprecatedFirstTimestamp { get; set; }

        /// <summary>
        /// Deprecated field assuring backward compatibility with core.v1
        /// Event type
        /// </summary>
        [JsonProperty(PropertyName = "deprecatedLastTimestamp")]
        public DateTime? DeprecatedLastTimestamp { get; set; }

        /// <summary>
        /// Deprecated field assuring backward compatibility with core.v1
        /// Event type
        /// </summary>
        [JsonProperty(PropertyName = "deprecatedSource")]
        public Iok8sapicorev1EventSource DeprecatedSource { get; set; }

        /// <summary>
        /// Required. Time when this Event was first observed.
        /// </summary>
        [JsonProperty(PropertyName = "eventTime")]
        public DateTime EventTime { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Optional. A human-readable description of the status of this
        /// operation. Maximal length of the note is 1kB, but libraries
        /// should be prepared to handle values up to 64kB.
        /// </summary>
        [JsonProperty(PropertyName = "note")]
        public string Note { get; set; }

        /// <summary>
        /// Why the action was taken.
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// The object this Event is about. In most cases it's an Object
        /// reporting controller implements. E.g. ReplicaSetController
        /// implements ReplicaSets and this event is emitted because it acts
        /// on some changes in a ReplicaSet object.
        /// </summary>
        [JsonProperty(PropertyName = "regarding")]
        public Iok8sapicorev1ObjectReference Regarding { get; set; }

        /// <summary>
        /// Optional secondary object for more complex actions. E.g. when
        /// regarding object triggers a creation or deletion of related
        /// object.
        /// </summary>
        [JsonProperty(PropertyName = "related")]
        public Iok8sapicorev1ObjectReference Related { get; set; }

        /// <summary>
        /// Name of the controller that emitted this Event, e.g.
        /// `kubernetes.io/kubelet`.
        /// </summary>
        [JsonProperty(PropertyName = "reportingController")]
        public string ReportingController { get; set; }

        /// <summary>
        /// ID of the controller instance, e.g. `kubelet-xyzf`.
        /// </summary>
        [JsonProperty(PropertyName = "reportingInstance")]
        public string ReportingInstance { get; set; }

        /// <summary>
        /// Data about the Event series this event represents or nil if it's a
        /// singleton Event.
        /// </summary>
        [JsonProperty(PropertyName = "series")]
        public Iok8sapieventsv1beta1EventSeries Series { get; set; }

        /// <summary>
        /// Type of this event (Normal, Warning), new types could be added in
        /// the future.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
            if (this.Series != null)
            {
                this.Series.Validate();
            }
        }
    }
}
