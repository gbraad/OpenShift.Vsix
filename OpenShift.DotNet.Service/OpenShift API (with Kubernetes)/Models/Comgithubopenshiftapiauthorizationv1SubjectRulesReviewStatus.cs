// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// SubjectRulesReviewStatus is contains the result of a rules check
    /// </summary>
    public partial class Comgithubopenshiftapiauthorizationv1SubjectRulesReviewStatus
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiauthorizationv1SubjectRulesReviewStatus
        /// class.
        /// </summary>
        public Comgithubopenshiftapiauthorizationv1SubjectRulesReviewStatus() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiauthorizationv1SubjectRulesReviewStatus
        /// class.
        /// </summary>
        public Comgithubopenshiftapiauthorizationv1SubjectRulesReviewStatus(IList<Comgithubopenshiftapiauthorizationv1PolicyRule> rules, string evaluationError = default(string))
        {
            EvaluationError = evaluationError;
            Rules = rules;
        }

        /// <summary>
        /// EvaluationError can appear in combination with Rules.  It means
        /// some error happened during evaluation that may have prevented
        /// additional rules from being populated.
        /// </summary>
        [JsonProperty(PropertyName = "evaluationError")]
        public string EvaluationError { get; set; }

        /// <summary>
        /// Rules is the list of rules (no particular sort) that are allowed
        /// for the subject
        /// </summary>
        [JsonProperty(PropertyName = "rules")]
        public IList<Comgithubopenshiftapiauthorizationv1PolicyRule> Rules { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Rules == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Rules");
            }
            if (this.Rules != null)
            {
                foreach (var element in this.Rules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
