// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// SecretBuildSource describes a secret and its destination directory
    /// that will be used only at the build time. The content of the secret
    /// referenced here will be copied into the destination directory instead
    /// of mounting.
    /// </summary>
    public partial class Comgithubopenshiftapibuildv1SecretBuildSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapibuildv1SecretBuildSource class.
        /// </summary>
        public Comgithubopenshiftapibuildv1SecretBuildSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapibuildv1SecretBuildSource class.
        /// </summary>
        public Comgithubopenshiftapibuildv1SecretBuildSource(Iok8sapicorev1LocalObjectReference secret, string destinationDir = default(string))
        {
            DestinationDir = destinationDir;
            Secret = secret;
        }

        /// <summary>
        /// destinationDir is the directory where the files from the secret
        /// should be available for the build time. For the Source build
        /// strategy, these will be injected into a container where the
        /// assemble script runs. Later, when the script finishes, all files
        /// injected will be truncated to zero length. For the Docker build
        /// strategy, these will be copied into the build directory, where
        /// the Dockerfile is located, so users can ADD or COPY them during
        /// docker build.
        /// </summary>
        [JsonProperty(PropertyName = "destinationDir")]
        public string DestinationDir { get; set; }

        /// <summary>
        /// secret is a reference to an existing secret that you want to use
        /// in your build.
        /// </summary>
        [JsonProperty(PropertyName = "secret")]
        public Iok8sapicorev1LocalObjectReference Secret { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Secret == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Secret");
            }
        }
    }
}
