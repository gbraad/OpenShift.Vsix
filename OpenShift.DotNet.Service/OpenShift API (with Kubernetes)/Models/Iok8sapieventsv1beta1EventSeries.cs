// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// EventSeries contain information on series of events, i.e. thing that
    /// was/is happening continously for some time.
    /// </summary>
    public partial class Iok8sapieventsv1beta1EventSeries
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapieventsv1beta1EventSeries
        /// class.
        /// </summary>
        public Iok8sapieventsv1beta1EventSeries() { }

        /// <summary>
        /// Initializes a new instance of the Iok8sapieventsv1beta1EventSeries
        /// class.
        /// </summary>
        public Iok8sapieventsv1beta1EventSeries(int count, DateTime lastObservedTime, string state)
        {
            Count = count;
            LastObservedTime = lastObservedTime;
            State = state;
        }

        /// <summary>
        /// Number of occurrences in this series up to the last heartbeat time
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int Count { get; set; }

        /// <summary>
        /// Time when last Event from the series was seen before last
        /// heartbeat.
        /// </summary>
        [JsonProperty(PropertyName = "lastObservedTime")]
        public DateTime LastObservedTime { get; set; }

        /// <summary>
        /// Information whether this series is ongoing or finished.
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (State == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "State");
            }
        }
    }
}
