// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// SubjectRulesReviewStatus contains the result of a rules check. This
    /// check can be incomplete depending on the set of authorizers the
    /// server is configured with and any errors experienced during
    /// evaluation. Because authorization rules are additive, if a rule
    /// appears in a list it's safe to assume the subject has that
    /// permission, even if that list is incomplete.
    /// </summary>
    public partial class Iok8sapiauthorizationv1beta1SubjectRulesReviewStatus
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiauthorizationv1beta1SubjectRulesReviewStatus class.
        /// </summary>
        public Iok8sapiauthorizationv1beta1SubjectRulesReviewStatus() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiauthorizationv1beta1SubjectRulesReviewStatus class.
        /// </summary>
        public Iok8sapiauthorizationv1beta1SubjectRulesReviewStatus(bool incomplete, IList<Iok8sapiauthorizationv1beta1NonResourceRule> nonResourceRules, IList<Iok8sapiauthorizationv1beta1ResourceRule> resourceRules, string evaluationError = default(string))
        {
            EvaluationError = evaluationError;
            Incomplete = incomplete;
            NonResourceRules = nonResourceRules;
            ResourceRules = resourceRules;
        }

        /// <summary>
        /// EvaluationError can appear in combination with Rules. It indicates
        /// an error occurred during rule evaluation, such as an authorizer
        /// that doesn't support rule evaluation, and that ResourceRules
        /// and/or NonResourceRules may be incomplete.
        /// </summary>
        [JsonProperty(PropertyName = "evaluationError")]
        public string EvaluationError { get; set; }

        /// <summary>
        /// Incomplete is true when the rules returned by this call are
        /// incomplete. This is most commonly encountered when an authorizer,
        /// such as an external authorizer, doesn't support rules evaluation.
        /// </summary>
        [JsonProperty(PropertyName = "incomplete")]
        public bool Incomplete { get; set; }

        /// <summary>
        /// NonResourceRules is the list of actions the subject is allowed to
        /// perform on non-resources. The list ordering isn't significant,
        /// may contain duplicates, and possibly be incomplete.
        /// </summary>
        [JsonProperty(PropertyName = "nonResourceRules")]
        public IList<Iok8sapiauthorizationv1beta1NonResourceRule> NonResourceRules { get; set; }

        /// <summary>
        /// ResourceRules is the list of actions the subject is allowed to
        /// perform on resources. The list ordering isn't significant, may
        /// contain duplicates, and possibly be incomplete.
        /// </summary>
        [JsonProperty(PropertyName = "resourceRules")]
        public IList<Iok8sapiauthorizationv1beta1ResourceRule> ResourceRules { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (NonResourceRules == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NonResourceRules");
            }
            if (ResourceRules == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceRules");
            }
            if (this.NonResourceRules != null)
            {
                foreach (var element in this.NonResourceRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ResourceRules != null)
            {
                foreach (var element1 in this.ResourceRules)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
