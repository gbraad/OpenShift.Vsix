// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// VolumeMount describes a mounting of a Volume within a container.
    /// </summary>
    public partial class Iok8sapicorev1VolumeMount
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1VolumeMount class.
        /// </summary>
        public Iok8sapicorev1VolumeMount() { }

        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1VolumeMount class.
        /// </summary>
        public Iok8sapicorev1VolumeMount(string mountPath, string name, string mountPropagation = default(string), bool? readOnlyProperty = default(bool?), string subPath = default(string))
        {
            MountPath = mountPath;
            MountPropagation = mountPropagation;
            Name = name;
            ReadOnlyProperty = readOnlyProperty;
            SubPath = subPath;
        }

        /// <summary>
        /// Path within the container at which the volume should be mounted.
        /// Must not contain ':'.
        /// </summary>
        [JsonProperty(PropertyName = "mountPath")]
        public string MountPath { get; set; }

        /// <summary>
        /// mountPropagation determines how mounts are propagated from the
        /// host to container and the other way around. When not set,
        /// MountPropagationHostToContainer is used. This field is alpha in
        /// 1.8 and can be reworked or removed in a future release.
        /// </summary>
        [JsonProperty(PropertyName = "mountPropagation")]
        public string MountPropagation { get; set; }

        /// <summary>
        /// This must match the Name of a Volume.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Mounted read-only if true, read-write otherwise (false or
        /// unspecified). Defaults to false.
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// Path within the volume from which the container's volume should be
        /// mounted. Defaults to "" (volume's root).
        /// </summary>
        [JsonProperty(PropertyName = "subPath")]
        public string SubPath { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (MountPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MountPath");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
