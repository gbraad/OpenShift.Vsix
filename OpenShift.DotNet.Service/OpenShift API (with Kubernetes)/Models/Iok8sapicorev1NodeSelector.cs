// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// A node selector represents the union of the results of one or more
    /// label queries over a set of nodes; that is, it represents the OR of
    /// the selectors represented by the node selector terms.
    /// </summary>
    public partial class Iok8sapicorev1NodeSelector
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1NodeSelector class.
        /// </summary>
        public Iok8sapicorev1NodeSelector() { }

        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1NodeSelector class.
        /// </summary>
        public Iok8sapicorev1NodeSelector(IList<Iok8sapicorev1NodeSelectorTerm> nodeSelectorTerms)
        {
            NodeSelectorTerms = nodeSelectorTerms;
        }

        /// <summary>
        /// Required. A list of node selector terms. The terms are ORed.
        /// </summary>
        [JsonProperty(PropertyName = "nodeSelectorTerms")]
        public IList<Iok8sapicorev1NodeSelectorTerm> NodeSelectorTerms { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (NodeSelectorTerms == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeSelectorTerms");
            }
            if (this.NodeSelectorTerms != null)
            {
                foreach (var element in this.NodeSelectorTerms)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
