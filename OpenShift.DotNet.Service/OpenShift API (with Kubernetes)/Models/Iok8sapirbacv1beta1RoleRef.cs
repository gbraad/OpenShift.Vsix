// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// RoleRef contains information that points to the role being used
    /// </summary>
    public partial class Iok8sapirbacv1beta1RoleRef
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapirbacv1beta1RoleRef class.
        /// </summary>
        public Iok8sapirbacv1beta1RoleRef() { }

        /// <summary>
        /// Initializes a new instance of the Iok8sapirbacv1beta1RoleRef class.
        /// </summary>
        public Iok8sapirbacv1beta1RoleRef(string apiGroup, string kind, string name)
        {
            ApiGroup = apiGroup;
            Kind = kind;
            Name = name;
        }

        /// <summary>
        /// APIGroup is the group for the resource being referenced
        /// </summary>
        [JsonProperty(PropertyName = "apiGroup")]
        public string ApiGroup { get; set; }

        /// <summary>
        /// Kind is the type of resource being referenced
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Name is the name of resource being referenced
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (ApiGroup == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApiGroup");
            }
            if (Kind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kind");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
