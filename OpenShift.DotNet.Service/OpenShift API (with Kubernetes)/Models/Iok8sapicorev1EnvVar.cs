// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// EnvVar represents an environment variable present in a Container.
    /// </summary>
    public partial class Iok8sapicorev1EnvVar
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1EnvVar class.
        /// </summary>
        public Iok8sapicorev1EnvVar() { }

        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1EnvVar class.
        /// </summary>
        public Iok8sapicorev1EnvVar(string name, string value = default(string), Iok8sapicorev1EnvVarSource valueFrom = default(Iok8sapicorev1EnvVarSource))
        {
            Name = name;
            Value = value;
            ValueFrom = valueFrom;
        }

        /// <summary>
        /// Name of the environment variable. Must be a C_IDENTIFIER.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Variable references $(VAR_NAME) are expanded using the previous
        /// defined environment variables in the container and any service
        /// environment variables. If a variable cannot be resolved, the
        /// reference in the input string will be unchanged. The $(VAR_NAME)
        /// syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
        /// references will never be expanded, regardless of whether the
        /// variable exists or not. Defaults to "".
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Source for the environment variable's value. Cannot be used if
        /// value is not empty.
        /// </summary>
        [JsonProperty(PropertyName = "valueFrom")]
        public Iok8sapicorev1EnvVarSource ValueFrom { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (this.ValueFrom != null)
            {
                this.ValueFrom.Validate();
            }
        }
    }
}
