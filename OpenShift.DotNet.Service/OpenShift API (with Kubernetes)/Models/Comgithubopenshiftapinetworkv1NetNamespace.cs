// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// NetNamespace describes a single isolated network. When using the
    /// redhat/openshift-ovs-multitenant plugin, every Namespace will have a
    /// corresponding NetNamespace object with the same name. (When using
    /// redhat/openshift-ovs-subnet, NetNamespaces are not used.)
    /// </summary>
    public partial class Comgithubopenshiftapinetworkv1NetNamespace
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapinetworkv1NetNamespace class.
        /// </summary>
        public Comgithubopenshiftapinetworkv1NetNamespace() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapinetworkv1NetNamespace class.
        /// </summary>
        public Comgithubopenshiftapinetworkv1NetNamespace(long netid, string netname, string apiVersion = default(string), IList<string> egressIPs = default(IList<string>), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta))
        {
            ApiVersion = apiVersion;
            EgressIPs = egressIPs;
            Kind = kind;
            Metadata = metadata;
            Netid = netid;
            Netname = netname;
        }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// EgressIPs is a list of reserved IPs that will be used as the
        /// source for external traffic coming from pods in this namespace.
        /// (If empty, external traffic will be masqueraded to Node IPs.)
        /// </summary>
        [JsonProperty(PropertyName = "egressIPs")]
        public IList<string> EgressIPs { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// NetID is the network identifier of the network namespace assigned
        /// to each overlay network packet. This can be manipulated with the
        /// "oc adm pod-network" commands.
        /// </summary>
        [JsonProperty(PropertyName = "netid")]
        public long Netid { get; set; }

        /// <summary>
        /// NetName is the name of the network namespace. (This is the same as
        /// the object's name, but both fields must be set.)
        /// </summary>
        [JsonProperty(PropertyName = "netname")]
        public string Netname { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Netname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Netname");
            }
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
        }
    }
}
