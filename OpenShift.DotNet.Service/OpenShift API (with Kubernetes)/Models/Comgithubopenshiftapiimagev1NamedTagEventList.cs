// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// NamedTagEventList relates a tag to its image history.
    /// </summary>
    public partial class Comgithubopenshiftapiimagev1NamedTagEventList
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiimagev1NamedTagEventList class.
        /// </summary>
        public Comgithubopenshiftapiimagev1NamedTagEventList() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiimagev1NamedTagEventList class.
        /// </summary>
        public Comgithubopenshiftapiimagev1NamedTagEventList(IList<Comgithubopenshiftapiimagev1TagEvent> items, string tag, IList<Comgithubopenshiftapiimagev1TagEventCondition> conditions = default(IList<Comgithubopenshiftapiimagev1TagEventCondition>))
        {
            Conditions = conditions;
            Items = items;
            Tag = tag;
        }

        /// <summary>
        /// Conditions is an array of conditions that apply to the tag event
        /// list.
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public IList<Comgithubopenshiftapiimagev1TagEventCondition> Conditions { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public IList<Comgithubopenshiftapiimagev1TagEvent> Items { get; set; }

        /// <summary>
        /// Tag is the tag for which the history is recorded
        /// </summary>
        [JsonProperty(PropertyName = "tag")]
        public string Tag { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Items == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Items");
            }
            if (Tag == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Tag");
            }
            if (this.Conditions != null)
            {
                foreach (var element in this.Conditions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Items != null)
            {
                foreach (var element1 in this.Items)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
