// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Build configurations define a build process for new Docker images.
    /// There are three types of builds possible - a Docker build using a
    /// Dockerfile, a Source-to-Image build that uses a specially prepared
    /// base image that accepts source code that it can make runnable, and a
    /// custom build that can run // arbitrary Docker images as a base and
    /// accept the build parameters. Builds run on the cluster and on
    /// completion are pushed to the Docker registry specified in the
    /// "output" section. A build can be triggered via a webhook, when the
    /// base image changes, or when a user manually requests a new build be
    /// // created.
    /// 
    /// Each build created by a build configuration is numbered and refers
    /// back to its parent configuration. Multiple builds can be triggered at
    /// once. Builds that do not have "output" set can be used to test code
    /// or run a verification build.
    /// </summary>
    public partial class Comgithubopenshiftapibuildv1BuildConfig
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapibuildv1BuildConfig class.
        /// </summary>
        public Comgithubopenshiftapibuildv1BuildConfig() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapibuildv1BuildConfig class.
        /// </summary>
        public Comgithubopenshiftapibuildv1BuildConfig(Comgithubopenshiftapibuildv1BuildConfigSpec spec, Comgithubopenshiftapibuildv1BuildConfigStatus status, string apiVersion = default(string), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta))
        {
            ApiVersion = apiVersion;
            Kind = kind;
            Metadata = metadata;
            Spec = spec;
            Status = status;
        }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// metadata for BuildConfig.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// spec holds all the input necessary to produce a new build, and the
        /// conditions when to trigger them.
        /// </summary>
        [JsonProperty(PropertyName = "spec")]
        public Comgithubopenshiftapibuildv1BuildConfigSpec Spec { get; set; }

        /// <summary>
        /// status holds any relevant information about a build config
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public Comgithubopenshiftapibuildv1BuildConfigStatus Status { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Spec == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Spec");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
            if (this.Spec != null)
            {
                this.Spec.Validate();
            }
            if (this.Status != null)
            {
                this.Status.Validate();
            }
        }
    }
}
