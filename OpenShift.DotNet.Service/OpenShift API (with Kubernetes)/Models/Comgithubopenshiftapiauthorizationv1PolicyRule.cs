// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// PolicyRule holds information that describes a policy rule, but does
    /// not contain information about who the rule applies to or which
    /// namespace the rule applies to.
    /// </summary>
    public partial class Comgithubopenshiftapiauthorizationv1PolicyRule
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiauthorizationv1PolicyRule class.
        /// </summary>
        public Comgithubopenshiftapiauthorizationv1PolicyRule() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiauthorizationv1PolicyRule class.
        /// </summary>
        public Comgithubopenshiftapiauthorizationv1PolicyRule(IList<string> apiGroups, IList<string> resources, IList<string> verbs, Iok8sapimachinerypkgruntimeRawExtension attributeRestrictions = default(Iok8sapimachinerypkgruntimeRawExtension), IList<string> nonResourceURLs = default(IList<string>), IList<string> resourceNames = default(IList<string>))
        {
            ApiGroups = apiGroups;
            AttributeRestrictions = attributeRestrictions;
            NonResourceURLs = nonResourceURLs;
            ResourceNames = resourceNames;
            Resources = resources;
            Verbs = verbs;
        }

        /// <summary>
        /// APIGroups is the name of the APIGroup that contains the resources.
        /// If this field is empty, then both kubernetes and origin API
        /// groups are assumed. That means that if an action is requested
        /// against one of the enumerated resources in either the kubernetes
        /// or the origin API group, the request will be allowed
        /// </summary>
        [JsonProperty(PropertyName = "apiGroups")]
        public IList<string> ApiGroups { get; set; }

        /// <summary>
        /// AttributeRestrictions will vary depending on what the
        /// Authorizer/AuthorizationAttributeBuilder pair supports. If the
        /// Authorizer does not recognize how to handle the
        /// AttributeRestrictions, the Authorizer should report an error.
        /// </summary>
        [JsonProperty(PropertyName = "attributeRestrictions")]
        public Iok8sapimachinerypkgruntimeRawExtension AttributeRestrictions { get; set; }

        /// <summary>
        /// NonResourceURLsSlice is a set of partial urls that a user should
        /// have access to.  *s are allowed, but only as the full, final step
        /// in the path This name is intentionally different than the
        /// internal type so that the DefaultConvert works nicely and because
        /// the ordering may be different.
        /// </summary>
        [JsonProperty(PropertyName = "nonResourceURLs")]
        public IList<string> NonResourceURLs { get; set; }

        /// <summary>
        /// ResourceNames is an optional white list of names that the rule
        /// applies to.  An empty set means that everything is allowed.
        /// </summary>
        [JsonProperty(PropertyName = "resourceNames")]
        public IList<string> ResourceNames { get; set; }

        /// <summary>
        /// Resources is a list of resources this rule applies to.
        /// ResourceAll represents all resources.
        /// </summary>
        [JsonProperty(PropertyName = "resources")]
        public IList<string> Resources { get; set; }

        /// <summary>
        /// Verbs is a list of Verbs that apply to ALL the ResourceKinds and
        /// AttributeRestrictions contained in this rule.  VerbAll represents
        /// all kinds.
        /// </summary>
        [JsonProperty(PropertyName = "verbs")]
        public IList<string> Verbs { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (ApiGroups == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApiGroups");
            }
            if (Resources == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Resources");
            }
            if (Verbs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Verbs");
            }
            if (this.AttributeRestrictions != null)
            {
                this.AttributeRestrictions.Validate();
            }
        }
    }
}
