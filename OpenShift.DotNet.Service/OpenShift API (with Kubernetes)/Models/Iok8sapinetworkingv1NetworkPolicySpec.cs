// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// NetworkPolicySpec provides the specification of a NetworkPolicy
    /// </summary>
    public partial class Iok8sapinetworkingv1NetworkPolicySpec
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapinetworkingv1NetworkPolicySpec class.
        /// </summary>
        public Iok8sapinetworkingv1NetworkPolicySpec() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapinetworkingv1NetworkPolicySpec class.
        /// </summary>
        public Iok8sapinetworkingv1NetworkPolicySpec(Iok8sapimachinerypkgapismetav1LabelSelector podSelector, IList<Iok8sapinetworkingv1NetworkPolicyEgressRule> egress = default(IList<Iok8sapinetworkingv1NetworkPolicyEgressRule>), IList<Iok8sapinetworkingv1NetworkPolicyIngressRule> ingress = default(IList<Iok8sapinetworkingv1NetworkPolicyIngressRule>), IList<string> policyTypes = default(IList<string>))
        {
            Egress = egress;
            Ingress = ingress;
            PodSelector = podSelector;
            PolicyTypes = policyTypes;
        }

        /// <summary>
        /// List of egress rules to be applied to the selected pods. Outgoing
        /// traffic is allowed if there are no NetworkPolicies selecting the
        /// pod (and cluster policy otherwise allows the traffic), OR if the
        /// traffic matches at least one egress rule across all of the
        /// NetworkPolicy objects whose podSelector matches the pod. If this
        /// field is empty then this NetworkPolicy limits all outgoing
        /// traffic (and serves solely to ensure that the pods it selects are
        /// isolated by default). This field is beta-level in 1.8
        /// </summary>
        [JsonProperty(PropertyName = "egress")]
        public IList<Iok8sapinetworkingv1NetworkPolicyEgressRule> Egress { get; set; }

        /// <summary>
        /// List of ingress rules to be applied to the selected pods. Traffic
        /// is allowed to a pod if there are no NetworkPolicies selecting the
        /// pod (and cluster policy otherwise allows the traffic), OR if the
        /// traffic source is the pod's local node, OR if the traffic matches
        /// at least one ingress rule across all of the NetworkPolicy objects
        /// whose podSelector matches the pod. If this field is empty then
        /// this NetworkPolicy does not allow any traffic (and serves solely
        /// to ensure that the pods it selects are isolated by default)
        /// </summary>
        [JsonProperty(PropertyName = "ingress")]
        public IList<Iok8sapinetworkingv1NetworkPolicyIngressRule> Ingress { get; set; }

        /// <summary>
        /// Selects the pods to which this NetworkPolicy object applies. The
        /// array of ingress rules is applied to any pods selected by this
        /// field. Multiple network policies can select the same set of pods.
        /// In this case, the ingress rules for each are combined additively.
        /// This field is NOT optional and follows standard label selector
        /// semantics. An empty podSelector matches all pods in this
        /// namespace.
        /// </summary>
        [JsonProperty(PropertyName = "podSelector")]
        public Iok8sapimachinerypkgapismetav1LabelSelector PodSelector { get; set; }

        /// <summary>
        /// List of rule types that the NetworkPolicy relates to. Valid
        /// options are Ingress, Egress, or Ingress,Egress. If this field is
        /// not specified, it will default based on the existence of Ingress
        /// or Egress rules; policies that contain an Egress section are
        /// assumed to affect Egress, and all policies (whether or not they
        /// contain an Ingress section) are assumed to affect Ingress. If you
        /// want to write an egress-only policy, you must explicitly specify
        /// policyTypes [ "Egress" ]. Likewise, if you want to write a policy
        /// that specifies that no egress is allowed, you must specify a
        /// policyTypes value that include "Egress" (since such a policy
        /// would not include an Egress section and would otherwise default
        /// to just [ "Ingress" ]). This field is beta-level in 1.8
        /// </summary>
        [JsonProperty(PropertyName = "policyTypes")]
        public IList<string> PolicyTypes { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (PodSelector == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PodSelector");
            }
        }
    }
}
