// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ServiceAccountReference specifies a service account and namespace by
    /// their names.
    /// </summary>
    public partial class Comgithubopenshiftapiauthorizationv1ServiceAccountReference
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiauthorizationv1ServiceAccountReference class.
        /// </summary>
        public Comgithubopenshiftapiauthorizationv1ServiceAccountReference() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiauthorizationv1ServiceAccountReference class.
        /// </summary>
        public Comgithubopenshiftapiauthorizationv1ServiceAccountReference(string name, string namespaceProperty)
        {
            Name = name;
            NamespaceProperty = namespaceProperty;
        }

        /// <summary>
        /// Name is the name of the service account.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Namespace is the namespace of the service account.  Service
        /// accounts from inside the whitelisted namespaces are allowed to be
        /// bound to roles.  If Namespace is empty, then the namespace of the
        /// RoleBindingRestriction in which the ServiceAccountReference is
        /// embedded is used.
        /// </summary>
        [JsonProperty(PropertyName = "namespace")]
        public string NamespaceProperty { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (NamespaceProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NamespaceProperty");
            }
        }
    }
}
