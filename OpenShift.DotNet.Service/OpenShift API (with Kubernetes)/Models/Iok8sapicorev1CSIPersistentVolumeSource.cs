// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Represents storage that is managed by an external CSI volume driver
    /// </summary>
    public partial class Iok8sapicorev1CSIPersistentVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapicorev1CSIPersistentVolumeSource class.
        /// </summary>
        public Iok8sapicorev1CSIPersistentVolumeSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapicorev1CSIPersistentVolumeSource class.
        /// </summary>
        public Iok8sapicorev1CSIPersistentVolumeSource(string driver, string volumeHandle, bool? readOnlyProperty = default(bool?))
        {
            Driver = driver;
            ReadOnlyProperty = readOnlyProperty;
            VolumeHandle = volumeHandle;
        }

        /// <summary>
        /// Driver is the name of the driver to use for this volume. Required.
        /// </summary>
        [JsonProperty(PropertyName = "driver")]
        public string Driver { get; set; }

        /// <summary>
        /// Optional: The value to pass to ControllerPublishVolumeRequest.
        /// Defaults to false (read/write).
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// VolumeHandle is the unique volume name returned by the CSI volume
        /// plugin’s CreateVolume to refer to the volume on all subsequent
        /// calls. Required.
        /// </summary>
        [JsonProperty(PropertyName = "volumeHandle")]
        public string VolumeHandle { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Driver == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Driver");
            }
            if (VolumeHandle == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VolumeHandle");
            }
        }
    }
}
