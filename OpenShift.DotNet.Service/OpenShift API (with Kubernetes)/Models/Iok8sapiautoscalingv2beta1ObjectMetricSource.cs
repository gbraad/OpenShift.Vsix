// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ObjectMetricSource indicates how to scale on a metric describing a
    /// kubernetes object (for example, hits-per-second on an Ingress object).
    /// </summary>
    public partial class Iok8sapiautoscalingv2beta1ObjectMetricSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiautoscalingv2beta1ObjectMetricSource class.
        /// </summary>
        public Iok8sapiautoscalingv2beta1ObjectMetricSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiautoscalingv2beta1ObjectMetricSource class.
        /// </summary>
        public Iok8sapiautoscalingv2beta1ObjectMetricSource(string metricName, Iok8sapiautoscalingv2beta1CrossVersionObjectReference target, string targetValue)
        {
            MetricName = metricName;
            Target = target;
            TargetValue = targetValue;
        }

        /// <summary>
        /// metricName is the name of the metric in question.
        /// </summary>
        [JsonProperty(PropertyName = "metricName")]
        public string MetricName { get; set; }

        /// <summary>
        /// target is the described Kubernetes object.
        /// </summary>
        [JsonProperty(PropertyName = "target")]
        public Iok8sapiautoscalingv2beta1CrossVersionObjectReference Target { get; set; }

        /// <summary>
        /// targetValue is the target value of the metric (as a quantity).
        /// </summary>
        [JsonProperty(PropertyName = "targetValue")]
        public string TargetValue { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (MetricName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MetricName");
            }
            if (Target == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Target");
            }
            if (TargetValue == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetValue");
            }
            if (this.Target != null)
            {
                this.Target.Validate();
            }
        }
    }
}
