// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// CrossVersionObjectReference contains enough information to let you
    /// identify the referred resource.
    /// </summary>
    public partial class Iok8sapiautoscalingv1CrossVersionObjectReference
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiautoscalingv1CrossVersionObjectReference class.
        /// </summary>
        public Iok8sapiautoscalingv1CrossVersionObjectReference() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapiautoscalingv1CrossVersionObjectReference class.
        /// </summary>
        public Iok8sapiautoscalingv1CrossVersionObjectReference(string kind, string name, string apiVersion = default(string))
        {
            ApiVersion = apiVersion;
            Kind = kind;
            Name = name;
        }

        /// <summary>
        /// API version of the referent
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Kind of the referent; More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Name of the referent; More info:
        /// http://kubernetes.io/docs/user-guide/identifiers#names
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Kind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kind");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
