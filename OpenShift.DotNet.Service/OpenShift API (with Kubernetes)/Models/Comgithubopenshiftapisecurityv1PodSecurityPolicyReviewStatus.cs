// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// PodSecurityPolicyReviewStatus represents the status of
    /// PodSecurityPolicyReview.
    /// </summary>
    public partial class Comgithubopenshiftapisecurityv1PodSecurityPolicyReviewStatus
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapisecurityv1PodSecurityPolicyReviewStatus
        /// class.
        /// </summary>
        public Comgithubopenshiftapisecurityv1PodSecurityPolicyReviewStatus() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapisecurityv1PodSecurityPolicyReviewStatus
        /// class.
        /// </summary>
        public Comgithubopenshiftapisecurityv1PodSecurityPolicyReviewStatus(IList<Comgithubopenshiftapisecurityv1ServiceAccountPodSecurityPolicyReviewStatus> allowedServiceAccounts)
        {
            AllowedServiceAccounts = allowedServiceAccounts;
        }

        /// <summary>
        /// allowedServiceAccounts returns the list of service accounts in
        /// *this* namespace that have the power to create the
        /// PodTemplateSpec.
        /// </summary>
        [JsonProperty(PropertyName = "allowedServiceAccounts")]
        public IList<Comgithubopenshiftapisecurityv1ServiceAccountPodSecurityPolicyReviewStatus> AllowedServiceAccounts { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (AllowedServiceAccounts == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AllowedServiceAccounts");
            }
            if (this.AllowedServiceAccounts != null)
            {
                foreach (var element in this.AllowedServiceAccounts)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
