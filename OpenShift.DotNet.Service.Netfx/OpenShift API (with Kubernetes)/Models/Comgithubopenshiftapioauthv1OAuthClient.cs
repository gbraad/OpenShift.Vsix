// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// OAuthClient describes an OAuth client
    /// </summary>
    public partial class Comgithubopenshiftapioauthv1OAuthClient
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapioauthv1OAuthClient class.
        /// </summary>
        public Comgithubopenshiftapioauthv1OAuthClient() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapioauthv1OAuthClient class.
        /// </summary>
        public Comgithubopenshiftapioauthv1OAuthClient(int? accessTokenInactivityTimeoutSeconds = default(int?), int? accessTokenMaxAgeSeconds = default(int?), IList<string> additionalSecrets = default(IList<string>), string apiVersion = default(string), string grantMethod = default(string), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta), IList<string> redirectURIs = default(IList<string>), bool? respondWithChallenges = default(bool?), IList<Comgithubopenshiftapioauthv1ScopeRestriction> scopeRestrictions = default(IList<Comgithubopenshiftapioauthv1ScopeRestriction>), string secret = default(string))
        {
            AccessTokenInactivityTimeoutSeconds = accessTokenInactivityTimeoutSeconds;
            AccessTokenMaxAgeSeconds = accessTokenMaxAgeSeconds;
            AdditionalSecrets = additionalSecrets;
            ApiVersion = apiVersion;
            GrantMethod = grantMethod;
            Kind = kind;
            Metadata = metadata;
            RedirectURIs = redirectURIs;
            RespondWithChallenges = respondWithChallenges;
            ScopeRestrictions = scopeRestrictions;
            Secret = secret;
        }

        /// <summary>
        /// AccessTokenInactivityTimeoutSeconds overrides the default token
        /// inactivity timeout for tokens granted to this client. The value
        /// represents the maximum amount of time that can occur between
        /// consecutive uses of the token. Tokens become invalid if they are
        /// not used within this temporal window. The user will need to
        /// acquire a new token to regain access once a token times out. This
        /// value needs to be set only if the default set in configuration is
        /// not appropriate for this client. Valid values are: - 0: Tokens
        /// for this client never time out - X: Tokens time out if there is
        /// no activity for X seconds The current minimum allowed value for X
        /// is 300 (5 minutes)
        /// </summary>
        [JsonProperty(PropertyName = "accessTokenInactivityTimeoutSeconds")]
        public int? AccessTokenInactivityTimeoutSeconds { get; set; }

        /// <summary>
        /// AccessTokenMaxAgeSeconds overrides the default access token max
        /// age for tokens granted to this client. 0 means no expiration.
        /// </summary>
        [JsonProperty(PropertyName = "accessTokenMaxAgeSeconds")]
        public int? AccessTokenMaxAgeSeconds { get; set; }

        /// <summary>
        /// AdditionalSecrets holds other secrets that may be used to identify
        /// the client.  This is useful for rotation and for service account
        /// token validation
        /// </summary>
        [JsonProperty(PropertyName = "additionalSecrets")]
        public IList<string> AdditionalSecrets { get; set; }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// GrantMethod determines how to handle grants for this client. If no
        /// method is provided, the cluster default grant handling method
        /// will be used. Valid grant handling methods are:
        /// - auto:   always approves grant requests, useful for trusted
        /// clients
        /// - prompt: prompts the end user for approval of grant requests,
        /// useful for third-party clients
        /// - deny:   always denies grant requests, useful for black-listed
        /// clients
        /// </summary>
        [JsonProperty(PropertyName = "grantMethod")]
        public string GrantMethod { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// RedirectURIs is the valid redirection URIs associated with a client
        /// </summary>
        [JsonProperty(PropertyName = "redirectURIs")]
        public IList<string> RedirectURIs { get; set; }

        /// <summary>
        /// RespondWithChallenges indicates whether the client wants
        /// authentication needed responses made in the form of challenges
        /// instead of redirects
        /// </summary>
        [JsonProperty(PropertyName = "respondWithChallenges")]
        public bool? RespondWithChallenges { get; set; }

        /// <summary>
        /// ScopeRestrictions describes which scopes this client can request.
        /// Each requested scope is checked against each restriction.  If
        /// any restriction matches, then the scope is allowed. If no
        /// restriction matches, then the scope is denied.
        /// </summary>
        [JsonProperty(PropertyName = "scopeRestrictions")]
        public IList<Comgithubopenshiftapioauthv1ScopeRestriction> ScopeRestrictions { get; set; }

        /// <summary>
        /// Secret is the unique secret associated with a client
        /// </summary>
        [JsonProperty(PropertyName = "secret")]
        public string Secret { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
            if (this.ScopeRestrictions != null)
            {
                foreach (var element in this.ScopeRestrictions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
