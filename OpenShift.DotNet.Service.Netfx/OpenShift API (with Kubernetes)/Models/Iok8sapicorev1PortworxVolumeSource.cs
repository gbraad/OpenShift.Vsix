// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// PortworxVolumeSource represents a Portworx volume resource.
    /// </summary>
    public partial class Iok8sapicorev1PortworxVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapicorev1PortworxVolumeSource class.
        /// </summary>
        public Iok8sapicorev1PortworxVolumeSource() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapicorev1PortworxVolumeSource class.
        /// </summary>
        public Iok8sapicorev1PortworxVolumeSource(string volumeID, string fsType = default(string), bool? readOnlyProperty = default(bool?))
        {
            FsType = fsType;
            ReadOnlyProperty = readOnlyProperty;
            VolumeID = volumeID;
        }

        /// <summary>
        /// FSType represents the filesystem type to mount Must be a
        /// filesystem type supported by the host operating system. Ex.
        /// "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        /// </summary>
        [JsonProperty(PropertyName = "fsType")]
        public string FsType { get; set; }

        /// <summary>
        /// Defaults to false (read/write). ReadOnly here will force the
        /// ReadOnly setting in VolumeMounts.
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// VolumeID uniquely identifies a Portworx volume
        /// </summary>
        [JsonProperty(PropertyName = "volumeID")]
        public string VolumeID { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (VolumeID == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VolumeID");
            }
        }
    }
}
