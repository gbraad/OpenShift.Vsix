// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Deployment Configs define the template for a pod and manages deploying
    /// new images or configuration changes. A single deployment
    /// configuration is usually analogous to a single micro-service. Can
    /// support many different deployment patterns, including full restart,
    /// customizable rolling updates, and  fully custom behaviors, as well as
    /// pre- and post- deployment hooks. Each individual deployment is
    /// represented as a replication controller.
    /// 
    /// A deployment is "triggered" when its configuration is changed or a tag
    /// in an Image Stream is changed. Triggers can be disabled to allow
    /// manual control over a deployment. The "strategy" determines how the
    /// deployment is carried out and may be changed at any time. The
    /// `latestVersion` field is updated when a new deployment is triggered
    /// by any means.
    /// </summary>
    public partial class Comgithubopenshiftapiappsv1DeploymentConfig
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiappsv1DeploymentConfig class.
        /// </summary>
        public Comgithubopenshiftapiappsv1DeploymentConfig() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiappsv1DeploymentConfig class.
        /// </summary>
        public Comgithubopenshiftapiappsv1DeploymentConfig(Comgithubopenshiftapiappsv1DeploymentConfigSpec spec, string apiVersion = default(string), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta), Comgithubopenshiftapiappsv1DeploymentConfigStatus status = default(Comgithubopenshiftapiappsv1DeploymentConfigStatus))
        {
            ApiVersion = apiVersion;
            Kind = kind;
            Metadata = metadata;
            Spec = spec;
            Status = status;
        }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Spec represents a desired deployment state and how to deploy to it.
        /// </summary>
        [JsonProperty(PropertyName = "spec")]
        public Comgithubopenshiftapiappsv1DeploymentConfigSpec Spec { get; set; }

        /// <summary>
        /// Status represents the current deployment state.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public Comgithubopenshiftapiappsv1DeploymentConfigStatus Status { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Spec == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Spec");
            }
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
            if (this.Spec != null)
            {
                this.Spec.Validate();
            }
            if (this.Status != null)
            {
                this.Status.Validate();
            }
        }
    }
}
