// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// DeploymentCause captures information about a particular cause of a
    /// deployment.
    /// </summary>
    public partial class Comgithubopenshiftapiappsv1DeploymentCause
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiappsv1DeploymentCause class.
        /// </summary>
        public Comgithubopenshiftapiappsv1DeploymentCause() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiappsv1DeploymentCause class.
        /// </summary>
        public Comgithubopenshiftapiappsv1DeploymentCause(string type, Comgithubopenshiftapiappsv1DeploymentCauseImageTrigger imageTrigger = default(Comgithubopenshiftapiappsv1DeploymentCauseImageTrigger))
        {
            ImageTrigger = imageTrigger;
            Type = type;
        }

        /// <summary>
        /// ImageTrigger contains the image trigger details, if this trigger
        /// was fired based on an image change
        /// </summary>
        [JsonProperty(PropertyName = "imageTrigger")]
        public Comgithubopenshiftapiappsv1DeploymentCauseImageTrigger ImageTrigger { get; set; }

        /// <summary>
        /// Type of the trigger that resulted in the creation of a new
        /// deployment
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (this.ImageTrigger != null)
            {
                this.ImageTrigger.Validate();
            }
        }
    }
}
