// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Handler defines a specific action that should be taken
    /// </summary>
    public partial class Iok8sapicorev1Handler
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1Handler class.
        /// </summary>
        public Iok8sapicorev1Handler() { }

        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1Handler class.
        /// </summary>
        public Iok8sapicorev1Handler(Iok8sapicorev1ExecAction exec = default(Iok8sapicorev1ExecAction), Iok8sapicorev1HTTPGetAction httpGet = default(Iok8sapicorev1HTTPGetAction), Iok8sapicorev1TCPSocketAction tcpSocket = default(Iok8sapicorev1TCPSocketAction))
        {
            Exec = exec;
            HttpGet = httpGet;
            TcpSocket = tcpSocket;
        }

        /// <summary>
        /// One and only one of the following should be specified. Exec
        /// specifies the action to take.
        /// </summary>
        [JsonProperty(PropertyName = "exec")]
        public Iok8sapicorev1ExecAction Exec { get; set; }

        /// <summary>
        /// HTTPGet specifies the http request to perform.
        /// </summary>
        [JsonProperty(PropertyName = "httpGet")]
        public Iok8sapicorev1HTTPGetAction HttpGet { get; set; }

        /// <summary>
        /// TCPSocket specifies an action involving a TCP port. TCP hooks not
        /// yet supported
        /// </summary>
        [JsonProperty(PropertyName = "tcpSocket")]
        public Iok8sapicorev1TCPSocketAction TcpSocket { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.HttpGet != null)
            {
                this.HttpGet.Validate();
            }
            if (this.TcpSocket != null)
            {
                this.TcpSocket.Validate();
            }
        }
    }
}
