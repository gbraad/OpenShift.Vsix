// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ClusterResourceQuotaSpec defines the desired quota restrictions
    /// </summary>
    public partial class Comgithubopenshiftapiquotav1ClusterResourceQuotaSpec
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiquotav1ClusterResourceQuotaSpec class.
        /// </summary>
        public Comgithubopenshiftapiquotav1ClusterResourceQuotaSpec() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiquotav1ClusterResourceQuotaSpec class.
        /// </summary>
        public Comgithubopenshiftapiquotav1ClusterResourceQuotaSpec(Iok8sapicorev1ResourceQuotaSpec quota, Comgithubopenshiftapiquotav1ClusterResourceQuotaSelector selector)
        {
            Quota = quota;
            Selector = selector;
        }

        /// <summary>
        /// Quota defines the desired quota
        /// </summary>
        [JsonProperty(PropertyName = "quota")]
        public Iok8sapicorev1ResourceQuotaSpec Quota { get; set; }

        /// <summary>
        /// Selector is the selector used to match projects. It should only
        /// select active projects on the scale of dozens (though it can
        /// select many more less active projects).  These projects will
        /// contend on object creation through this resource.
        /// </summary>
        [JsonProperty(PropertyName = "selector")]
        public Comgithubopenshiftapiquotav1ClusterResourceQuotaSelector Selector { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Quota == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Quota");
            }
            if (Selector == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Selector");
            }
            if (this.Selector != null)
            {
                this.Selector.Validate();
            }
        }
    }
}
