// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Initializers tracks the progress of initialization.
    /// </summary>
    public partial class Iok8sapimachinerypkgapismetav1Initializers
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapimachinerypkgapismetav1Initializers class.
        /// </summary>
        public Iok8sapimachinerypkgapismetav1Initializers() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8sapimachinerypkgapismetav1Initializers class.
        /// </summary>
        public Iok8sapimachinerypkgapismetav1Initializers(IList<Iok8sapimachinerypkgapismetav1Initializer> pending, Iok8sapimachinerypkgapismetav1Status result = default(Iok8sapimachinerypkgapismetav1Status))
        {
            Pending = pending;
            Result = result;
        }

        /// <summary>
        /// Pending is a list of initializers that must execute in order
        /// before this object is visible. When the last pending initializer
        /// is removed, and no failing result is set, the initializers struct
        /// will be set to nil and the object is considered as initialized
        /// and visible to all clients.
        /// </summary>
        [JsonProperty(PropertyName = "pending")]
        public IList<Iok8sapimachinerypkgapismetav1Initializer> Pending { get; set; }

        /// <summary>
        /// If result is set with the Failure field, the object will be
        /// persisted to storage and then deleted, ensuring that other
        /// clients can observe the deletion.
        /// </summary>
        [JsonProperty(PropertyName = "result")]
        public Iok8sapimachinerypkgapismetav1Status Result { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Pending == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Pending");
            }
            if (this.Pending != null)
            {
                foreach (var element in this.Pending)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
