// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// The node this Taint is attached to has the "effect" on any pod that
    /// does not tolerate the Taint.
    /// </summary>
    public partial class Iok8sapicorev1Taint
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1Taint class.
        /// </summary>
        public Iok8sapicorev1Taint() { }

        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1Taint class.
        /// </summary>
        public Iok8sapicorev1Taint(string effect, string key, DateTime? timeAdded = default(DateTime?), string value = default(string))
        {
            Effect = effect;
            Key = key;
            TimeAdded = timeAdded;
            Value = value;
        }

        /// <summary>
        /// Required. The effect of the taint on pods that do not tolerate the
        /// taint. Valid effects are NoSchedule, PreferNoSchedule and
        /// NoExecute.
        /// </summary>
        [JsonProperty(PropertyName = "effect")]
        public string Effect { get; set; }

        /// <summary>
        /// Required. The taint key to be applied to a node.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// TimeAdded represents the time at which the taint was added. It is
        /// only written for NoExecute taints.
        /// </summary>
        [JsonProperty(PropertyName = "timeAdded")]
        public DateTime? TimeAdded { get; set; }

        /// <summary>
        /// Required. The taint value corresponding to the taint key.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Effect == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Effect");
            }
            if (Key == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Key");
            }
        }
    }
}
