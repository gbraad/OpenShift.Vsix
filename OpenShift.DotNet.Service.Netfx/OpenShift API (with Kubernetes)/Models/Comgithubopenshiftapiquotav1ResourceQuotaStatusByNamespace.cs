// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// ResourceQuotaStatusByNamespace gives status for a particular project
    /// </summary>
    public partial class Comgithubopenshiftapiquotav1ResourceQuotaStatusByNamespace
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiquotav1ResourceQuotaStatusByNamespace class.
        /// </summary>
        public Comgithubopenshiftapiquotav1ResourceQuotaStatusByNamespace() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiquotav1ResourceQuotaStatusByNamespace class.
        /// </summary>
        public Comgithubopenshiftapiquotav1ResourceQuotaStatusByNamespace(string namespaceProperty, Iok8sapicorev1ResourceQuotaStatus status)
        {
            NamespaceProperty = namespaceProperty;
            Status = status;
        }

        /// <summary>
        /// Namespace the project this status applies to
        /// </summary>
        [JsonProperty(PropertyName = "namespace")]
        public string NamespaceProperty { get; set; }

        /// <summary>
        /// Status indicates how many resources have been consumed by this
        /// project
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public Iok8sapicorev1ResourceQuotaStatus Status { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (NamespaceProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NamespaceProperty");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
        }
    }
}
