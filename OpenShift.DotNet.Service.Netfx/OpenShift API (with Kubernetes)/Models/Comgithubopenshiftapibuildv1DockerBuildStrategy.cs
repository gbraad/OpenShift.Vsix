// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// DockerBuildStrategy defines input parameters specific to Docker build.
    /// </summary>
    public partial class Comgithubopenshiftapibuildv1DockerBuildStrategy
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapibuildv1DockerBuildStrategy class.
        /// </summary>
        public Comgithubopenshiftapibuildv1DockerBuildStrategy() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapibuildv1DockerBuildStrategy class.
        /// </summary>
        public Comgithubopenshiftapibuildv1DockerBuildStrategy(IList<Iok8sapicorev1EnvVar> buildArgs = default(IList<Iok8sapicorev1EnvVar>), string dockerfilePath = default(string), IList<Iok8sapicorev1EnvVar> env = default(IList<Iok8sapicorev1EnvVar>), bool? forcePull = default(bool?), Iok8sapicorev1ObjectReference fromProperty = default(Iok8sapicorev1ObjectReference), string imageOptimizationPolicy = default(string), bool? noCache = default(bool?), Iok8sapicorev1LocalObjectReference pullSecret = default(Iok8sapicorev1LocalObjectReference))
        {
            BuildArgs = buildArgs;
            DockerfilePath = dockerfilePath;
            Env = env;
            ForcePull = forcePull;
            FromProperty = fromProperty;
            ImageOptimizationPolicy = imageOptimizationPolicy;
            NoCache = noCache;
            PullSecret = pullSecret;
        }

        /// <summary>
        /// buildArgs contains build arguments that will be resolved in the
        /// Dockerfile.  See
        /// https://docs.docker.com/engine/reference/builder/#/arg for more
        /// details.
        /// </summary>
        [JsonProperty(PropertyName = "buildArgs")]
        public IList<Iok8sapicorev1EnvVar> BuildArgs { get; set; }

        /// <summary>
        /// dockerfilePath is the path of the Dockerfile that will be used to
        /// build the Docker image, relative to the root of the context
        /// (contextDir).
        /// </summary>
        [JsonProperty(PropertyName = "dockerfilePath")]
        public string DockerfilePath { get; set; }

        /// <summary>
        /// env contains additional environment variables you want to pass
        /// into a builder container.
        /// </summary>
        [JsonProperty(PropertyName = "env")]
        public IList<Iok8sapicorev1EnvVar> Env { get; set; }

        /// <summary>
        /// forcePull describes if the builder should pull the images from
        /// registry prior to building.
        /// </summary>
        [JsonProperty(PropertyName = "forcePull")]
        public bool? ForcePull { get; set; }

        /// <summary>
        /// from is reference to an DockerImage, ImageStreamTag, or
        /// ImageStreamImage from which the docker image should be pulled the
        /// resulting image will be used in the FROM line of the Dockerfile
        /// for this build.
        /// </summary>
        [JsonProperty(PropertyName = "from")]
        public Iok8sapicorev1ObjectReference FromProperty { get; set; }

        /// <summary>
        /// imageOptimizationPolicy describes what optimizations the system
        /// can use when building images to reduce the final size or time
        /// spent building the image. The default policy is 'None' which
        /// means the final build image will be equivalent to an image
        /// created by the Docker build API. The experimental policy
        /// 'SkipLayers' will avoid commiting new layers in between each
        /// image step, and will fail if the Dockerfile cannot provide
        /// compatibility with the 'None' policy. An additional experimental
        /// policy 'SkipLayersAndWarn' is the same as 'SkipLayers' but simply
        /// warns if compatibility cannot be preserved.
        /// </summary>
        [JsonProperty(PropertyName = "imageOptimizationPolicy")]
        public string ImageOptimizationPolicy { get; set; }

        /// <summary>
        /// noCache if set to true indicates that the docker build must be
        /// executed with the --no-cache=true flag
        /// </summary>
        [JsonProperty(PropertyName = "noCache")]
        public bool? NoCache { get; set; }

        /// <summary>
        /// pullSecret is the name of a Secret that would be used for setting
        /// up the authentication for pulling the Docker images from the
        /// private Docker registries
        /// </summary>
        [JsonProperty(PropertyName = "pullSecret")]
        public Iok8sapicorev1LocalObjectReference PullSecret { get; set; }

    }
}
