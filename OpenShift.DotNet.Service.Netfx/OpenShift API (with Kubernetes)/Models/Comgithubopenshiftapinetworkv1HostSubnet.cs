// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// HostSubnet describes the container subnet network on a node. The
    /// HostSubnet object must have the same name as the Node object it
    /// corresponds to.
    /// </summary>
    public partial class Comgithubopenshiftapinetworkv1HostSubnet
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapinetworkv1HostSubnet class.
        /// </summary>
        public Comgithubopenshiftapinetworkv1HostSubnet() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapinetworkv1HostSubnet class.
        /// </summary>
        public Comgithubopenshiftapinetworkv1HostSubnet(string host, string hostIP, string subnet, string apiVersion = default(string), IList<string> egressIPs = default(IList<string>), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta))
        {
            ApiVersion = apiVersion;
            EgressIPs = egressIPs;
            Host = host;
            HostIP = hostIP;
            Kind = kind;
            Metadata = metadata;
            Subnet = subnet;
        }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// EgressIPs is the list of automatic egress IP addresses currently
        /// hosted by this node
        /// </summary>
        [JsonProperty(PropertyName = "egressIPs")]
        public IList<string> EgressIPs { get; set; }

        /// <summary>
        /// Host is the name of the node. (This is the same as the object's
        /// name, but both fields must be set.)
        /// </summary>
        [JsonProperty(PropertyName = "host")]
        public string Host { get; set; }

        /// <summary>
        /// HostIP is the IP address to be used as a VTEP by other nodes in
        /// the overlay network
        /// </summary>
        [JsonProperty(PropertyName = "hostIP")]
        public string HostIP { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Subnet is the CIDR range of the overlay network assigned to the
        /// node for its pods
        /// </summary>
        [JsonProperty(PropertyName = "subnet")]
        public string Subnet { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Host == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Host");
            }
            if (HostIP == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HostIP");
            }
            if (Subnet == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Subnet");
            }
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
        }
    }
}
