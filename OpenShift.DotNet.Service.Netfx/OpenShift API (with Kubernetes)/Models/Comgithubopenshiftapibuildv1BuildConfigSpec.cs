// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// BuildConfigSpec describes when and how builds are created
    /// </summary>
    public partial class Comgithubopenshiftapibuildv1BuildConfigSpec
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapibuildv1BuildConfigSpec class.
        /// </summary>
        public Comgithubopenshiftapibuildv1BuildConfigSpec() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapibuildv1BuildConfigSpec class.
        /// </summary>
        public Comgithubopenshiftapibuildv1BuildConfigSpec(IDictionary<string, string> nodeSelector, Comgithubopenshiftapibuildv1BuildStrategy strategy, IList<Comgithubopenshiftapibuildv1BuildTriggerPolicy> triggers, long? completionDeadlineSeconds = default(long?), int? failedBuildsHistoryLimit = default(int?), Comgithubopenshiftapibuildv1BuildOutput output = default(Comgithubopenshiftapibuildv1BuildOutput), Comgithubopenshiftapibuildv1BuildPostCommitSpec postCommit = default(Comgithubopenshiftapibuildv1BuildPostCommitSpec), Iok8sapicorev1ResourceRequirements resources = default(Iok8sapicorev1ResourceRequirements), Comgithubopenshiftapibuildv1SourceRevision revision = default(Comgithubopenshiftapibuildv1SourceRevision), string runPolicy = default(string), string serviceAccount = default(string), Comgithubopenshiftapibuildv1BuildSource source = default(Comgithubopenshiftapibuildv1BuildSource), int? successfulBuildsHistoryLimit = default(int?))
        {
            CompletionDeadlineSeconds = completionDeadlineSeconds;
            FailedBuildsHistoryLimit = failedBuildsHistoryLimit;
            NodeSelector = nodeSelector;
            Output = output;
            PostCommit = postCommit;
            Resources = resources;
            Revision = revision;
            RunPolicy = runPolicy;
            ServiceAccount = serviceAccount;
            Source = source;
            Strategy = strategy;
            SuccessfulBuildsHistoryLimit = successfulBuildsHistoryLimit;
            Triggers = triggers;
        }

        /// <summary>
        /// completionDeadlineSeconds is an optional duration in seconds,
        /// counted from the time when a build pod gets scheduled in the
        /// system, that the build may be active on a node before the system
        /// actively tries to terminate the build; value must be positive
        /// integer
        /// </summary>
        [JsonProperty(PropertyName = "completionDeadlineSeconds")]
        public long? CompletionDeadlineSeconds { get; set; }

        /// <summary>
        /// failedBuildsHistoryLimit is the number of old failed builds to
        /// retain. If not specified, all failed builds are retained.
        /// </summary>
        [JsonProperty(PropertyName = "failedBuildsHistoryLimit")]
        public int? FailedBuildsHistoryLimit { get; set; }

        /// <summary>
        /// nodeSelector is a selector which must be true for the build pod to
        /// fit on a node If nil, it can be overridden by default build
        /// nodeselector values for the cluster. If set to an empty map or a
        /// map with any values, default build nodeselector values are
        /// ignored.
        /// </summary>
        [JsonProperty(PropertyName = "nodeSelector")]
        public IDictionary<string, string> NodeSelector { get; set; }

        /// <summary>
        /// output describes the Docker image the Strategy should produce.
        /// </summary>
        [JsonProperty(PropertyName = "output")]
        public Comgithubopenshiftapibuildv1BuildOutput Output { get; set; }

        /// <summary>
        /// postCommit is a build hook executed after the build output image
        /// is committed, before it is pushed to a registry.
        /// </summary>
        [JsonProperty(PropertyName = "postCommit")]
        public Comgithubopenshiftapibuildv1BuildPostCommitSpec PostCommit { get; set; }

        /// <summary>
        /// resources computes resource requirements to execute the build.
        /// </summary>
        [JsonProperty(PropertyName = "resources")]
        public Iok8sapicorev1ResourceRequirements Resources { get; set; }

        /// <summary>
        /// revision is the information from the source for a specific repo
        /// snapshot. This is optional.
        /// </summary>
        [JsonProperty(PropertyName = "revision")]
        public Comgithubopenshiftapibuildv1SourceRevision Revision { get; set; }

        /// <summary>
        /// RunPolicy describes how the new build created from this build
        /// configuration will be scheduled for execution. This is optional,
        /// if not specified we default to "Serial".
        /// </summary>
        [JsonProperty(PropertyName = "runPolicy")]
        public string RunPolicy { get; set; }

        /// <summary>
        /// serviceAccount is the name of the ServiceAccount to use to run the
        /// pod created by this build. The pod will be allowed to use secrets
        /// referenced by the ServiceAccount
        /// </summary>
        [JsonProperty(PropertyName = "serviceAccount")]
        public string ServiceAccount { get; set; }

        /// <summary>
        /// source describes the SCM in use.
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public Comgithubopenshiftapibuildv1BuildSource Source { get; set; }

        /// <summary>
        /// strategy defines how to perform a build.
        /// </summary>
        [JsonProperty(PropertyName = "strategy")]
        public Comgithubopenshiftapibuildv1BuildStrategy Strategy { get; set; }

        /// <summary>
        /// successfulBuildsHistoryLimit is the number of old successful
        /// builds to retain. If not specified, all successful builds are
        /// retained.
        /// </summary>
        [JsonProperty(PropertyName = "successfulBuildsHistoryLimit")]
        public int? SuccessfulBuildsHistoryLimit { get; set; }

        /// <summary>
        /// triggers determine how new Builds can be launched from a
        /// BuildConfig. If no triggers are defined, a new build can only
        /// occur as a result of an explicit client build creation.
        /// </summary>
        [JsonProperty(PropertyName = "triggers")]
        public IList<Comgithubopenshiftapibuildv1BuildTriggerPolicy> Triggers { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (NodeSelector == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeSelector");
            }
            if (Strategy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Strategy");
            }
            if (Triggers == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Triggers");
            }
            if (this.Revision != null)
            {
                this.Revision.Validate();
            }
            if (this.Source != null)
            {
                this.Source.Validate();
            }
            if (this.Strategy != null)
            {
                this.Strategy.Validate();
            }
            if (this.Triggers != null)
            {
                foreach (var element in this.Triggers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
