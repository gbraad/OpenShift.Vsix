// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Identity records a successful authentication of a user with an
    /// identity provider. The information about the source of authentication
    /// is stored on the identity, and the identity is then associated with a
    /// single user object. Multiple identities can reference a single user.
    /// Information retrieved from the authentication provider is stored in
    /// the extra field using a schema determined by the provider.
    /// </summary>
    public partial class Comgithubopenshiftapiuserv1Identity
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiuserv1Identity class.
        /// </summary>
        public Comgithubopenshiftapiuserv1Identity() { }

        /// <summary>
        /// Initializes a new instance of the
        /// Comgithubopenshiftapiuserv1Identity class.
        /// </summary>
        public Comgithubopenshiftapiuserv1Identity(string providerName, string providerUserName, Iok8sapicorev1ObjectReference user, string apiVersion = default(string), IDictionary<string, string> extra = default(IDictionary<string, string>), string kind = default(string), Iok8sapimachinerypkgapismetav1ObjectMeta metadata = default(Iok8sapimachinerypkgapismetav1ObjectMeta))
        {
            ApiVersion = apiVersion;
            Extra = extra;
            Kind = kind;
            Metadata = metadata;
            ProviderName = providerName;
            ProviderUserName = providerUserName;
            User = user;
        }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of
        /// an object. Servers should convert recognized schemas to the
        /// latest internal value, and may reject unrecognized values. More
        /// info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Extra holds extra information about this identity
        /// </summary>
        [JsonProperty(PropertyName = "extra")]
        public IDictionary<string, string> Extra { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object
        /// represents. Servers may infer this from the endpoint the client
        /// submits requests to. Cannot be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object's metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public Iok8sapimachinerypkgapismetav1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// ProviderName is the source of identity information
        /// </summary>
        [JsonProperty(PropertyName = "providerName")]
        public string ProviderName { get; set; }

        /// <summary>
        /// ProviderUserName uniquely represents this identity in the scope of
        /// the provider
        /// </summary>
        [JsonProperty(PropertyName = "providerUserName")]
        public string ProviderUserName { get; set; }

        /// <summary>
        /// User is a reference to the user this identity is associated with
        /// Both Name and UID must be set
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public Iok8sapicorev1ObjectReference User { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (ProviderName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProviderName");
            }
            if (ProviderUserName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProviderUserName");
            }
            if (User == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "User");
            }
            if (this.Metadata != null)
            {
                this.Metadata.Validate();
            }
        }
    }
}
