// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// A single application container that you want to run within a pod.
    /// </summary>
    public partial class Iok8sapicorev1Container
    {
        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1Container class.
        /// </summary>
        public Iok8sapicorev1Container() { }

        /// <summary>
        /// Initializes a new instance of the Iok8sapicorev1Container class.
        /// </summary>
        public Iok8sapicorev1Container(string name, IList<string> args = default(IList<string>), IList<string> command = default(IList<string>), IList<Iok8sapicorev1EnvVar> env = default(IList<Iok8sapicorev1EnvVar>), IList<Iok8sapicorev1EnvFromSource> envFrom = default(IList<Iok8sapicorev1EnvFromSource>), string image = default(string), string imagePullPolicy = default(string), Iok8sapicorev1Lifecycle lifecycle = default(Iok8sapicorev1Lifecycle), Iok8sapicorev1Probe livenessProbe = default(Iok8sapicorev1Probe), IList<Iok8sapicorev1ContainerPort> ports = default(IList<Iok8sapicorev1ContainerPort>), Iok8sapicorev1Probe readinessProbe = default(Iok8sapicorev1Probe), Iok8sapicorev1ResourceRequirements resources = default(Iok8sapicorev1ResourceRequirements), Iok8sapicorev1SecurityContext securityContext = default(Iok8sapicorev1SecurityContext), bool? stdin = default(bool?), bool? stdinOnce = default(bool?), string terminationMessagePath = default(string), string terminationMessagePolicy = default(string), bool? tty = default(bool?), IList<Iok8sapicorev1VolumeDevice> volumeDevices = default(IList<Iok8sapicorev1VolumeDevice>), IList<Iok8sapicorev1VolumeMount> volumeMounts = default(IList<Iok8sapicorev1VolumeMount>), string workingDir = default(string))
        {
            Args = args;
            Command = command;
            Env = env;
            EnvFrom = envFrom;
            Image = image;
            ImagePullPolicy = imagePullPolicy;
            Lifecycle = lifecycle;
            LivenessProbe = livenessProbe;
            Name = name;
            Ports = ports;
            ReadinessProbe = readinessProbe;
            Resources = resources;
            SecurityContext = securityContext;
            Stdin = stdin;
            StdinOnce = stdinOnce;
            TerminationMessagePath = terminationMessagePath;
            TerminationMessagePolicy = terminationMessagePolicy;
            Tty = tty;
            VolumeDevices = volumeDevices;
            VolumeMounts = volumeMounts;
            WorkingDir = workingDir;
        }

        /// <summary>
        /// Arguments to the entrypoint. The docker image's CMD is used if
        /// this is not provided. Variable references $(VAR_NAME) are
        /// expanded using the container's environment. If a variable cannot
        /// be resolved, the reference in the input string will be unchanged.
        /// The $(VAR_NAME) syntax can be escaped with a double $$, ie:
        /// $$(VAR_NAME). Escaped references will never be expanded,
        /// regardless of whether the variable exists or not. Cannot be
        /// updated. More info:
        /// https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        /// </summary>
        [JsonProperty(PropertyName = "args")]
        public IList<string> Args { get; set; }

        /// <summary>
        /// Entrypoint array. Not executed within a shell. The docker image's
        /// ENTRYPOINT is used if this is not provided. Variable references
        /// $(VAR_NAME) are expanded using the container's environment. If a
        /// variable cannot be resolved, the reference in the input string
        /// will be unchanged. The $(VAR_NAME) syntax can be escaped with a
        /// double $$, ie: $$(VAR_NAME). Escaped references will never be
        /// expanded, regardless of whether the variable exists or not.
        /// Cannot be updated. More info:
        /// https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        /// </summary>
        [JsonProperty(PropertyName = "command")]
        public IList<string> Command { get; set; }

        /// <summary>
        /// List of environment variables to set in the container. Cannot be
        /// updated.
        /// </summary>
        [JsonProperty(PropertyName = "env")]
        public IList<Iok8sapicorev1EnvVar> Env { get; set; }

        /// <summary>
        /// List of sources to populate environment variables in the
        /// container. The keys defined within a source must be a
        /// C_IDENTIFIER. All invalid keys will be reported as an event when
        /// the container is starting. When a key exists in multiple sources,
        /// the value associated with the last source will take precedence.
        /// Values defined by an Env with a duplicate key will take
        /// precedence. Cannot be updated.
        /// </summary>
        [JsonProperty(PropertyName = "envFrom")]
        public IList<Iok8sapicorev1EnvFromSource> EnvFrom { get; set; }

        /// <summary>
        /// Docker image name. More info:
        /// https://kubernetes.io/docs/concepts/containers/images This field
        /// is optional to allow higher level config management to default or
        /// override container images in workload controllers like
        /// Deployments and StatefulSets.
        /// </summary>
        [JsonProperty(PropertyName = "image")]
        public string Image { get; set; }

        /// <summary>
        /// Image pull policy. One of Always, Never, IfNotPresent. Defaults to
        /// Always if :latest tag is specified, or IfNotPresent otherwise.
        /// Cannot be updated. More info:
        /// https://kubernetes.io/docs/concepts/containers/images#updating-images
        /// </summary>
        [JsonProperty(PropertyName = "imagePullPolicy")]
        public string ImagePullPolicy { get; set; }

        /// <summary>
        /// Actions that the management system should take in response to
        /// container lifecycle events. Cannot be updated.
        /// </summary>
        [JsonProperty(PropertyName = "lifecycle")]
        public Iok8sapicorev1Lifecycle Lifecycle { get; set; }

        /// <summary>
        /// Periodic probe of container liveness. Container will be restarted
        /// if the probe fails. Cannot be updated. More info:
        /// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        /// </summary>
        [JsonProperty(PropertyName = "livenessProbe")]
        public Iok8sapicorev1Probe LivenessProbe { get; set; }

        /// <summary>
        /// Name of the container specified as a DNS_LABEL. Each container in
        /// a pod must have a unique name (DNS_LABEL). Cannot be updated.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// List of ports to expose from the container. Exposing a port here
        /// gives the system additional information about the network
        /// connections a container uses, but is primarily informational. Not
        /// specifying a port here DOES NOT prevent that port from being
        /// exposed. Any port which is listening on the default "0.0.0.0"
        /// address inside a container will be accessible from the network.
        /// Cannot be updated.
        /// </summary>
        [JsonProperty(PropertyName = "ports")]
        public IList<Iok8sapicorev1ContainerPort> Ports { get; set; }

        /// <summary>
        /// Periodic probe of container service readiness. Container will be
        /// removed from service endpoints if the probe fails. Cannot be
        /// updated. More info:
        /// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        /// </summary>
        [JsonProperty(PropertyName = "readinessProbe")]
        public Iok8sapicorev1Probe ReadinessProbe { get; set; }

        /// <summary>
        /// Compute Resources required by this container. Cannot be updated.
        /// More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// </summary>
        [JsonProperty(PropertyName = "resources")]
        public Iok8sapicorev1ResourceRequirements Resources { get; set; }

        /// <summary>
        /// Security options the pod should run with. More info:
        /// https://kubernetes.io/docs/concepts/policy/security-context/ More
        /// info:
        /// https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        /// </summary>
        [JsonProperty(PropertyName = "securityContext")]
        public Iok8sapicorev1SecurityContext SecurityContext { get; set; }

        /// <summary>
        /// Whether this container should allocate a buffer for stdin in the
        /// container runtime. If this is not set, reads from stdin in the
        /// container will always result in EOF. Default is false.
        /// </summary>
        [JsonProperty(PropertyName = "stdin")]
        public bool? Stdin { get; set; }

        /// <summary>
        /// Whether the container runtime should close the stdin channel after
        /// it has been opened by a single attach. When stdin is true the
        /// stdin stream will remain open across multiple attach sessions. If
        /// stdinOnce is set to true, stdin is opened on container start, is
        /// empty until the first client attaches to stdin, and then remains
        /// open and accepts data until the client disconnects, at which time
        /// stdin is closed and remains closed until the container is
        /// restarted. If this flag is false, a container processes that
        /// reads from stdin will never receive an EOF. Default is false
        /// </summary>
        [JsonProperty(PropertyName = "stdinOnce")]
        public bool? StdinOnce { get; set; }

        /// <summary>
        /// Optional: Path at which the file to which the container's
        /// termination message will be written is mounted into the
        /// container's filesystem. Message written is intended to be brief
        /// final status, such as an assertion failure message. Will be
        /// truncated by the node if greater than 4096 bytes. The total
        /// message length across all containers will be limited to 12kb.
        /// Defaults to /dev/termination-log. Cannot be updated.
        /// </summary>
        [JsonProperty(PropertyName = "terminationMessagePath")]
        public string TerminationMessagePath { get; set; }

        /// <summary>
        /// Indicate how the termination message should be populated. File
        /// will use the contents of terminationMessagePath to populate the
        /// container status message on both success and failure.
        /// FallbackToLogsOnError will use the last chunk of container log
        /// output if the termination message file is empty and the container
        /// exited with an error. The log output is limited to 2048 bytes or
        /// 80 lines, whichever is smaller. Defaults to File. Cannot be
        /// updated.
        /// </summary>
        [JsonProperty(PropertyName = "terminationMessagePolicy")]
        public string TerminationMessagePolicy { get; set; }

        /// <summary>
        /// Whether this container should allocate a TTY for itself, also
        /// requires 'stdin' to be true. Default is false.
        /// </summary>
        [JsonProperty(PropertyName = "tty")]
        public bool? Tty { get; set; }

        /// <summary>
        /// volumeDevices is the list of block devices to be used by the
        /// container. This is an alpha feature and may change in the future.
        /// </summary>
        [JsonProperty(PropertyName = "volumeDevices")]
        public IList<Iok8sapicorev1VolumeDevice> VolumeDevices { get; set; }

        /// <summary>
        /// Pod volumes to mount into the container's filesystem. Cannot be
        /// updated.
        /// </summary>
        [JsonProperty(PropertyName = "volumeMounts")]
        public IList<Iok8sapicorev1VolumeMount> VolumeMounts { get; set; }

        /// <summary>
        /// Container's working directory. If not specified, the container
        /// runtime's default will be used, which might be configured in the
        /// container image. Cannot be updated.
        /// </summary>
        [JsonProperty(PropertyName = "workingDir")]
        public string WorkingDir { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (this.Env != null)
            {
                foreach (var element in this.Env)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Lifecycle != null)
            {
                this.Lifecycle.Validate();
            }
            if (this.LivenessProbe != null)
            {
                this.LivenessProbe.Validate();
            }
            if (this.Ports != null)
            {
                foreach (var element1 in this.Ports)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.ReadinessProbe != null)
            {
                this.ReadinessProbe.Validate();
            }
            if (this.VolumeDevices != null)
            {
                foreach (var element2 in this.VolumeDevices)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (this.VolumeMounts != null)
            {
                foreach (var element3 in this.VolumeMounts)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
        }
    }
}
