// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace OpenShift.DotNet.Service
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// OpenShift provides builds, application lifecycle, image content
    /// management,
    /// and administrative policy on top of Kubernetes. The API allows
    /// consistent
    /// management of those objects.
    /// 
    /// All API operations are authenticated via an Authorization	bearer token
    /// that
    /// is provided for service accounts as a generated secret (in JWT form)
    /// or via
    /// the native OAuth endpoint located at /oauth/authorize. Core
    /// infrastructure
    /// components may use client certificates that require no authentication.
    /// 
    /// All API operations return a 'resourceVersion' string that represents
    /// the
    /// version of the object in the underlying storage. The standard LIST
    /// operation
    /// performs a snapshot read of the underlying objects, returning a
    /// resourceVersion
    /// representing a consistent version of the listed objects. The WATCH
    /// operation
    /// allows all updates to a set of objects after the provided
    /// resourceVersion to
    /// be observed by a client. By listing and beginning a watch from the
    /// returned
    /// resourceVersion, clients may observe a consistent view of the state of
    /// one
    /// or more objects. Note that WATCH always returns the update after the
    /// provided
    /// resourceVersion. Watch may be extended a limited time in the past -
    /// using
    /// etcd 2 the watch window is 1000 events (which on a large cluster may
    /// only
    /// be a few tens of seconds) so clients must explicitly handle the "watch
    /// to old error" by re-listing.
    /// 
    /// Objects are divided into two rough categories - those that have a
    /// lifecycle
    /// and must reflect the state of the cluster, and those that have no
    /// state.
    /// Objects with lifecycle typically have three main sections:
    /// 
    /// * 'metadata' common to all objects
    /// * a 'spec' that represents the desired state
    /// * a 'status' that represents how much of the desired state is
    /// reflected on
    /// the cluster at the current time
    /// 
    /// Objects that have no state have 'metadata' but may lack a 'spec' or
    /// 'status'
    /// section.
    /// 
    /// Objects are divided into those that are namespace scoped (only exist
    /// inside
    /// of a namespace) and those that are cluster scoped (exist outside of
    /// a namespace). A namespace scoped resource will be deleted when the
    /// namespace
    /// is deleted and cannot be created if the namespace has not yet been
    /// created
    /// or is in the process of deletion. Cluster scoped resources are
    /// typically
    /// only accessible to admins - resources like nodes, persistent volumes,
    /// and
    /// cluster policy.
    /// 
    /// All objects have a schema that is a combination of the 'kind' and
    /// 'apiVersion' fields. This schema is additive only for any given
    /// version -
    /// no backwards incompatible changes are allowed without incrementing the
    /// apiVersion. The server will return and accept a number of standard
    /// responses that share a common schema - for instance, the common
    /// error type is 'metav1.Status' (described below) and will be returned
    /// on any error from the API server.
    /// 
    /// The API is available in multiple serialization formats - the default is
    /// JSON (Accept: application/json and Content-Type: application/json) but
    /// clients may also use YAML (application/yaml) or the native Protobuf
    /// schema (application/vnd.kubernetes.protobuf). Note that the format
    /// of the WATCH API call is slightly different - for JSON it returns
    /// newline
    /// delimited objects while for Protobuf it returns length-delimited frames
    /// (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf
    /// object.
    /// 
    /// See the OpenShift documentation at https://docs.openshift.org for more
    /// information.
    /// </summary>
    public partial interface IOpenShiftAPIwithKubernetes : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


            /// <summary>
        /// get available API versions
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIVersions>> GetCoreLegacyAPIVersionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetCoreV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Binding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Binding>> CreateCoreV1BindingForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1Binding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ComponentStatus
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ComponentStatusList>> ListCoreV1ComponentStatusWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ComponentStatus
        /// </summary>
        /// <param name='name'>
        /// name of the ComponentStatus
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ComponentStatus>> ReadCoreV1ComponentStatusWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ConfigMap
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMapList>> ListCoreV1ConfigMapForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ConfigMap
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMap>> CreateCoreV1ConfigMapForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1ConfigMap body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1EndpointsList>> ListCoreV1EndpointsForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create Endpoints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Endpoints>> CreateCoreV1EndpointsForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1Endpoints body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1EventList>> ListCoreV1EventForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Event>> CreateCoreV1EventForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1Event body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRangeList>> ListCoreV1LimitRangeForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LimitRange
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRange>> CreateCoreV1LimitRangeForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1LimitRange body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Namespace
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1NamespaceList>> ListCoreV1NamespaceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> CreateCoreV1NamespaceWithHttpMessagesAsync(Iok8sapicorev1Namespace body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Binding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Binding>> CreateCoreV1NamespacedBindingWithHttpMessagesAsync(Iok8sapicorev1Binding body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ConfigMap
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMapList>> ListCoreV1NamespacedConfigMapWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ConfigMap
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMap>> CreateCoreV1NamespacedConfigMapWithHttpMessagesAsync(Iok8sapicorev1ConfigMap body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ConfigMap
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedConfigMapWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ConfigMap
        /// </summary>
        /// <param name='name'>
        /// name of the ConfigMap
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMap>> ReadCoreV1NamespacedConfigMapWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ConfigMap
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ConfigMap
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMap>> ReplaceCoreV1NamespacedConfigMapWithHttpMessagesAsync(Iok8sapicorev1ConfigMap body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ConfigMap
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ConfigMap
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedConfigMapWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ConfigMap
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ConfigMap
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ConfigMap>> PatchCoreV1NamespacedConfigMapWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Endpoints
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1EndpointsList>> ListCoreV1NamespacedEndpointsWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create Endpoints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Endpoints>> CreateCoreV1NamespacedEndpointsWithHttpMessagesAsync(Iok8sapicorev1Endpoints body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Endpoints
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedEndpointsWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Endpoints
        /// </summary>
        /// <param name='name'>
        /// name of the Endpoints
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Endpoints>> ReadCoreV1NamespacedEndpointsWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Endpoints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Endpoints
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Endpoints>> ReplaceCoreV1NamespacedEndpointsWithHttpMessagesAsync(Iok8sapicorev1Endpoints body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete Endpoints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Endpoints
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedEndpointsWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Endpoints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Endpoints
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Endpoints>> PatchCoreV1NamespacedEndpointsWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1EventList>> ListCoreV1NamespacedEventWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Event>> CreateCoreV1NamespacedEventWithHttpMessagesAsync(Iok8sapicorev1Event body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedEventWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Event
        /// </summary>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Event>> ReadCoreV1NamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Event>> ReplaceCoreV1NamespacedEventWithHttpMessagesAsync(Iok8sapicorev1Event body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedEventWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Event>> PatchCoreV1NamespacedEventWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind LimitRange
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRangeList>> ListCoreV1NamespacedLimitRangeWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LimitRange
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRange>> CreateCoreV1NamespacedLimitRangeWithHttpMessagesAsync(Iok8sapicorev1LimitRange body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of LimitRange
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedLimitRangeWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified LimitRange
        /// </summary>
        /// <param name='name'>
        /// name of the LimitRange
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRange>> ReadCoreV1NamespacedLimitRangeWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified LimitRange
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the LimitRange
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRange>> ReplaceCoreV1NamespacedLimitRangeWithHttpMessagesAsync(Iok8sapicorev1LimitRange body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a LimitRange
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the LimitRange
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedLimitRangeWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified LimitRange
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the LimitRange
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1LimitRange>> PatchCoreV1NamespacedLimitRangeWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaimList>> ListCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> CreateCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(Iok8sapicorev1PersistentVolumeClaim body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PersistentVolumeClaim
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedPersistentVolumeClaimWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> ReadCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> ReplaceCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(Iok8sapicorev1PersistentVolumeClaim body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> PatchCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> ReadCoreV1NamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> ReplaceCoreV1NamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(Iok8sapicorev1PersistentVolumeClaim body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> PatchCoreV1NamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodList>> ListCoreV1NamespacedPodWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> CreateCoreV1NamespacedPodWithHttpMessagesAsync(Iok8sapicorev1Pod body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Pod
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedPodWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> ReadCoreV1NamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> ReplaceCoreV1NamespacedPodWithHttpMessagesAsync(Iok8sapicorev1Pod body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedPodWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> PatchCoreV1NamespacedPodWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to attach of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='container'>
        /// The container in which to execute the command. Defaults to only
        /// container if there is only one container in the pod.
        /// </param>
        /// <param name='stderr'>
        /// Stderr if true indicates that stderr is to be redirected for the
        /// attach call. Defaults to true.
        /// </param>
        /// <param name='stdin'>
        /// Stdin if true, redirects the standard input stream of the pod for
        /// this call. Defaults to false.
        /// </param>
        /// <param name='stdout'>
        /// Stdout if true indicates that stdout is to be redirected for the
        /// attach call. Defaults to true.
        /// </param>
        /// <param name='tty'>
        /// TTY if true indicates that a tty will be allocated for the attach
        /// call. This is passed through the container runtime so the tty is
        /// allocated on the worker node by the container runtime. Defaults
        /// to false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedPodAttachWithHttpMessagesAsync(string name, string namespaceParameter, string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to attach of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='container'>
        /// The container in which to execute the command. Defaults to only
        /// container if there is only one container in the pod.
        /// </param>
        /// <param name='stderr'>
        /// Stderr if true indicates that stderr is to be redirected for the
        /// attach call. Defaults to true.
        /// </param>
        /// <param name='stdin'>
        /// Stdin if true, redirects the standard input stream of the pod for
        /// this call. Defaults to false.
        /// </param>
        /// <param name='stdout'>
        /// Stdout if true indicates that stdout is to be redirected for the
        /// attach call. Defaults to true.
        /// </param>
        /// <param name='tty'>
        /// TTY if true indicates that a tty will be allocated for the attach
        /// call. This is passed through the container runtime so the tty is
        /// allocated on the worker node by the container runtime. Defaults
        /// to false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedPodAttachWithHttpMessagesAsync(string name, string namespaceParameter, string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create binding of a Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Binding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Binding>> CreateCoreV1NamespacedPodBindingWithHttpMessagesAsync(Iok8sapicorev1Binding body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create eviction of a Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Eviction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1Eviction>> CreateCoreV1NamespacedPodEvictionWithHttpMessagesAsync(Iok8sapipolicyv1beta1Eviction body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to exec of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='command'>
        /// Command is the remote command to execute. argv array. Not executed
        /// within a shell.
        /// </param>
        /// <param name='container'>
        /// Container in which to execute the command. Defaults to only
        /// container if there is only one container in the pod.
        /// </param>
        /// <param name='stderr'>
        /// Redirect the standard error stream of the pod for this call.
        /// Defaults to true.
        /// </param>
        /// <param name='stdin'>
        /// Redirect the standard input stream of the pod for this call.
        /// Defaults to false.
        /// </param>
        /// <param name='stdout'>
        /// Redirect the standard output stream of the pod for this call.
        /// Defaults to true.
        /// </param>
        /// <param name='tty'>
        /// TTY if true indicates that a tty will be allocated for the exec
        /// call. Defaults to false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedPodExecWithHttpMessagesAsync(string name, string namespaceParameter, string command = default(string), string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to exec of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='command'>
        /// Command is the remote command to execute. argv array. Not executed
        /// within a shell.
        /// </param>
        /// <param name='container'>
        /// Container in which to execute the command. Defaults to only
        /// container if there is only one container in the pod.
        /// </param>
        /// <param name='stderr'>
        /// Redirect the standard error stream of the pod for this call.
        /// Defaults to true.
        /// </param>
        /// <param name='stdin'>
        /// Redirect the standard input stream of the pod for this call.
        /// Defaults to false.
        /// </param>
        /// <param name='stdout'>
        /// Redirect the standard output stream of the pod for this call.
        /// Defaults to true.
        /// </param>
        /// <param name='tty'>
        /// TTY if true indicates that a tty will be allocated for the exec
        /// call. Defaults to false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedPodExecWithHttpMessagesAsync(string name, string namespaceParameter, string command = default(string), string container = default(string), bool? stderr = default(bool?), bool? stdin = default(bool?), bool? stdout = default(bool?), bool? tty = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read log of the specified Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='container'>
        /// The container for which to stream logs. Defaults to only container
        /// if there is one container in the pod.
        /// </param>
        /// <param name='follow'>
        /// Follow the log stream of the pod. Defaults to false.
        /// </param>
        /// <param name='limitBytes'>
        /// If set, the number of bytes to read from the server before
        /// terminating the log output. This may not display a complete final
        /// line of logging, and may return slightly more or slightly less
        /// than the specified limit.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='previous'>
        /// Return previous terminated container logs. Defaults to false.
        /// </param>
        /// <param name='sinceSeconds'>
        /// A relative time in seconds before the current time from which to
        /// show logs. If this value precedes the time a pod was started,
        /// only logs since the pod start will be returned. If this value is
        /// in the future, no logs will be returned. Only one of sinceSeconds
        /// or sinceTime may be specified.
        /// </param>
        /// <param name='tailLines'>
        /// If set, the number of lines from the end of the logs to show. If
        /// not specified, logs are shown from the creation of the container
        /// or sinceSeconds or sinceTime
        /// </param>
        /// <param name='timestamps'>
        /// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning
        /// of every line of log output. Defaults to false.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ReadCoreV1NamespacedPodLogWithHttpMessagesAsync(string name, string namespaceParameter, string container = default(string), bool? follow = default(bool?), int? limitBytes = default(int?), string pretty = default(string), bool? previous = default(bool?), int? sinceSeconds = default(int?), int? tailLines = default(int?), bool? timestamps = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to portforward of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='ports'>
        /// List of ports to forward Required when using WebSockets
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedPodPortforwardWithHttpMessagesAsync(string name, string namespaceParameter, int? ports = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to portforward of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='ports'>
        /// List of ports to forward Required when using WebSockets
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedPodPortforwardWithHttpMessagesAsync(string name, string namespaceParameter, int? ports = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> ReadCoreV1NamespacedPodStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> ReplaceCoreV1NamespacedPodStatusWithHttpMessagesAsync(Iok8sapicorev1Pod body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> PatchCoreV1NamespacedPodStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplateList>> ListCoreV1NamespacedPodTemplateWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodTemplate
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplate>> CreateCoreV1NamespacedPodTemplateWithHttpMessagesAsync(Iok8sapicorev1PodTemplate body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PodTemplate
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedPodTemplateWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PodTemplate
        /// </summary>
        /// <param name='name'>
        /// name of the PodTemplate
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplate>> ReadCoreV1NamespacedPodTemplateWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PodTemplate
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodTemplate
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplate>> ReplaceCoreV1NamespacedPodTemplateWithHttpMessagesAsync(Iok8sapicorev1PodTemplate body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PodTemplate
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodTemplate
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedPodTemplateWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PodTemplate
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodTemplate
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplate>> PatchCoreV1NamespacedPodTemplateWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationControllerList>> ListCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> CreateCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(Iok8sapicorev1ReplicationController body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ReplicationController
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedReplicationControllerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ReplicationController
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> ReadCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> ReplaceCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(Iok8sapicorev1ReplicationController body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> PatchCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified ReplicationController
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReadCoreV1NamespacedReplicationControllerScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReplaceCoreV1NamespacedReplicationControllerScaleWithHttpMessagesAsync(Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> PatchCoreV1NamespacedReplicationControllerScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ReplicationController
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> ReadCoreV1NamespacedReplicationControllerStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> ReplaceCoreV1NamespacedReplicationControllerStatusWithHttpMessagesAsync(Iok8sapicorev1ReplicationController body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> PatchCoreV1NamespacedReplicationControllerStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuotaList>> ListCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> CreateCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(Iok8sapicorev1ResourceQuota body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ResourceQuota
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedResourceQuotaWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> ReadCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> ReplaceCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(Iok8sapicorev1ResourceQuota body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> PatchCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> ReadCoreV1NamespacedResourceQuotaStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> ReplaceCoreV1NamespacedResourceQuotaStatusWithHttpMessagesAsync(Iok8sapicorev1ResourceQuota body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> PatchCoreV1NamespacedResourceQuotaStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1SecretList>> ListCoreV1NamespacedSecretWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Secret
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Secret>> CreateCoreV1NamespacedSecretWithHttpMessagesAsync(Iok8sapicorev1Secret body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Secret
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedSecretWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Secret
        /// </summary>
        /// <param name='name'>
        /// name of the Secret
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Secret>> ReadCoreV1NamespacedSecretWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Secret
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Secret
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Secret>> ReplaceCoreV1NamespacedSecretWithHttpMessagesAsync(Iok8sapicorev1Secret body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Secret
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Secret
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedSecretWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Secret
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Secret
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Secret>> PatchCoreV1NamespacedSecretWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccountList>> ListCoreV1NamespacedServiceAccountWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ServiceAccount
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccount>> CreateCoreV1NamespacedServiceAccountWithHttpMessagesAsync(Iok8sapicorev1ServiceAccount body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ServiceAccount
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNamespacedServiceAccountWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ServiceAccount
        /// </summary>
        /// <param name='name'>
        /// name of the ServiceAccount
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccount>> ReadCoreV1NamespacedServiceAccountWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ServiceAccount
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ServiceAccount
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccount>> ReplaceCoreV1NamespacedServiceAccountWithHttpMessagesAsync(Iok8sapicorev1ServiceAccount body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ServiceAccount
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ServiceAccount
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedServiceAccountWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ServiceAccount
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ServiceAccount
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccount>> PatchCoreV1NamespacedServiceAccountWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceList>> ListCoreV1NamespacedServiceWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> CreateCoreV1NamespacedServiceWithHttpMessagesAsync(Iok8sapicorev1Service body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> ReadCoreV1NamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> ReplaceCoreV1NamespacedServiceWithHttpMessagesAsync(Iok8sapicorev1Service body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> PatchCoreV1NamespacedServiceWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the part of URLs that include service endpoints, suffixes,
        /// and parameters to use for the current proxy request to service.
        /// For example, the whole request URL is
        /// http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        /// Path is _search?q=user:kimchy.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> ReadCoreV1NamespacedServiceStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> ReplaceCoreV1NamespacedServiceStatusWithHttpMessagesAsync(Iok8sapicorev1Service body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> PatchCoreV1NamespacedServiceStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Namespace
        /// </summary>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> ReadCoreV1NamespaceWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> ReplaceCoreV1NamespaceWithHttpMessagesAsync(Iok8sapicorev1Namespace body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NamespaceWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> PatchCoreV1NamespaceWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace finalize of the specified Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> ReplaceCoreV1NamespaceFinalizeWithHttpMessagesAsync(Iok8sapicorev1Namespace body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Namespace
        /// </summary>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> ReadCoreV1NamespaceStatusWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> ReplaceCoreV1NamespaceStatusWithHttpMessagesAsync(Iok8sapicorev1Namespace body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Namespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Namespace>> PatchCoreV1NamespaceStatusWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Node
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1NodeList>> ListCoreV1NodeWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> CreateCoreV1NodeWithHttpMessagesAsync(Iok8sapicorev1Node body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Node
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionNodeWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> ReadCoreV1NodeWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> ReplaceCoreV1NodeWithHttpMessagesAsync(Iok8sapicorev1Node body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1NodeWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> PatchCoreV1NodeWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNodeProxyWithHttpMessagesAsync(string name, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect GET requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1GetNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PUT requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PutNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PostNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect DELETE requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1DeleteNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect HEAD requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1HeadNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect PATCH requests to proxy of Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to node.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectCoreV1PatchNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> ReadCoreV1NodeStatusWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> ReplaceCoreV1NodeStatusWithHttpMessagesAsync(Iok8sapicorev1Node body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Node
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Node>> PatchCoreV1NodeStatusWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PersistentVolumeClaim
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaimList>> ListCoreV1PersistentVolumeClaimForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PersistentVolumeClaim
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeClaim>> CreateCoreV1PersistentVolumeClaimForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1PersistentVolumeClaim body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PersistentVolume
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolumeList>> ListCoreV1PersistentVolumeWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> CreateCoreV1PersistentVolumeWithHttpMessagesAsync(Iok8sapicorev1PersistentVolume body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PersistentVolume
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionPersistentVolumeWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PersistentVolume
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> ReadCoreV1PersistentVolumeWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> ReplaceCoreV1PersistentVolumeWithHttpMessagesAsync(Iok8sapicorev1PersistentVolume body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1PersistentVolumeWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> PatchCoreV1PersistentVolumeWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified PersistentVolume
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> ReadCoreV1PersistentVolumeStatusWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> ReplaceCoreV1PersistentVolumeStatusWithHttpMessagesAsync(Iok8sapicorev1PersistentVolume body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified PersistentVolume
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PersistentVolume>> PatchCoreV1PersistentVolumeStatusWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Pod
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodList>> ListCoreV1PodForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Pod
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Pod>> CreateCoreV1PodForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1Pod body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodTemplate
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplateList>> ListCoreV1PodTemplateForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodTemplate
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1PodTemplate>> CreateCoreV1PodTemplateForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1PodTemplate body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy GET requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1GETNamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PUT requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PUTNamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy POST requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1POSTNamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy DELETE requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1DELETENamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy HEAD requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1HEADNamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PATCH requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PATCHNamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy GET requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1GETNamespacedPodWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PUT requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PUTNamespacedPodWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy POST requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1POSTNamespacedPodWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy DELETE requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1DELETENamespacedPodWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy HEAD requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1HEADNamespacedPodWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PATCH requests to Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PATCHNamespacedPodWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy GET requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1GETNamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PUT requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PUTNamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy POST requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1POSTNamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy DELETE requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1DELETENamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy HEAD requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1HEADNamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PATCH requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PATCHNamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy GET requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1GETNamespacedServiceWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PUT requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PUTNamespacedServiceWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy POST requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1POSTNamespacedServiceWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy DELETE requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1DELETENamespacedServiceWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy HEAD requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1HEADNamespacedServiceWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PATCH requests to Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PATCHNamespacedServiceWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy GET requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1GETNodeWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PUT requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PUTNodeWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy POST requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1POSTNodeWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy DELETE requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1DELETENodeWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy HEAD requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1HEADNodeWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PATCH requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PATCHNodeWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy GET requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1GETNodeWithPathWithHttpMessagesAsync(string name, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PUT requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PUTNodeWithPathWithHttpMessagesAsync(string name, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy POST requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1POSTNodeWithPathWithHttpMessagesAsync(string name, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy DELETE requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1DELETENodeWithPathWithHttpMessagesAsync(string name, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy HEAD requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1HEADNodeWithPathWithHttpMessagesAsync(string name, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// proxy PATCH requests to Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ProxyCoreV1PATCHNodeWithPathWithHttpMessagesAsync(string name, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicationController
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationControllerList>> ListCoreV1ReplicationControllerForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicationController
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ReplicationController>> CreateCoreV1ReplicationControllerForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1ReplicationController body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuotaList>> ListCoreV1ResourceQuotaForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ResourceQuota>> CreateCoreV1ResourceQuotaForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1ResourceQuota body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Secret
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1SecretList>> ListCoreV1SecretForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Secret
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Secret>> CreateCoreV1SecretForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1Secret body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind SecurityContextConstraints
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1SecurityContextConstraintsList>> ListCoreV1SecurityContextConstraintsWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create SecurityContextConstraints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1SecurityContextConstraints>> CreateCoreV1SecurityContextConstraintsWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1SecurityContextConstraints body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of SecurityContextConstraints
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1CollectionSecurityContextConstraintsWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified SecurityContextConstraints
        /// </summary>
        /// <param name='name'>
        /// name of the SecurityContextConstraints
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1SecurityContextConstraints>> ReadCoreV1SecurityContextConstraintsWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified SecurityContextConstraints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the SecurityContextConstraints
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1SecurityContextConstraints>> ReplaceCoreV1SecurityContextConstraintsWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1SecurityContextConstraints body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete SecurityContextConstraints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the SecurityContextConstraints
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCoreV1SecurityContextConstraintsWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified SecurityContextConstraints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the SecurityContextConstraints
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1SecurityContextConstraints>> PatchCoreV1SecurityContextConstraintsWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ServiceAccount
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccountList>> ListCoreV1ServiceAccountForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ServiceAccount
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceAccount>> CreateCoreV1ServiceAccountForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1ServiceAccount body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Service
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1ServiceList>> ListCoreV1ServiceForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Service
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1Service>> CreateCoreV1ServiceForAllNamespacesWithHttpMessagesAsync(Iok8sapicorev1Service body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ConfigMap
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1ConfigMapListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1EndpointsListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1EventListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1LimitRangeListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Namespace
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespaceListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ConfigMap
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedConfigMapListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ConfigMap
        /// </summary>
        /// <param name='name'>
        /// name of the ConfigMap
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedConfigMapWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Endpoints
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedEndpointsListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Endpoints
        /// </summary>
        /// <param name='name'>
        /// name of the Endpoints
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedEndpointsWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedEventListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Event
        /// </summary>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of LimitRange
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedLimitRangeListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind LimitRange
        /// </summary>
        /// <param name='name'>
        /// name of the LimitRange
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedLimitRangeWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPersistentVolumeClaimListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PersistentVolumeClaim
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolumeClaim
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPersistentVolumeClaimWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPodListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Pod
        /// </summary>
        /// <param name='name'>
        /// name of the Pod
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPodTemplateListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PodTemplate
        /// </summary>
        /// <param name='name'>
        /// name of the PodTemplate
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedPodTemplateWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedReplicationControllerListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ReplicationController
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicationController
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedReplicationControllerWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedResourceQuotaListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedResourceQuotaWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedSecretListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Secret
        /// </summary>
        /// <param name='name'>
        /// name of the Secret
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedSecretWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedServiceAccountListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ServiceAccount
        /// </summary>
        /// <param name='name'>
        /// name of the ServiceAccount
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedServiceAccountWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedServiceListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Service
        /// </summary>
        /// <param name='name'>
        /// name of the Service
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Namespace
        /// </summary>
        /// <param name='name'>
        /// name of the Namespace
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NamespaceWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Node
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NodeListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Node
        /// </summary>
        /// <param name='name'>
        /// name of the Node
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1NodeWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PersistentVolumeClaim
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1PersistentVolumeClaimListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PersistentVolume
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1PersistentVolumeListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PersistentVolume
        /// </summary>
        /// <param name='name'>
        /// name of the PersistentVolume
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1PersistentVolumeWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Pod
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1PodListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodTemplate
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1PodTemplateListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicationController
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1ReplicationControllerListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1ResourceQuotaListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Secret
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1SecretListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of SecurityContextConstraints
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1SecurityContextConstraintsListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind SecurityContextConstraints
        /// </summary>
        /// <param name='name'>
        /// name of the SecurityContextConstraints
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1SecurityContextConstraintsWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ServiceAccount
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1ServiceAccountListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Service
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCoreV1ServiceListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available API versions
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroupList>> GetAPIVersionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAdmissionregistrationAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAdmissionregistrationV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind MutatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfigurationList>> ListAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a MutatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration>> CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of MutatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified MutatingWebhookConfiguration
        /// </summary>
        /// <param name='name'>
        /// name of the MutatingWebhookConfiguration
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration>> ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified MutatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the MutatingWebhookConfiguration
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration>> ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a MutatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the MutatingWebhookConfiguration
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified MutatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the MutatingWebhookConfiguration
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1MutatingWebhookConfiguration>> PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfigurationList>> ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration>> CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='name'>
        /// name of the ValidatingWebhookConfiguration
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration>> ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ValidatingWebhookConfiguration
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration>> ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ValidatingWebhookConfiguration
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ValidatingWebhookConfiguration
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiadmissionregistrationv1beta1ValidatingWebhookConfiguration>> PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of MutatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind MutatingWebhookConfiguration
        /// </summary>
        /// <param name='name'>
        /// name of the MutatingWebhookConfiguration
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of
        /// ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ValidatingWebhookConfiguration
        /// </summary>
        /// <param name='name'>
        /// name of the ValidatingWebhookConfiguration
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetApiregistrationAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetApiregistrationV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind APIService
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIServiceList>> ListApiregistrationV1beta1APIServiceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>> CreateApiregistrationV1beta1APIServiceWithHttpMessagesAsync(Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of APIService
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteApiregistrationV1beta1CollectionAPIServiceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified APIService
        /// </summary>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>> ReadApiregistrationV1beta1APIServiceWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>> ReplaceApiregistrationV1beta1APIServiceWithHttpMessagesAsync(Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteApiregistrationV1beta1APIServiceWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>> PatchApiregistrationV1beta1APIServiceWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified APIService
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService>> ReplaceApiregistrationV1beta1APIServiceStatusWithHttpMessagesAsync(Iok8skubeAggregatorpkgapisapiregistrationv1beta1APIService body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of APIService
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchApiregistrationV1beta1APIServiceListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind APIService
        /// </summary>
        /// <param name='name'>
        /// name of the APIService
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchApiregistrationV1beta1APIServiceWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAppsOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAppsOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DeploymentConfig
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfigList>> ListAppsOpenshiftIoV1DeploymentConfigForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> CreateAppsOpenshiftIoV1DeploymentConfigForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentConfig body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DeploymentConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfigList>> ListAppsOpenshiftIoV1NamespacedDeploymentConfigWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> CreateAppsOpenshiftIoV1NamespacedDeploymentConfigWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentConfig body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of DeploymentConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsOpenshiftIoV1CollectionNamespacedDeploymentConfigWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified DeploymentConfig
        /// </summary>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> ReadAppsOpenshiftIoV1NamespacedDeploymentConfigWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentConfig body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsOpenshiftIoV1NamespacedDeploymentConfigWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> PatchAppsOpenshiftIoV1NamespacedDeploymentConfigWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create instantiate of a DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentRequest
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentRequest>> CreateAppsOpenshiftIoV1NamespacedDeploymentConfigInstantiateWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentRequest body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read log of the specified DeploymentConfig
        /// </summary>
        /// <param name='name'>
        /// name of the DeploymentLog
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='container'>
        /// The container for which to stream logs. Defaults to only container
        /// if there is one container in the pod.
        /// </param>
        /// <param name='follow'>
        /// Follow if true indicates that the build log should be streamed
        /// until the build terminates.
        /// </param>
        /// <param name='limitBytes'>
        /// If set, the number of bytes to read from the server before
        /// terminating the log output. This may not display a complete final
        /// line of logging, and may return slightly more or slightly less
        /// than the specified limit.
        /// </param>
        /// <param name='nowait'>
        /// NoWait if true causes the call to return immediately even if the
        /// deployment is not available yet. Otherwise the server will wait
        /// until the deployment has started.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='previous'>
        /// Return previous deployment logs. Defaults to false.
        /// </param>
        /// <param name='sinceSeconds'>
        /// A relative time in seconds before the current time from which to
        /// show logs. If this value precedes the time a pod was started,
        /// only logs since the pod start will be returned. If this value is
        /// in the future, no logs will be returned. Only one of sinceSeconds
        /// or sinceTime may be specified.
        /// </param>
        /// <param name='tailLines'>
        /// If set, the number of lines from the end of the logs to show. If
        /// not specified, logs are shown from the creation of the container
        /// or sinceSeconds or sinceTime
        /// </param>
        /// <param name='timestamps'>
        /// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning
        /// of every line of log output. Defaults to false.
        /// </param>
        /// <param name='version'>
        /// Version of the deployment for which to view logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentLog>> ReadAppsOpenshiftIoV1NamespacedDeploymentConfigLogWithHttpMessagesAsync(string name, string namespaceParameter, string container = default(string), bool? follow = default(bool?), int? limitBytes = default(int?), bool? nowait = default(bool?), string pretty = default(string), bool? previous = default(bool?), int? sinceSeconds = default(int?), int? tailLines = default(int?), bool? timestamps = default(bool?), int? version = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create rollback of a DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfigRollback
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfigRollback>> CreateAppsOpenshiftIoV1NamespacedDeploymentConfigRollbackWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentConfigRollback body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified DeploymentConfig
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReadAppsOpenshiftIoV1NamespacedDeploymentConfigScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigScaleWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> PatchAppsOpenshiftIoV1NamespacedDeploymentConfigScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified DeploymentConfig
        /// </summary>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> ReadAppsOpenshiftIoV1NamespacedDeploymentConfigStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> ReplaceAppsOpenshiftIoV1NamespacedDeploymentConfigStatusWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentConfig body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> PatchAppsOpenshiftIoV1NamespacedDeploymentConfigStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DeploymentConfig
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsOpenshiftIoV1DeploymentConfigListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DeploymentConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsOpenshiftIoV1NamespacedDeploymentConfigListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind DeploymentConfig
        /// </summary>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsOpenshiftIoV1NamespacedDeploymentConfigWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAppsAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAppsV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevisionList>> ListAppsV1ControllerRevisionForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevision>> CreateAppsV1ControllerRevisionForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1ControllerRevision body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSetList>> ListAppsV1DaemonSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> CreateAppsV1DaemonSetForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1DaemonSet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DeploymentList>> ListAppsV1DeploymentForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> CreateAppsV1DeploymentForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1Deployment body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevisionList>> ListAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevision>> CreateAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1ControllerRevision body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1CollectionNamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevision>> ReadAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevision>> ReplaceAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1ControllerRevision body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ControllerRevision>> PatchAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSetList>> ListAppsV1NamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> CreateAppsV1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiappsv1DaemonSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1CollectionNamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> ReadAppsV1NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> ReplaceAppsV1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiappsv1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> PatchAppsV1NamespacedDaemonSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> ReadAppsV1NamespacedDaemonSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> ReplaceAppsV1NamespacedDaemonSetStatusWithHttpMessagesAsync(Iok8sapiappsv1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DaemonSet>> PatchAppsV1NamespacedDaemonSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1DeploymentList>> ListAppsV1NamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> CreateAppsV1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1Deployment body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1CollectionNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> ReadAppsV1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> ReplaceAppsV1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> PatchAppsV1NamespacedDeploymentWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReadAppsV1NamespacedDeploymentScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReplaceAppsV1NamespacedDeploymentScaleWithHttpMessagesAsync(Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> PatchAppsV1NamespacedDeploymentScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> ReadAppsV1NamespacedDeploymentStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> ReplaceAppsV1NamespacedDeploymentStatusWithHttpMessagesAsync(Iok8sapiappsv1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1Deployment>> PatchAppsV1NamespacedDeploymentStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSetList>> ListAppsV1NamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> CreateAppsV1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiappsv1ReplicaSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1CollectionNamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> ReadAppsV1NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> ReplaceAppsV1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiappsv1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> PatchAppsV1NamespacedReplicaSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReadAppsV1NamespacedReplicaSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReplaceAppsV1NamespacedReplicaSetScaleWithHttpMessagesAsync(Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> PatchAppsV1NamespacedReplicaSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> ReadAppsV1NamespacedReplicaSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> ReplaceAppsV1NamespacedReplicaSetStatusWithHttpMessagesAsync(Iok8sapiappsv1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> PatchAppsV1NamespacedReplicaSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSetList>> ListAppsV1NamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> CreateAppsV1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1StatefulSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1CollectionNamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> ReadAppsV1NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> ReplaceAppsV1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> PatchAppsV1NamespacedStatefulSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReadAppsV1NamespacedStatefulSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> ReplaceAppsV1NamespacedStatefulSetScaleWithHttpMessagesAsync(Iok8sapiautoscalingv1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1Scale>> PatchAppsV1NamespacedStatefulSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> ReadAppsV1NamespacedStatefulSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> ReplaceAppsV1NamespacedStatefulSetStatusWithHttpMessagesAsync(Iok8sapiappsv1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> PatchAppsV1NamespacedStatefulSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSetList>> ListAppsV1ReplicaSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1ReplicaSet>> CreateAppsV1ReplicaSetForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1ReplicaSet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSetList>> ListAppsV1StatefulSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1StatefulSet>> CreateAppsV1StatefulSetForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1StatefulSet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1ControllerRevisionListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1DaemonSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1DeploymentListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedControllerRevisionListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedDaemonSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedDeploymentListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedReplicaSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedStatefulSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1ReplicaSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1StatefulSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAppsV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevisionList>> ListAppsV1beta1ControllerRevisionForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevision>> CreateAppsV1beta1ControllerRevisionForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1beta1ControllerRevision body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1DeploymentList>> ListAppsV1beta1DeploymentForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> CreateAppsV1beta1DeploymentForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1beta1Deployment body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevisionList>> ListAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevision>> CreateAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1beta1ControllerRevision body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1CollectionNamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevision>> ReadAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevision>> ReplaceAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1beta1ControllerRevision body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1ControllerRevision>> PatchAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1DeploymentList>> ListAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> CreateAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1beta1Deployment body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1CollectionNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> ReadAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> ReplaceAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> PatchAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create rollback of a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentRollback
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1DeploymentRollback>> CreateAppsV1beta1NamespacedDeploymentRollbackWithHttpMessagesAsync(Iok8sapiappsv1beta1DeploymentRollback body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> ReadAppsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> ReplaceAppsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(Iok8sapiappsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> PatchAppsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> ReadAppsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> ReplaceAppsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(Iok8sapiappsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Deployment>> PatchAppsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSetList>> ListAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> CreateAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1beta1StatefulSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1CollectionNamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> ReadAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> ReplaceAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1beta1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> PatchAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> ReadAppsV1beta1NamespacedStatefulSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> ReplaceAppsV1beta1NamespacedStatefulSetScaleWithHttpMessagesAsync(Iok8sapiappsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1Scale>> PatchAppsV1beta1NamespacedStatefulSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> ReadAppsV1beta1NamespacedStatefulSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> ReplaceAppsV1beta1NamespacedStatefulSetStatusWithHttpMessagesAsync(Iok8sapiappsv1beta1StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> PatchAppsV1beta1NamespacedStatefulSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSetList>> ListAppsV1beta1StatefulSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta1StatefulSet>> CreateAppsV1beta1StatefulSetForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1beta1StatefulSet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1ControllerRevisionListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1DeploymentListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedControllerRevisionListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedDeploymentListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedStatefulSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta1StatefulSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAppsV1beta2APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevisionList>> ListAppsV1beta2ControllerRevisionForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevision>> CreateAppsV1beta2ControllerRevisionForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1beta2ControllerRevision body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSetList>> ListAppsV1beta2DaemonSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> CreateAppsV1beta2DaemonSetForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1beta2DaemonSet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DeploymentList>> ListAppsV1beta2DeploymentForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> CreateAppsV1beta2DeploymentForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1beta2Deployment body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevisionList>> ListAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevision>> CreateAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1beta2ControllerRevision body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2CollectionNamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevision>> ReadAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevision>> ReplaceAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapiappsv1beta2ControllerRevision body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ControllerRevision
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ControllerRevision>> PatchAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSetList>> ListAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> CreateAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiappsv1beta2DaemonSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2CollectionNamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> ReadAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> ReplaceAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiappsv1beta2DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> PatchAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> ReadAppsV1beta2NamespacedDaemonSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> ReplaceAppsV1beta2NamespacedDaemonSetStatusWithHttpMessagesAsync(Iok8sapiappsv1beta2DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DaemonSet>> PatchAppsV1beta2NamespacedDaemonSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2DeploymentList>> ListAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> CreateAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1beta2Deployment body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2CollectionNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> ReadAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> ReplaceAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiappsv1beta2Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> PatchAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReadAppsV1beta2NamespacedDeploymentScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReplaceAppsV1beta2NamespacedDeploymentScaleWithHttpMessagesAsync(Iok8sapiappsv1beta2Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> PatchAppsV1beta2NamespacedDeploymentScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> ReadAppsV1beta2NamespacedDeploymentStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> ReplaceAppsV1beta2NamespacedDeploymentStatusWithHttpMessagesAsync(Iok8sapiappsv1beta2Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Deployment>> PatchAppsV1beta2NamespacedDeploymentStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSetList>> ListAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> CreateAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiappsv1beta2ReplicaSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2CollectionNamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> ReadAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> ReplaceAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiappsv1beta2ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> PatchAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReadAppsV1beta2NamespacedReplicaSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReplaceAppsV1beta2NamespacedReplicaSetScaleWithHttpMessagesAsync(Iok8sapiappsv1beta2Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> PatchAppsV1beta2NamespacedReplicaSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> ReadAppsV1beta2NamespacedReplicaSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> ReplaceAppsV1beta2NamespacedReplicaSetStatusWithHttpMessagesAsync(Iok8sapiappsv1beta2ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> PatchAppsV1beta2NamespacedReplicaSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSetList>> ListAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> CreateAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1beta2StatefulSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2CollectionNamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> ReadAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> ReplaceAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapiappsv1beta2StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> PatchAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReadAppsV1beta2NamespacedStatefulSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> ReplaceAppsV1beta2NamespacedStatefulSetScaleWithHttpMessagesAsync(Iok8sapiappsv1beta2Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2Scale>> PatchAppsV1beta2NamespacedStatefulSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> ReadAppsV1beta2NamespacedStatefulSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> ReplaceAppsV1beta2NamespacedStatefulSetStatusWithHttpMessagesAsync(Iok8sapiappsv1beta2StatefulSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> PatchAppsV1beta2NamespacedStatefulSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSetList>> ListAppsV1beta2ReplicaSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2ReplicaSet>> CreateAppsV1beta2ReplicaSetForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1beta2ReplicaSet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSetList>> ListAppsV1beta2StatefulSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StatefulSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiappsv1beta2StatefulSet>> CreateAppsV1beta2StatefulSetForAllNamespacesWithHttpMessagesAsync(Iok8sapiappsv1beta2StatefulSet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2ControllerRevisionListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2DaemonSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2DeploymentListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ControllerRevision
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedControllerRevisionListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ControllerRevision
        /// </summary>
        /// <param name='name'>
        /// name of the ControllerRevision
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedDaemonSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedDeploymentListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedReplicaSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedStatefulSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind StatefulSet
        /// </summary>
        /// <param name='name'>
        /// name of the StatefulSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2NamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2ReplicaSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StatefulSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAppsV1beta2StatefulSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAuthenticationAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAuthenticationV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a TokenReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthenticationv1TokenReview>> CreateAuthenticationV1TokenReviewWithHttpMessagesAsync(Iok8sapiauthenticationv1TokenReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAuthenticationV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a TokenReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthenticationv1beta1TokenReview>> CreateAuthenticationV1beta1TokenReviewWithHttpMessagesAsync(Iok8sapiauthenticationv1beta1TokenReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAuthorizationAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAuthorizationV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1LocalSubjectAccessReview>> CreateAuthorizationV1LocalSubjectAccessReviewForAllNamespacesWithHttpMessagesAsync(Iok8sapiauthorizationv1LocalSubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1LocalSubjectAccessReview>> CreateAuthorizationV1NamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1SelfSubjectAccessReview>> CreateAuthorizationV1SelfSubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1SelfSubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1SelfSubjectRulesReview>> CreateAuthorizationV1SelfSubjectRulesReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1SelfSubjectRulesReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1SubjectAccessReview>> CreateAuthorizationV1SubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1SubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAuthorizationV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1beta1LocalSubjectAccessReview>> CreateAuthorizationV1beta1LocalSubjectAccessReviewForAllNamespacesWithHttpMessagesAsync(Iok8sapiauthorizationv1beta1LocalSubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1beta1LocalSubjectAccessReview>> CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1beta1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1beta1SelfSubjectAccessReview>> CreateAuthorizationV1beta1SelfSubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1beta1SelfSubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1beta1SelfSubjectRulesReview>> CreateAuthorizationV1beta1SelfSubjectRulesReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1beta1SelfSubjectRulesReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiauthorizationv1beta1SubjectAccessReview>> CreateAuthorizationV1beta1SubjectAccessReviewWithHttpMessagesAsync(Iok8sapiauthorizationv1beta1SubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAuthorizationOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAuthorizationOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleBindingList>> ListAuthorizationOpenshiftIoV1ClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>> CreateAuthorizationOpenshiftIoV1ClusterRoleBindingWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ClusterRoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>> ReadAuthorizationOpenshiftIoV1ClusterRoleBindingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>> ReplaceAuthorizationOpenshiftIoV1ClusterRoleBindingWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ClusterRoleBinding body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAuthorizationOpenshiftIoV1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>> PatchAuthorizationOpenshiftIoV1ClusterRoleBindingWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleList>> ListAuthorizationOpenshiftIoV1ClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRole>> CreateAuthorizationOpenshiftIoV1ClusterRoleWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ClusterRole body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRole>> ReadAuthorizationOpenshiftIoV1ClusterRoleWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRole>> ReplaceAuthorizationOpenshiftIoV1ClusterRoleWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ClusterRole body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAuthorizationOpenshiftIoV1ClusterRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRole>> PatchAuthorizationOpenshiftIoV1ClusterRoleWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalResourceAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview>> CreateAuthorizationOpenshiftIoV1LocalResourceAccessReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview>> CreateAuthorizationOpenshiftIoV1LocalSubjectAccessReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalResourceAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview>> CreateAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview>> CreateAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBindingRestriction
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>> ListAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBindingRestriction
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>> CreateAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBindingRestriction body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of RoleBindingRestriction
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified RoleBindingRestriction
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBindingRestriction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>> ReadAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified RoleBindingRestriction
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBindingRestriction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>> ReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBindingRestriction body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a RoleBindingRestriction
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBindingRestriction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified RoleBindingRestriction
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBindingRestriction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>> PatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingList>> ListAuthorizationOpenshiftIoV1NamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBinding>> CreateAuthorizationOpenshiftIoV1NamespacedRoleBindingWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBinding body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBinding>> ReadAuthorizationOpenshiftIoV1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBinding>> ReplaceAuthorizationOpenshiftIoV1NamespacedRoleBindingWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAuthorizationOpenshiftIoV1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBinding>> PatchAuthorizationOpenshiftIoV1NamespacedRoleBindingWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleList>> ListAuthorizationOpenshiftIoV1NamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1Role>> CreateAuthorizationOpenshiftIoV1NamespacedRoleWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1Role body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1Role>> ReadAuthorizationOpenshiftIoV1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1Role>> ReplaceAuthorizationOpenshiftIoV1NamespacedRoleWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1Role body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAuthorizationOpenshiftIoV1NamespacedRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1Role>> PatchAuthorizationOpenshiftIoV1NamespacedRoleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview>> CreateAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SubjectRulesReview>> CreateAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SubjectRulesReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ResourceAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ResourceAccessReview>> CreateAuthorizationOpenshiftIoV1ResourceAccessReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ResourceAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBindingRestriction
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>> ListAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBindingRestriction
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>> CreateAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBindingRestriction body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingList>> ListAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBinding>> CreateAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleList>> ListAuthorizationOpenshiftIoV1RoleForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1Role>> CreateAuthorizationOpenshiftIoV1RoleForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1Role body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview>> CreateAuthorizationOpenshiftIoV1SelfSubjectRulesReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SubjectAccessReview>> CreateAuthorizationOpenshiftIoV1SubjectAccessReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SubjectRulesReview>> CreateAuthorizationOpenshiftIoV1SubjectRulesReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SubjectRulesReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBindingRestriction
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind RoleBindingRestriction
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBindingRestriction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBindingRestriction
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetAutoscalingAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAutoscalingV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscalerList>> ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> CreateAutoscalingV1HorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(Iok8sapiautoscalingv1HorizontalPodAutoscaler body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscalerList>> ListAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> CreateAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapiautoscalingv1HorizontalPodAutoscaler body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> ReadAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapiautoscalingv1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> PatchAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(Iok8sapiautoscalingv1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv1HorizontalPodAutoscaler>> PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAutoscalingV2beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerList>> ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> CreateAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscalerList>> ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified HorizontalPodAutoscaler
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiautoscalingv2beta1HorizontalPodAutoscaler>> PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of HorizontalPodAutoscaler
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind HorizontalPodAutoscaler
        /// </summary>
        /// <param name='name'>
        /// name of the HorizontalPodAutoscaler
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetBatchAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetBatchV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Job
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1JobList>> ListBatchV1JobForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> CreateBatchV1JobForAllNamespacesWithHttpMessagesAsync(Iok8sapibatchv1Job body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Job
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1JobList>> ListBatchV1NamespacedJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> CreateBatchV1NamespacedJobWithHttpMessagesAsync(Iok8sapibatchv1Job body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Job
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV1CollectionNamespacedJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Job
        /// </summary>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> ReadBatchV1NamespacedJobWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> ReplaceBatchV1NamespacedJobWithHttpMessagesAsync(Iok8sapibatchv1Job body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV1NamespacedJobWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> PatchBatchV1NamespacedJobWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Job
        /// </summary>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> ReadBatchV1NamespacedJobStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> ReplaceBatchV1NamespacedJobStatusWithHttpMessagesAsync(Iok8sapibatchv1Job body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Job
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1Job>> PatchBatchV1NamespacedJobStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Job
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1JobListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Job
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1NamespacedJobListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Job
        /// </summary>
        /// <param name='name'>
        /// name of the Job
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1NamespacedJobWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetBatchV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CronJob
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJobList>> ListBatchV1beta1CronJobForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> CreateBatchV1beta1CronJobForAllNamespacesWithHttpMessagesAsync(Iok8sapibatchv1beta1CronJob body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJobList>> ListBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> CreateBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(Iok8sapibatchv1beta1CronJob body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV1beta1CollectionNamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> ReadBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> ReplaceBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(Iok8sapibatchv1beta1CronJob body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> PatchBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> ReadBatchV1beta1NamespacedCronJobStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> ReplaceBatchV1beta1NamespacedCronJobStatusWithHttpMessagesAsync(Iok8sapibatchv1beta1CronJob body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv1beta1CronJob>> PatchBatchV1beta1NamespacedCronJobStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CronJob
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1beta1CronJobListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1beta1NamespacedCronJobListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV1beta1NamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetBatchV2alpha1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CronJob
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJobList>> ListBatchV2alpha1CronJobForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> CreateBatchV2alpha1CronJobForAllNamespacesWithHttpMessagesAsync(Iok8sapibatchv2alpha1CronJob body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJobList>> ListBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> CreateBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(Iok8sapibatchv2alpha1CronJob body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV2alpha1CollectionNamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> ReadBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> ReplaceBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(Iok8sapibatchv2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> PatchBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> ReadBatchV2alpha1NamespacedCronJobStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> ReplaceBatchV2alpha1NamespacedCronJobStatusWithHttpMessagesAsync(Iok8sapibatchv2alpha1CronJob body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified CronJob
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapibatchv2alpha1CronJob>> PatchBatchV2alpha1NamespacedCronJobStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CronJob
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV2alpha1CronJobListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CronJob
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV2alpha1NamespacedCronJobListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind CronJob
        /// </summary>
        /// <param name='name'>
        /// name of the CronJob
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBatchV2alpha1NamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetBuildOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetBuildOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind BuildConfig
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfigList>> ListBuildOpenshiftIoV1BuildConfigForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfig>> CreateBuildOpenshiftIoV1BuildConfigForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapibuildv1BuildConfig body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Build
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildList>> ListBuildOpenshiftIoV1BuildForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> CreateBuildOpenshiftIoV1BuildForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapibuildv1Build body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind BuildConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfigList>> ListBuildOpenshiftIoV1NamespacedBuildConfigWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfig>> CreateBuildOpenshiftIoV1NamespacedBuildConfigWithHttpMessagesAsync(Comgithubopenshiftapibuildv1BuildConfig body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of BuildConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified BuildConfig
        /// </summary>
        /// <param name='name'>
        /// name of the BuildConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfig>> ReadBuildOpenshiftIoV1NamespacedBuildConfigWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BuildConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfig>> ReplaceBuildOpenshiftIoV1NamespacedBuildConfigWithHttpMessagesAsync(Comgithubopenshiftapibuildv1BuildConfig body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BuildConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBuildOpenshiftIoV1NamespacedBuildConfigWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BuildConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfig>> PatchBuildOpenshiftIoV1NamespacedBuildConfigWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create instantiate of a BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BuildRequest
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> CreateBuildOpenshiftIoV1NamespacedBuildConfigInstantiateWithHttpMessagesAsync(Comgithubopenshiftapibuildv1BuildRequest body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to instantiatebinary of BuildConfig
        /// </summary>
        /// <param name='name'>
        /// name of the BinaryBuildRequestOptions
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='asFile'>
        /// asFile determines if the binary should be created as a file within
        /// the source rather than extracted as an archive
        /// </param>
        /// <param name='revisionauthorEmail'>
        /// revision.authorEmail of the source control user
        /// </param>
        /// <param name='revisionauthorName'>
        /// revision.authorName of the source control user
        /// </param>
        /// <param name='revisioncommit'>
        /// revision.commit is the value identifying a specific commit
        /// </param>
        /// <param name='revisioncommitterEmail'>
        /// revision.committerEmail of the source control user
        /// </param>
        /// <param name='revisioncommitterName'>
        /// revision.committerName of the source control user
        /// </param>
        /// <param name='revisionmessage'>
        /// revision.message is the description of a specific commit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigInstantiatebinaryWithHttpMessagesAsync(string name, string namespaceParameter, string asFile = default(string), string revisionauthorEmail = default(string), string revisionauthorName = default(string), string revisioncommit = default(string), string revisioncommitterEmail = default(string), string revisioncommitterName = default(string), string revisionmessage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to webhooks of BuildConfig
        /// </summary>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to webhooks of BuildConfig
        /// </summary>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectBuildOpenshiftIoV1PostNamespacedBuildConfigWebhooksWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Build
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildList>> ListBuildOpenshiftIoV1NamespacedBuildWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> CreateBuildOpenshiftIoV1NamespacedBuildWithHttpMessagesAsync(Comgithubopenshiftapibuildv1Build body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Build
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBuildOpenshiftIoV1CollectionNamespacedBuildWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Build
        /// </summary>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> ReadBuildOpenshiftIoV1NamespacedBuildWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> ReplaceBuildOpenshiftIoV1NamespacedBuildWithHttpMessagesAsync(Comgithubopenshiftapibuildv1Build body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteBuildOpenshiftIoV1NamespacedBuildWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> PatchBuildOpenshiftIoV1NamespacedBuildWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create clone of a Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BuildRequest
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildRequest>> CreateBuildOpenshiftIoV1NamespacedBuildCloneWithHttpMessagesAsync(Comgithubopenshiftapibuildv1BuildRequest body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace details of the specified Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> ReplaceBuildOpenshiftIoV1NamespacedBuildDetailsWithHttpMessagesAsync(Comgithubopenshiftapibuildv1Build body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read log of the specified Build
        /// </summary>
        /// <param name='name'>
        /// name of the BuildLog
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='container'>
        /// cointainer for which to stream logs. Defaults to only container if
        /// there is one container in the pod.
        /// </param>
        /// <param name='follow'>
        /// follow if true indicates that the build log should be streamed
        /// until the build terminates.
        /// </param>
        /// <param name='limitBytes'>
        /// limitBytes, If set, is the number of bytes to read from the server
        /// before terminating the log output. This may not display a
        /// complete final line of logging, and may return slightly more or
        /// slightly less than the specified limit.
        /// </param>
        /// <param name='nowait'>
        /// noWait if true causes the call to return immediately even if the
        /// build is not available yet. Otherwise the server will wait until
        /// the build has started.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='previous'>
        /// previous returns previous build logs. Defaults to false.
        /// </param>
        /// <param name='sinceSeconds'>
        /// sinceSeconds is a relative time in seconds before the current time
        /// from which to show logs. If this value precedes the time a pod
        /// was started, only logs since the pod start will be returned. If
        /// this value is in the future, no logs will be returned. Only one
        /// of sinceSeconds or sinceTime may be specified.
        /// </param>
        /// <param name='tailLines'>
        /// tailLines, If set, is the number of lines from the end of the logs
        /// to show. If not specified, logs are shown from the creation of
        /// the container or sinceSeconds or sinceTime
        /// </param>
        /// <param name='timestamps'>
        /// timestamps, If true, add an RFC3339 or RFC3339Nano timestamp at
        /// the beginning of every line of log output. Defaults to false.
        /// </param>
        /// <param name='version'>
        /// version of the build for which to view logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildLog>> ReadBuildOpenshiftIoV1NamespacedBuildLogWithHttpMessagesAsync(string name, string namespaceParameter, string container = default(string), bool? follow = default(bool?), int? limitBytes = default(int?), bool? nowait = default(bool?), string pretty = default(string), bool? previous = default(bool?), int? sinceSeconds = default(int?), int? tailLines = default(int?), bool? timestamps = default(bool?), int? version = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of BuildConfig
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBuildOpenshiftIoV1BuildConfigListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Build
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBuildOpenshiftIoV1BuildListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of BuildConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBuildOpenshiftIoV1NamespacedBuildConfigListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind BuildConfig
        /// </summary>
        /// <param name='name'>
        /// name of the BuildConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBuildOpenshiftIoV1NamespacedBuildConfigWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Build
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBuildOpenshiftIoV1NamespacedBuildListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Build
        /// </summary>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBuildOpenshiftIoV1NamespacedBuildWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetCertificatesAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetCertificatesV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind CertificateSigningRequest
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequestList>> ListCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> CreateCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(Iok8sapicertificatesv1beta1CertificateSigningRequest body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of CertificateSigningRequest
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCertificatesV1beta1CollectionCertificateSigningRequestWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified CertificateSigningRequest
        /// </summary>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> ReadCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> ReplaceCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(Iok8sapicertificatesv1beta1CertificateSigningRequest body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> PatchCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace approval of the specified CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> ReplaceCertificatesV1beta1CertificateSigningRequestApprovalWithHttpMessagesAsync(Iok8sapicertificatesv1beta1CertificateSigningRequest body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified CertificateSigningRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicertificatesv1beta1CertificateSigningRequest>> ReplaceCertificatesV1beta1CertificateSigningRequestStatusWithHttpMessagesAsync(Iok8sapicertificatesv1beta1CertificateSigningRequest body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of CertificateSigningRequest
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCertificatesV1beta1CertificateSigningRequestListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind CertificateSigningRequest
        /// </summary>
        /// <param name='name'>
        /// name of the CertificateSigningRequest
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchCertificatesV1beta1CertificateSigningRequestWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetEventsAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetEventsV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1EventList>> ListEventsV1beta1EventForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1Event>> CreateEventsV1beta1EventForAllNamespacesWithHttpMessagesAsync(Iok8sapieventsv1beta1Event body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1EventList>> ListEventsV1beta1NamespacedEventWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1Event>> CreateEventsV1beta1NamespacedEventWithHttpMessagesAsync(Iok8sapieventsv1beta1Event body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteEventsV1beta1CollectionNamespacedEventWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Event
        /// </summary>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1Event>> ReadEventsV1beta1NamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1Event>> ReplaceEventsV1beta1NamespacedEventWithHttpMessagesAsync(Iok8sapieventsv1beta1Event body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteEventsV1beta1NamespacedEventWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Event
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapieventsv1beta1Event>> PatchEventsV1beta1NamespacedEventWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchEventsV1beta1EventListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Event
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchEventsV1beta1NamespacedEventListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Event
        /// </summary>
        /// <param name='name'>
        /// name of the Event
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchEventsV1beta1NamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetExtensionsAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetExtensionsV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSetList>> ListExtensionsV1beta1DaemonSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> CreateExtensionsV1beta1DaemonSetForAllNamespacesWithHttpMessagesAsync(Iok8sapiextensionsv1beta1DaemonSet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DeploymentList>> ListExtensionsV1beta1DeploymentForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> CreateExtensionsV1beta1DeploymentForAllNamespacesWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Deployment body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Ingress
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1IngressList>> ListExtensionsV1beta1IngressForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> CreateExtensionsV1beta1IngressForAllNamespacesWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Ingress body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSetList>> ListExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> CreateExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiextensionsv1beta1DaemonSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionNamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> ReadExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> ReplaceExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapiextensionsv1beta1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> PatchExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> ReadExtensionsV1beta1NamespacedDaemonSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> ReplaceExtensionsV1beta1NamespacedDaemonSetStatusWithHttpMessagesAsync(Iok8sapiextensionsv1beta1DaemonSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified DaemonSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DaemonSet>> PatchExtensionsV1beta1NamespacedDaemonSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DeploymentList>> ListExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> CreateExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Deployment body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> ReadExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> ReplaceExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> PatchExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create rollback of a Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentRollback
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1DeploymentRollback>> CreateExtensionsV1beta1NamespacedDeploymentRollbackWithHttpMessagesAsync(Iok8sapiextensionsv1beta1DeploymentRollback body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReadExtensionsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReplaceExtensionsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> PatchExtensionsV1beta1NamespacedDeploymentScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> ReadExtensionsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> ReplaceExtensionsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Deployment body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Deployment
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Deployment>> PatchExtensionsV1beta1NamespacedDeploymentStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Ingress
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1IngressList>> ListExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> CreateExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Ingress body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Ingress
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionNamespacedIngressWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Ingress
        /// </summary>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> ReadExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> ReplaceExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> PatchExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Ingress
        /// </summary>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> ReadExtensionsV1beta1NamespacedIngressStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> ReplaceExtensionsV1beta1NamespacedIngressStatusWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Ingress body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Ingress
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Ingress>> PatchExtensionsV1beta1NamespacedIngressStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicyList>> ListExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicy>> CreateExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapiextensionsv1beta1NetworkPolicy body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified NetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicy>> ReadExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicy>> ReplaceExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapiextensionsv1beta1NetworkPolicy body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicy>> PatchExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSetList>> ListExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> CreateExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiextensionsv1beta1ReplicaSet body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionNamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> ReadExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> ReplaceExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapiextensionsv1beta1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> PatchExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReadExtensionsV1beta1NamespacedReplicaSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReplaceExtensionsV1beta1NamespacedReplicaSetScaleWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> PatchExtensionsV1beta1NamespacedReplicaSetScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> ReadExtensionsV1beta1NamespacedReplicaSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> ReplaceExtensionsV1beta1NamespacedReplicaSetStatusWithHttpMessagesAsync(Iok8sapiextensionsv1beta1ReplicaSet body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> PatchExtensionsV1beta1NamespacedReplicaSetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicyList>> ListExtensionsV1beta1NetworkPolicyForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1NetworkPolicy>> CreateExtensionsV1beta1NetworkPolicyForAllNamespacesWithHttpMessagesAsync(Iok8sapiextensionsv1beta1NetworkPolicy body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodSecurityPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1PodSecurityPolicyList>> ListExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1PodSecurityPolicy>> CreateExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(Iok8sapiextensionsv1beta1PodSecurityPolicy body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PodSecurityPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1CollectionPodSecurityPolicyWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PodSecurityPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1PodSecurityPolicy>> ReadExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1PodSecurityPolicy>> ReplaceExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(Iok8sapiextensionsv1beta1PodSecurityPolicy body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PodSecurityPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1PodSecurityPolicy>> PatchExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSetList>> ListExtensionsV1beta1ReplicaSetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ReplicaSet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1ReplicaSet>> CreateExtensionsV1beta1ReplicaSetForAllNamespacesWithHttpMessagesAsync(Iok8sapiextensionsv1beta1ReplicaSet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1DaemonSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1DeploymentListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Ingress
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1IngressListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DaemonSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedDaemonSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind DaemonSet
        /// </summary>
        /// <param name='name'>
        /// name of the DaemonSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Deployment
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedDeploymentListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Deployment
        /// </summary>
        /// <param name='name'>
        /// name of the Deployment
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Ingress
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedIngressListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Ingress
        /// </summary>
        /// <param name='name'>
        /// name of the Ingress
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedIngressWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedNetworkPolicyListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind NetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedReplicaSetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ReplicaSet
        /// </summary>
        /// <param name='name'>
        /// name of the ReplicaSet
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of NetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodSecurityPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1PodSecurityPolicyListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PodSecurityPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the PodSecurityPolicy
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1PodSecurityPolicyWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ReplicaSet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchExtensionsV1beta1ReplicaSetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetImageOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetImageOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Image
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageList>> ListImageOpenshiftIoV1ImageWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Image
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1Image>> CreateImageOpenshiftIoV1ImageWithHttpMessagesAsync(Comgithubopenshiftapiimagev1Image body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Image
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteImageOpenshiftIoV1CollectionImageWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Image
        /// </summary>
        /// <param name='name'>
        /// name of the Image
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1Image>> ReadImageOpenshiftIoV1ImageWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Image
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Image
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1Image>> ReplaceImageOpenshiftIoV1ImageWithHttpMessagesAsync(Comgithubopenshiftapiimagev1Image body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an Image
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Image
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteImageOpenshiftIoV1ImageWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Image
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Image
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1Image>> PatchImageOpenshiftIoV1ImageWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageSignature
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageSignature>> CreateImageOpenshiftIoV1ImageSignatureWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageSignature body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an ImageSignature
        /// </summary>
        /// <param name='name'>
        /// name of the ImageSignature
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteImageOpenshiftIoV1ImageSignatureWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamImport
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamImport>> CreateImageOpenshiftIoV1ImageStreamImportForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamImport body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamMapping
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamMapping>> CreateImageOpenshiftIoV1ImageStreamMappingForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamMapping body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ImageStream
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamList>> ListImageOpenshiftIoV1ImageStreamForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> CreateImageOpenshiftIoV1ImageStreamForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStream body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ImageStreamTag
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTagList>> ListImageOpenshiftIoV1ImageStreamTagForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamTag
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTag>> CreateImageOpenshiftIoV1ImageStreamTagForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamTag body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ImageStreamImage
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStreamImage
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamImage>> ReadImageOpenshiftIoV1NamespacedImageStreamImageWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamImport
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamImport>> CreateImageOpenshiftIoV1NamespacedImageStreamImportWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamImport body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamMapping
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamMapping>> CreateImageOpenshiftIoV1NamespacedImageStreamMappingWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamMapping body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ImageStream
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamList>> ListImageOpenshiftIoV1NamespacedImageStreamWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> CreateImageOpenshiftIoV1NamespacedImageStreamWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStream body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ImageStream
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteImageOpenshiftIoV1CollectionNamespacedImageStreamWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ImageStream
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> ReadImageOpenshiftIoV1NamespacedImageStreamWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> ReplaceImageOpenshiftIoV1NamespacedImageStreamWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStream body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteImageOpenshiftIoV1NamespacedImageStreamWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> PatchImageOpenshiftIoV1NamespacedImageStreamWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read secrets of the specified ImageStream
        /// </summary>
        /// <param name='name'>
        /// name of the SecretList
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1SecretList>> ReadImageOpenshiftIoV1NamespacedImageStreamSecretsWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ImageStream
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> ReadImageOpenshiftIoV1NamespacedImageStreamStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> ReplaceImageOpenshiftIoV1NamespacedImageStreamStatusWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStream body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> PatchImageOpenshiftIoV1NamespacedImageStreamStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ImageStreamTag
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTagList>> ListImageOpenshiftIoV1NamespacedImageStreamTagWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamTag
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTag>> CreateImageOpenshiftIoV1NamespacedImageStreamTagWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamTag body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ImageStreamTag
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStreamTag
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTag>> ReadImageOpenshiftIoV1NamespacedImageStreamTagWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ImageStreamTag
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStreamTag
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTag>> ReplaceImageOpenshiftIoV1NamespacedImageStreamTagWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamTag body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an ImageStreamTag
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStreamTag
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteImageOpenshiftIoV1NamespacedImageStreamTagWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ImageStreamTag
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStreamTag
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTag>> PatchImageOpenshiftIoV1NamespacedImageStreamTagWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Image
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchImageOpenshiftIoV1ImageListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Image
        /// </summary>
        /// <param name='name'>
        /// name of the Image
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchImageOpenshiftIoV1ImageWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ImageStream
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchImageOpenshiftIoV1ImageStreamListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ImageStream
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchImageOpenshiftIoV1NamespacedImageStreamListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ImageStream
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchImageOpenshiftIoV1NamespacedImageStreamWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetNetworkOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetNetworkOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterNetwork
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1ClusterNetworkList>> ListNetworkOpenshiftIoV1ClusterNetworkWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterNetwork
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1ClusterNetwork>> CreateNetworkOpenshiftIoV1ClusterNetworkWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1ClusterNetwork body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterNetwork
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkOpenshiftIoV1CollectionClusterNetworkWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterNetwork
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterNetwork
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1ClusterNetwork>> ReadNetworkOpenshiftIoV1ClusterNetworkWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterNetwork
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterNetwork
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1ClusterNetwork>> ReplaceNetworkOpenshiftIoV1ClusterNetworkWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1ClusterNetwork body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterNetwork
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterNetwork
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkOpenshiftIoV1ClusterNetworkWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterNetwork
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterNetwork
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1ClusterNetwork>> PatchNetworkOpenshiftIoV1ClusterNetworkWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind EgressNetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>> ListNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an EgressNetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicy>> CreateNetworkOpenshiftIoV1EgressNetworkPolicyForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1EgressNetworkPolicy body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind HostSubnet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1HostSubnetList>> ListNetworkOpenshiftIoV1HostSubnetWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a HostSubnet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1HostSubnet>> CreateNetworkOpenshiftIoV1HostSubnetWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1HostSubnet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of HostSubnet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkOpenshiftIoV1CollectionHostSubnetWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified HostSubnet
        /// </summary>
        /// <param name='name'>
        /// name of the HostSubnet
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1HostSubnet>> ReadNetworkOpenshiftIoV1HostSubnetWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified HostSubnet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HostSubnet
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1HostSubnet>> ReplaceNetworkOpenshiftIoV1HostSubnetWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1HostSubnet body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a HostSubnet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HostSubnet
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkOpenshiftIoV1HostSubnetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified HostSubnet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HostSubnet
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1HostSubnet>> PatchNetworkOpenshiftIoV1HostSubnetWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind EgressNetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>> ListNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an EgressNetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicy>> CreateNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1EgressNetworkPolicy body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of EgressNetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkOpenshiftIoV1CollectionNamespacedEgressNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified EgressNetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the EgressNetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicy>> ReadNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified EgressNetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the EgressNetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicy>> ReplaceNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1EgressNetworkPolicy body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an EgressNetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the EgressNetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified EgressNetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the EgressNetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicy>> PatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind NetNamespace
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1NetNamespaceList>> ListNetworkOpenshiftIoV1NetNamespaceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a NetNamespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1NetNamespace>> CreateNetworkOpenshiftIoV1NetNamespaceWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1NetNamespace body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of NetNamespace
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkOpenshiftIoV1CollectionNetNamespaceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified NetNamespace
        /// </summary>
        /// <param name='name'>
        /// name of the NetNamespace
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1NetNamespace>> ReadNetworkOpenshiftIoV1NetNamespaceWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified NetNamespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetNamespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1NetNamespace>> ReplaceNetworkOpenshiftIoV1NetNamespaceWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1NetNamespace body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a NetNamespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetNamespace
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkOpenshiftIoV1NetNamespaceWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified NetNamespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetNamespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1NetNamespace>> PatchNetworkOpenshiftIoV1NetNamespaceWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterNetwork
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkOpenshiftIoV1ClusterNetworkListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterNetwork
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterNetwork
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkOpenshiftIoV1ClusterNetworkWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of EgressNetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkOpenshiftIoV1EgressNetworkPolicyListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of HostSubnet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkOpenshiftIoV1HostSubnetListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind HostSubnet
        /// </summary>
        /// <param name='name'>
        /// name of the HostSubnet
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkOpenshiftIoV1HostSubnetWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of EgressNetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind EgressNetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the EgressNetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkOpenshiftIoV1NamespacedEgressNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of NetNamespace
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkOpenshiftIoV1NetNamespaceListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind NetNamespace
        /// </summary>
        /// <param name='name'>
        /// name of the NetNamespace
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkOpenshiftIoV1NetNamespaceWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetNetworkingAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetNetworkingV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicyList>> ListNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicy>> CreateNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapinetworkingv1NetworkPolicy body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkingV1CollectionNamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified NetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicy>> ReadNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicy>> ReplaceNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapinetworkingv1NetworkPolicy body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicy>> PatchNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicyList>> ListNetworkingV1NetworkPolicyForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a NetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapinetworkingv1NetworkPolicy>> CreateNetworkingV1NetworkPolicyForAllNamespacesWithHttpMessagesAsync(Iok8sapinetworkingv1NetworkPolicy body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of NetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkingV1NamespacedNetworkPolicyListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind NetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the NetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkingV1NamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of NetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetworkingV1NetworkPolicyListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetOauthOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetOauthOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind OAuthAccessToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAccessTokenList>> ListOauthOpenshiftIoV1OAuthAccessTokenWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an OAuthAccessToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAccessToken>> CreateOauthOpenshiftIoV1OAuthAccessTokenWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthAccessToken body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of OAuthAccessToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOauthOpenshiftIoV1CollectionOAuthAccessTokenWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified OAuthAccessToken
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthAccessToken
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAccessToken>> ReadOauthOpenshiftIoV1OAuthAccessTokenWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified OAuthAccessToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAccessToken
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAccessToken>> ReplaceOauthOpenshiftIoV1OAuthAccessTokenWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthAccessToken body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an OAuthAccessToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAccessToken
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOauthOpenshiftIoV1OAuthAccessTokenWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified OAuthAccessToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAccessToken
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAccessToken>> PatchOauthOpenshiftIoV1OAuthAccessTokenWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind OAuthAuthorizeToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAuthorizeTokenList>> ListOauthOpenshiftIoV1OAuthAuthorizeTokenWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an OAuthAuthorizeToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAuthorizeToken>> CreateOauthOpenshiftIoV1OAuthAuthorizeTokenWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthAuthorizeToken body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of OAuthAuthorizeToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOauthOpenshiftIoV1CollectionOAuthAuthorizeTokenWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified OAuthAuthorizeToken
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthAuthorizeToken
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAuthorizeToken>> ReadOauthOpenshiftIoV1OAuthAuthorizeTokenWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified OAuthAuthorizeToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAuthorizeToken
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAuthorizeToken>> ReplaceOauthOpenshiftIoV1OAuthAuthorizeTokenWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthAuthorizeToken body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an OAuthAuthorizeToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAuthorizeToken
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOauthOpenshiftIoV1OAuthAuthorizeTokenWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified OAuthAuthorizeToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAuthorizeToken
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAuthorizeToken>> PatchOauthOpenshiftIoV1OAuthAuthorizeTokenWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind OAuthClientAuthorization
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientAuthorizationList>> ListOauthOpenshiftIoV1OAuthClientAuthorizationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an OAuthClientAuthorization
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientAuthorization>> CreateOauthOpenshiftIoV1OAuthClientAuthorizationWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthClientAuthorization body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of OAuthClientAuthorization
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOauthOpenshiftIoV1CollectionOAuthClientAuthorizationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified OAuthClientAuthorization
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthClientAuthorization
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientAuthorization>> ReadOauthOpenshiftIoV1OAuthClientAuthorizationWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified OAuthClientAuthorization
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClientAuthorization
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientAuthorization>> ReplaceOauthOpenshiftIoV1OAuthClientAuthorizationWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthClientAuthorization body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an OAuthClientAuthorization
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClientAuthorization
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOauthOpenshiftIoV1OAuthClientAuthorizationWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified OAuthClientAuthorization
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClientAuthorization
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientAuthorization>> PatchOauthOpenshiftIoV1OAuthClientAuthorizationWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind OAuthClient
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientList>> ListOauthOpenshiftIoV1OAuthClientWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an OAuthClient
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClient>> CreateOauthOpenshiftIoV1OAuthClientWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthClient body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of OAuthClient
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOauthOpenshiftIoV1CollectionOAuthClientWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified OAuthClient
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthClient
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClient>> ReadOauthOpenshiftIoV1OAuthClientWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified OAuthClient
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClient
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClient>> ReplaceOauthOpenshiftIoV1OAuthClientWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthClient body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an OAuthClient
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClient
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOauthOpenshiftIoV1OAuthClientWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified OAuthClient
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClient
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClient>> PatchOauthOpenshiftIoV1OAuthClientWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of OAuthAccessToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOauthOpenshiftIoV1OAuthAccessTokenListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind OAuthAccessToken
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthAccessToken
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOauthOpenshiftIoV1OAuthAccessTokenWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of OAuthAuthorizeToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOauthOpenshiftIoV1OAuthAuthorizeTokenListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind OAuthAuthorizeToken
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthAuthorizeToken
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOauthOpenshiftIoV1OAuthAuthorizeTokenWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of OAuthClientAuthorization
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOauthOpenshiftIoV1OAuthClientAuthorizationListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind OAuthClientAuthorization
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthClientAuthorization
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOauthOpenshiftIoV1OAuthClientAuthorizationWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of OAuthClient
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOauthOpenshiftIoV1OAuthClientListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind OAuthClient
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthClient
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOauthOpenshiftIoV1OAuthClientWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetPolicyAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetPolicyV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodDisruptionBudget
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudgetList>> ListPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> CreatePolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(Iok8sapipolicyv1beta1PodDisruptionBudget body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of PodDisruptionBudget
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified PodDisruptionBudget
        /// </summary>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> ReadPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> ReplacePolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(Iok8sapipolicyv1beta1PodDisruptionBudget body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeletePolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> PatchPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified PodDisruptionBudget
        /// </summary>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(Iok8sapipolicyv1beta1PodDisruptionBudget body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind PodDisruptionBudget
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudgetList>> ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodDisruptionBudget
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapipolicyv1beta1PodDisruptionBudget>> CreatePolicyV1beta1PodDisruptionBudgetForAllNamespacesWithHttpMessagesAsync(Iok8sapipolicyv1beta1PodDisruptionBudget body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodDisruptionBudget
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchPolicyV1beta1NamespacedPodDisruptionBudgetListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind PodDisruptionBudget
        /// </summary>
        /// <param name='name'>
        /// name of the PodDisruptionBudget
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchPolicyV1beta1NamespacedPodDisruptionBudgetWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of PodDisruptionBudget
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetProjectOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetProjectOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ProjectRequest
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> ListProjectOpenshiftIoV1ProjectRequestWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ProjectRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1ProjectRequest>> CreateProjectOpenshiftIoV1ProjectRequestWithHttpMessagesAsync(Comgithubopenshiftapiprojectv1ProjectRequest body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Project
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1ProjectList>> ListProjectOpenshiftIoV1ProjectWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Project
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1Project>> CreateProjectOpenshiftIoV1ProjectWithHttpMessagesAsync(Comgithubopenshiftapiprojectv1Project body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Project
        /// </summary>
        /// <param name='name'>
        /// name of the Project
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1Project>> ReadProjectOpenshiftIoV1ProjectWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Project
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Project
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1Project>> ReplaceProjectOpenshiftIoV1ProjectWithHttpMessagesAsync(Comgithubopenshiftapiprojectv1Project body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Project
        /// </summary>
        /// <param name='name'>
        /// name of the Project
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteProjectOpenshiftIoV1ProjectWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Project
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Project
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1Project>> PatchProjectOpenshiftIoV1ProjectWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Project
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchProjectOpenshiftIoV1ProjectListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Project
        /// </summary>
        /// <param name='name'>
        /// name of the Project
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchProjectOpenshiftIoV1ProjectWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetQuotaOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetQuotaOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind AppliedClusterResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>> ListQuotaOpenshiftIoV1AppliedClusterResourceQuotaForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuotaList>> ListQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> CreateQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpMessagesAsync(Comgithubopenshiftapiquotav1ClusterResourceQuota body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteQuotaOpenshiftIoV1CollectionClusterResourceQuotaWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> ReadQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> ReplaceQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpMessagesAsync(Comgithubopenshiftapiquotav1ClusterResourceQuota body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> PatchQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ClusterResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> ReadQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> ReplaceQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpMessagesAsync(Comgithubopenshiftapiquotav1ClusterResourceQuota body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> PatchQuotaOpenshiftIoV1ClusterResourceQuotaStatusWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind AppliedClusterResourceQuota
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>> ListQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified AppliedClusterResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the AppliedClusterResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1AppliedClusterResourceQuota>> ReadQuotaOpenshiftIoV1NamespacedAppliedClusterResourceQuotaWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchQuotaOpenshiftIoV1ClusterResourceQuotaListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchQuotaOpenshiftIoV1ClusterResourceQuotaWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetRbacAuthorizationAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetRbacAuthorizationV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleBindingList>> ListRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleBinding>> CreateRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1ClusterRoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1CollectionClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleBinding>> ReadRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleBinding>> ReplaceRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1ClusterRoleBinding body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleBinding>> PatchRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRoleList>> ListRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRole>> CreateRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(Iok8sapirbacv1ClusterRole body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1CollectionClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRole>> ReadRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRole>> ReplaceRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(Iok8sapirbacv1ClusterRole body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1ClusterRole>> PatchRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBindingList>> ListRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBinding>> CreateRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1RoleBinding body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBinding>> ReadRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBinding>> ReplaceRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBinding>> PatchRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleList>> ListRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1Role>> CreateRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(Iok8sapirbacv1Role body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1CollectionNamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1Role>> ReadRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1Role>> ReplaceRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(Iok8sapirbacv1Role body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1Role>> PatchRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBindingList>> ListRbacAuthorizationV1RoleBindingForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleBinding>> CreateRbacAuthorizationV1RoleBindingForAllNamespacesWithHttpMessagesAsync(Iok8sapirbacv1RoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1RoleList>> ListRbacAuthorizationV1RoleForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1Role>> CreateRbacAuthorizationV1RoleForAllNamespacesWithHttpMessagesAsync(Iok8sapirbacv1Role body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1ClusterRoleBindingListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1ClusterRoleBindingWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1ClusterRoleListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1ClusterRoleWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1NamespacedRoleBindingListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1NamespacedRoleListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1RoleBindingListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1RoleListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetRbacAuthorizationV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleBindingList>> ListRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleBinding>> CreateRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1beta1ClusterRoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleBinding>> ReadRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleBinding>> ReplaceRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1beta1ClusterRoleBinding body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleBinding>> PatchRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRoleList>> ListRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRole>> CreateRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(Iok8sapirbacv1beta1ClusterRole body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1CollectionClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRole>> ReadRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRole>> ReplaceRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(Iok8sapirbacv1beta1ClusterRole body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1ClusterRole>> PatchRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBindingList>> ListRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBinding>> CreateRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1beta1RoleBinding body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBinding>> ReadRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBinding>> ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapirbacv1beta1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBinding>> PatchRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleList>> ListRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1Role>> CreateRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(Iok8sapirbacv1beta1Role body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1Role>> ReadRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1Role>> ReplaceRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(Iok8sapirbacv1beta1Role body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1Role>> PatchRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBindingList>> ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleBinding>> CreateRbacAuthorizationV1beta1RoleBindingForAllNamespacesWithHttpMessagesAsync(Iok8sapirbacv1beta1RoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1RoleList>> ListRbacAuthorizationV1beta1RoleForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapirbacv1beta1Role>> CreateRbacAuthorizationV1beta1RoleForAllNamespacesWithHttpMessagesAsync(Iok8sapirbacv1beta1Role body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1ClusterRoleBindingListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1ClusterRoleBindingWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1ClusterRoleListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1ClusterRoleWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1NamespacedRoleBindingListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1NamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1NamespacedRoleListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1NamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRbacAuthorizationV1beta1RoleListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetRouteOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetRouteOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Route
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1RouteList>> ListRouteOpenshiftIoV1NamespacedRouteWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> CreateRouteOpenshiftIoV1NamespacedRouteWithHttpMessagesAsync(Comgithubopenshiftapiroutev1Route body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Route
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRouteOpenshiftIoV1CollectionNamespacedRouteWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Route
        /// </summary>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> ReadRouteOpenshiftIoV1NamespacedRouteWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> ReplaceRouteOpenshiftIoV1NamespacedRouteWithHttpMessagesAsync(Comgithubopenshiftapiroutev1Route body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteRouteOpenshiftIoV1NamespacedRouteWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> PatchRouteOpenshiftIoV1NamespacedRouteWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Route
        /// </summary>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> ReadRouteOpenshiftIoV1NamespacedRouteStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> ReplaceRouteOpenshiftIoV1NamespacedRouteStatusWithHttpMessagesAsync(Comgithubopenshiftapiroutev1Route body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> PatchRouteOpenshiftIoV1NamespacedRouteStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Route
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1RouteList>> ListRouteOpenshiftIoV1RouteForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> CreateRouteOpenshiftIoV1RouteForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiroutev1Route body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Route
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRouteOpenshiftIoV1NamespacedRouteListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Route
        /// </summary>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRouteOpenshiftIoV1NamespacedRouteWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Route
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRouteOpenshiftIoV1RouteListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetSecurityOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetSecurityOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicyReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicyReview>> CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReviewWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicyReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicySelfSubjectReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview>> CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReviewWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicySubjectReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview>> CreateSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReviewWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicyReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicyReview>> CreateSecurityOpenshiftIoV1PodSecurityPolicyReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicyReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicySelfSubjectReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview>> CreateSecurityOpenshiftIoV1PodSecurityPolicySelfSubjectReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicySubjectReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview>> CreateSecurityOpenshiftIoV1PodSecurityPolicySubjectReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind SecurityContextConstraints
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1SecurityContextConstraintsList>> ListSecurityOpenshiftIoV1SecurityContextConstraintsWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create SecurityContextConstraints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1SecurityContextConstraints>> CreateSecurityOpenshiftIoV1SecurityContextConstraintsWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1SecurityContextConstraints body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of SecurityContextConstraints
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteSecurityOpenshiftIoV1CollectionSecurityContextConstraintsWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified SecurityContextConstraints
        /// </summary>
        /// <param name='name'>
        /// name of the SecurityContextConstraints
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1SecurityContextConstraints>> ReadSecurityOpenshiftIoV1SecurityContextConstraintsWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified SecurityContextConstraints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the SecurityContextConstraints
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1SecurityContextConstraints>> ReplaceSecurityOpenshiftIoV1SecurityContextConstraintsWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1SecurityContextConstraints body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete SecurityContextConstraints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the SecurityContextConstraints
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteSecurityOpenshiftIoV1SecurityContextConstraintsWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified SecurityContextConstraints
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the SecurityContextConstraints
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1SecurityContextConstraints>> PatchSecurityOpenshiftIoV1SecurityContextConstraintsWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of SecurityContextConstraints
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchSecurityOpenshiftIoV1SecurityContextConstraintsListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind SecurityContextConstraints
        /// </summary>
        /// <param name='name'>
        /// name of the SecurityContextConstraints
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchSecurityOpenshiftIoV1SecurityContextConstraintsWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetStorageAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetStorageV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1StorageClassList>> ListStorageV1StorageClassWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1StorageClass>> CreateStorageV1StorageClassWithHttpMessagesAsync(Iok8sapistoragev1StorageClass body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1CollectionStorageClassWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified StorageClass
        /// </summary>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1StorageClass>> ReadStorageV1StorageClassWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1StorageClass>> ReplaceStorageV1StorageClassWithHttpMessagesAsync(Iok8sapistoragev1StorageClass body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1StorageClassWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1StorageClass>> PatchStorageV1StorageClassWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1StorageClassListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind StorageClass
        /// </summary>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1StorageClassWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetStorageV1beta1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1StorageClassList>> ListStorageV1beta1StorageClassWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1StorageClass>> CreateStorageV1beta1StorageClassWithHttpMessagesAsync(Iok8sapistoragev1beta1StorageClass body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1beta1CollectionStorageClassWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified StorageClass
        /// </summary>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1StorageClass>> ReadStorageV1beta1StorageClassWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1StorageClass>> ReplaceStorageV1beta1StorageClassWithHttpMessagesAsync(Iok8sapistoragev1beta1StorageClass body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteStorageV1beta1StorageClassWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified StorageClass
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapistoragev1beta1StorageClass>> PatchStorageV1beta1StorageClassWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of StorageClass
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1beta1StorageClassListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind StorageClass
        /// </summary>
        /// <param name='name'>
        /// name of the StorageClass
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchStorageV1beta1StorageClassWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetTemplateOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetTemplateOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind BrokerTemplateInstance
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1BrokerTemplateInstanceList>> ListTemplateOpenshiftIoV1BrokerTemplateInstanceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a BrokerTemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1BrokerTemplateInstance>> CreateTemplateOpenshiftIoV1BrokerTemplateInstanceWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1BrokerTemplateInstance body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of BrokerTemplateInstance
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteTemplateOpenshiftIoV1CollectionBrokerTemplateInstanceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified BrokerTemplateInstance
        /// </summary>
        /// <param name='name'>
        /// name of the BrokerTemplateInstance
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1BrokerTemplateInstance>> ReadTemplateOpenshiftIoV1BrokerTemplateInstanceWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified BrokerTemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BrokerTemplateInstance
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1BrokerTemplateInstance>> ReplaceTemplateOpenshiftIoV1BrokerTemplateInstanceWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1BrokerTemplateInstance body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a BrokerTemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BrokerTemplateInstance
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteTemplateOpenshiftIoV1BrokerTemplateInstanceWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified BrokerTemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BrokerTemplateInstance
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1BrokerTemplateInstance>> PatchTemplateOpenshiftIoV1BrokerTemplateInstanceWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> CreateNamespacedProcessedTemplateV1WithHttpMessagesAsync(Comgithubopenshiftapitemplatev1Template body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind TemplateInstance
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateInstanceList>> ListTemplateOpenshiftIoV1NamespacedTemplateInstanceWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a TemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateInstance>> CreateTemplateOpenshiftIoV1NamespacedTemplateInstanceWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1TemplateInstance body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of TemplateInstance
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateInstanceWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified TemplateInstance
        /// </summary>
        /// <param name='name'>
        /// name of the TemplateInstance
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateInstance>> ReadTemplateOpenshiftIoV1NamespacedTemplateInstanceWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified TemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the TemplateInstance
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateInstance>> ReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1TemplateInstance body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a TemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the TemplateInstance
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteTemplateOpenshiftIoV1NamespacedTemplateInstanceWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified TemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the TemplateInstance
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateInstance>> PatchTemplateOpenshiftIoV1NamespacedTemplateInstanceWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified TemplateInstance
        /// </summary>
        /// <param name='name'>
        /// name of the TemplateInstance
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateInstance>> ReadTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified TemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the TemplateInstance
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateInstance>> ReplaceTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1TemplateInstance body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified TemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the TemplateInstance
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateInstance>> PatchTemplateOpenshiftIoV1NamespacedTemplateInstanceStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Template
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateList>> ListTemplateOpenshiftIoV1NamespacedTemplateWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> CreateTemplateOpenshiftIoV1NamespacedTemplateWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1Template body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Template
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteTemplateOpenshiftIoV1CollectionNamespacedTemplateWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Template
        /// </summary>
        /// <param name='name'>
        /// name of the Template
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> ReadTemplateOpenshiftIoV1NamespacedTemplateWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Template
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> ReplaceTemplateOpenshiftIoV1NamespacedTemplateWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1Template body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Template
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteTemplateOpenshiftIoV1NamespacedTemplateWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Template
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> PatchTemplateOpenshiftIoV1NamespacedTemplateWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> CreateProcessedTemplateForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1Template body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind TemplateInstance
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateInstanceList>> ListTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a TemplateInstance
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateInstance>> CreateTemplateOpenshiftIoV1TemplateInstanceForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1TemplateInstance body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Template
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateList>> ListTemplateOpenshiftIoV1TemplateForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> CreateTemplateOpenshiftIoV1TemplateForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1Template body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of BrokerTemplateInstance
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchTemplateOpenshiftIoV1BrokerTemplateInstanceListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind BrokerTemplateInstance
        /// </summary>
        /// <param name='name'>
        /// name of the BrokerTemplateInstance
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchTemplateOpenshiftIoV1BrokerTemplateInstanceWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of TemplateInstance
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchTemplateOpenshiftIoV1NamespacedTemplateInstanceListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind TemplateInstance
        /// </summary>
        /// <param name='name'>
        /// name of the TemplateInstance
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchTemplateOpenshiftIoV1NamespacedTemplateInstanceWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Template
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchTemplateOpenshiftIoV1NamespacedTemplateListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Template
        /// </summary>
        /// <param name='name'>
        /// name of the Template
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchTemplateOpenshiftIoV1NamespacedTemplateWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of TemplateInstance
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchTemplateOpenshiftIoV1TemplateInstanceListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Template
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchTemplateOpenshiftIoV1TemplateListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get information of a group
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIGroup>> GetUserOpenshiftIoAPIGroupWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetUserOpenshiftIoV1APIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Group
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1GroupList>> ListUserOpenshiftIoV1GroupWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Group
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Group>> CreateUserOpenshiftIoV1GroupWithHttpMessagesAsync(Comgithubopenshiftapiuserv1Group body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Group
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteUserOpenshiftIoV1CollectionGroupWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Group
        /// </summary>
        /// <param name='name'>
        /// name of the Group
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Group>> ReadUserOpenshiftIoV1GroupWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Group
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Group
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Group>> ReplaceUserOpenshiftIoV1GroupWithHttpMessagesAsync(Comgithubopenshiftapiuserv1Group body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Group
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Group
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteUserOpenshiftIoV1GroupWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Group
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Group
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Group>> PatchUserOpenshiftIoV1GroupWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Identity
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1IdentityList>> ListUserOpenshiftIoV1IdentityWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Identity
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Identity>> CreateUserOpenshiftIoV1IdentityWithHttpMessagesAsync(Comgithubopenshiftapiuserv1Identity body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Identity
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteUserOpenshiftIoV1CollectionIdentityWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Identity
        /// </summary>
        /// <param name='name'>
        /// name of the Identity
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Identity>> ReadUserOpenshiftIoV1IdentityWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Identity
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Identity
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Identity>> ReplaceUserOpenshiftIoV1IdentityWithHttpMessagesAsync(Comgithubopenshiftapiuserv1Identity body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an Identity
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Identity
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteUserOpenshiftIoV1IdentityWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Identity
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Identity
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Identity>> PatchUserOpenshiftIoV1IdentityWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an UserIdentityMapping
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1UserIdentityMapping>> CreateUserOpenshiftIoV1UserIdentityMappingWithHttpMessagesAsync(Comgithubopenshiftapiuserv1UserIdentityMapping body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified UserIdentityMapping
        /// </summary>
        /// <param name='name'>
        /// name of the UserIdentityMapping
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1UserIdentityMapping>> ReadUserOpenshiftIoV1UserIdentityMappingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified UserIdentityMapping
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the UserIdentityMapping
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1UserIdentityMapping>> ReplaceUserOpenshiftIoV1UserIdentityMappingWithHttpMessagesAsync(Comgithubopenshiftapiuserv1UserIdentityMapping body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an UserIdentityMapping
        /// </summary>
        /// <param name='name'>
        /// name of the UserIdentityMapping
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteUserOpenshiftIoV1UserIdentityMappingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified UserIdentityMapping
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the UserIdentityMapping
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1UserIdentityMapping>> PatchUserOpenshiftIoV1UserIdentityMappingWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind User
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1UserList>> ListUserOpenshiftIoV1UserWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an User
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1User>> CreateUserOpenshiftIoV1UserWithHttpMessagesAsync(Comgithubopenshiftapiuserv1User body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of User
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteUserOpenshiftIoV1CollectionUserWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified User
        /// </summary>
        /// <param name='name'>
        /// name of the User
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1User>> ReadUserOpenshiftIoV1UserWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified User
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the User
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1User>> ReplaceUserOpenshiftIoV1UserWithHttpMessagesAsync(Comgithubopenshiftapiuserv1User body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an User
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the User
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteUserOpenshiftIoV1UserWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified User
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the User
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1User>> PatchUserOpenshiftIoV1UserWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Group
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchUserOpenshiftIoV1GroupListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Group
        /// </summary>
        /// <param name='name'>
        /// name of the Group
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchUserOpenshiftIoV1GroupWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Identity
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchUserOpenshiftIoV1IdentityListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Identity
        /// </summary>
        /// <param name='name'>
        /// name of the Identity
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchUserOpenshiftIoV1IdentityWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of User
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchUserOpenshiftIoV1UserListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind User
        /// </summary>
        /// <param name='name'>
        /// name of the User
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchUserOpenshiftIoV1UserWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available API versions
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIVersions>> GetLegacyAPIVersionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get available resources
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1APIResourceList>> GetAPIResourcesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind AppliedClusterResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>> ListAppliedClusterResourceQuotaForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind BuildConfig
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfigList>> ListBuildConfigForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfig>> CreateBuildConfigForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapibuildv1BuildConfig body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Build
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildList>> ListBuildForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> CreateBuildForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapibuildv1Build body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterNetwork
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1ClusterNetworkList>> ListClusterNetworkWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterNetwork
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1ClusterNetwork>> CreateClusterNetworkWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1ClusterNetwork body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterNetwork
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionClusterNetworkWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterNetwork
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterNetwork
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1ClusterNetwork>> ReadClusterNetworkWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterNetwork
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterNetwork
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1ClusterNetwork>> ReplaceClusterNetworkWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1ClusterNetwork body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterNetwork
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterNetwork
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteClusterNetworkWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterNetwork
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterNetwork
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1ClusterNetwork>> PatchClusterNetworkWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ClusterResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuotaList>> ListClusterResourceQuotaWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> CreateClusterResourceQuotaWithHttpMessagesAsync(Comgithubopenshiftapiquotav1ClusterResourceQuota body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ClusterResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionClusterResourceQuotaWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> ReadClusterResourceQuotaWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> ReplaceClusterResourceQuotaWithHttpMessagesAsync(Comgithubopenshiftapiquotav1ClusterResourceQuota body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteClusterResourceQuotaWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> PatchClusterResourceQuotaWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ClusterResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> ReadClusterResourceQuotaStatusWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> ReplaceClusterResourceQuotaStatusWithHttpMessagesAsync(Comgithubopenshiftapiquotav1ClusterResourceQuota body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ClusterResourceQuota
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1ClusterResourceQuota>> PatchClusterResourceQuotaStatusWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ClusterRoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleBindingList>> ListClusterRoleBindingWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>> CreateClusterRoleBindingWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ClusterRoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>> ReadClusterRoleBindingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>> ReplaceClusterRoleBindingWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ClusterRoleBinding body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteClusterRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRoleBinding
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleBinding>> PatchClusterRoleBindingWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ClusterRole
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRoleList>> ListClusterRoleWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRole>> CreateClusterRoleWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ClusterRole body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ClusterRole
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRole>> ReadClusterRoleWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRole>> ReplaceClusterRoleWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ClusterRole body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteClusterRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ClusterRole
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ClusterRole
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ClusterRole>> PatchClusterRoleWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DeploymentConfig
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfigList>> ListDeploymentConfigForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> CreateDeploymentConfigForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentConfig body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind EgressNetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>> ListEgressNetworkPolicyForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an EgressNetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicy>> CreateEgressNetworkPolicyForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1EgressNetworkPolicy body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Group
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1GroupList>> ListGroupWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Group
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Group>> CreateGroupWithHttpMessagesAsync(Comgithubopenshiftapiuserv1Group body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Group
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionGroupWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Group
        /// </summary>
        /// <param name='name'>
        /// name of the Group
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Group>> ReadGroupWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Group
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Group
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Group>> ReplaceGroupWithHttpMessagesAsync(Comgithubopenshiftapiuserv1Group body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Group
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Group
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteGroupWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Group
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Group
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Group>> PatchGroupWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind HostSubnet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1HostSubnetList>> ListHostSubnetWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a HostSubnet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1HostSubnet>> CreateHostSubnetWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1HostSubnet body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of HostSubnet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionHostSubnetWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified HostSubnet
        /// </summary>
        /// <param name='name'>
        /// name of the HostSubnet
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1HostSubnet>> ReadHostSubnetWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified HostSubnet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HostSubnet
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1HostSubnet>> ReplaceHostSubnetWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1HostSubnet body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a HostSubnet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HostSubnet
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteHostSubnetWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified HostSubnet
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the HostSubnet
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1HostSubnet>> PatchHostSubnetWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Identity
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1IdentityList>> ListIdentityWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Identity
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Identity>> CreateIdentityWithHttpMessagesAsync(Comgithubopenshiftapiuserv1Identity body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Identity
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionIdentityWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Identity
        /// </summary>
        /// <param name='name'>
        /// name of the Identity
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Identity>> ReadIdentityWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Identity
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Identity
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Identity>> ReplaceIdentityWithHttpMessagesAsync(Comgithubopenshiftapiuserv1Identity body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an Identity
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Identity
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteIdentityWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Identity
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Identity
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1Identity>> PatchIdentityWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Image
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageList>> ListImageWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an Image
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1Image>> CreateImageWithHttpMessagesAsync(Comgithubopenshiftapiimagev1Image body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Image
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionImageWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Image
        /// </summary>
        /// <param name='name'>
        /// name of the Image
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1Image>> ReadImageWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Image
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Image
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1Image>> ReplaceImageWithHttpMessagesAsync(Comgithubopenshiftapiimagev1Image body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an Image
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Image
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteImageWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Image
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Image
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1Image>> PatchImageWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageSignature
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageSignature>> CreateImageSignatureWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageSignature body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an ImageSignature
        /// </summary>
        /// <param name='name'>
        /// name of the ImageSignature
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteImageSignatureWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamImport
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamImport>> CreateImageStreamImportForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamImport body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamMapping
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamMapping>> CreateImageStreamMappingForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamMapping body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ImageStream
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamList>> ListImageStreamForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> CreateImageStreamForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStream body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ImageStreamTag
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTagList>> ListImageStreamTagForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamTag
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTag>> CreateImageStreamTagForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamTag body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalResourceAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview>> CreateLocalResourceAccessReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview>> CreateLocalSubjectAccessReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind AppliedClusterResourceQuota
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1AppliedClusterResourceQuotaList>> ListNamespacedAppliedClusterResourceQuotaWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified AppliedClusterResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the AppliedClusterResourceQuota
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiquotav1AppliedClusterResourceQuota>> ReadNamespacedAppliedClusterResourceQuotaWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind BuildConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfigList>> ListNamespacedBuildConfigWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfig>> CreateNamespacedBuildConfigWithHttpMessagesAsync(Comgithubopenshiftapibuildv1BuildConfig body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of BuildConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionNamespacedBuildConfigWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified BuildConfig
        /// </summary>
        /// <param name='name'>
        /// name of the BuildConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfig>> ReadNamespacedBuildConfigWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BuildConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfig>> ReplaceNamespacedBuildConfigWithHttpMessagesAsync(Comgithubopenshiftapibuildv1BuildConfig body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BuildConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedBuildConfigWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BuildConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildConfig>> PatchNamespacedBuildConfigWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create instantiate of a BuildConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BuildRequest
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> CreateNamespacedBuildConfigInstantiateWithHttpMessagesAsync(Comgithubopenshiftapibuildv1BuildRequest body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to instantiatebinary of BuildConfig
        /// </summary>
        /// <param name='name'>
        /// name of the BinaryBuildRequestOptions
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='asFile'>
        /// asFile determines if the binary should be created as a file within
        /// the source rather than extracted as an archive
        /// </param>
        /// <param name='revisionauthorEmail'>
        /// revision.authorEmail of the source control user
        /// </param>
        /// <param name='revisionauthorName'>
        /// revision.authorName of the source control user
        /// </param>
        /// <param name='revisioncommit'>
        /// revision.commit is the value identifying a specific commit
        /// </param>
        /// <param name='revisioncommitterEmail'>
        /// revision.committerEmail of the source control user
        /// </param>
        /// <param name='revisioncommitterName'>
        /// revision.committerName of the source control user
        /// </param>
        /// <param name='revisionmessage'>
        /// revision.message is the description of a specific commit
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> ConnectPostNamespacedBuildConfigInstantiatebinaryWithHttpMessagesAsync(string name, string namespaceParameter, string asFile = default(string), string revisionauthorEmail = default(string), string revisionauthorName = default(string), string revisioncommit = default(string), string revisioncommitterEmail = default(string), string revisioncommitterName = default(string), string revisionmessage = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to webhooks of BuildConfig
        /// </summary>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectPostNamespacedBuildConfigWebhooksWithHttpMessagesAsync(string name, string namespaceParameter, string path = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// connect POST requests to webhooks of BuildConfig
        /// </summary>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='path'>
        /// path to the resource
        /// </param>
        /// <param name='path1'>
        /// Path is the URL path to use for the current proxy request to pod.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> ConnectPostNamespacedBuildConfigWebhooksWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Build
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildList>> ListNamespacedBuildWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> CreateNamespacedBuildWithHttpMessagesAsync(Comgithubopenshiftapibuildv1Build body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Build
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionNamespacedBuildWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Build
        /// </summary>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> ReadNamespacedBuildWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> ReplaceNamespacedBuildWithHttpMessagesAsync(Comgithubopenshiftapibuildv1Build body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedBuildWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> PatchNamespacedBuildWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create clone of a Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the BuildRequest
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildRequest>> CreateNamespacedBuildCloneWithHttpMessagesAsync(Comgithubopenshiftapibuildv1BuildRequest body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace details of the specified Build
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1Build>> ReplaceNamespacedBuildDetailsWithHttpMessagesAsync(Comgithubopenshiftapibuildv1Build body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read log of the specified Build
        /// </summary>
        /// <param name='name'>
        /// name of the BuildLog
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='container'>
        /// cointainer for which to stream logs. Defaults to only container if
        /// there is one container in the pod.
        /// </param>
        /// <param name='follow'>
        /// follow if true indicates that the build log should be streamed
        /// until the build terminates.
        /// </param>
        /// <param name='limitBytes'>
        /// limitBytes, If set, is the number of bytes to read from the server
        /// before terminating the log output. This may not display a
        /// complete final line of logging, and may return slightly more or
        /// slightly less than the specified limit.
        /// </param>
        /// <param name='nowait'>
        /// noWait if true causes the call to return immediately even if the
        /// build is not available yet. Otherwise the server will wait until
        /// the build has started.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='previous'>
        /// previous returns previous build logs. Defaults to false.
        /// </param>
        /// <param name='sinceSeconds'>
        /// sinceSeconds is a relative time in seconds before the current time
        /// from which to show logs. If this value precedes the time a pod
        /// was started, only logs since the pod start will be returned. If
        /// this value is in the future, no logs will be returned. Only one
        /// of sinceSeconds or sinceTime may be specified.
        /// </param>
        /// <param name='tailLines'>
        /// tailLines, If set, is the number of lines from the end of the logs
        /// to show. If not specified, logs are shown from the creation of
        /// the container or sinceSeconds or sinceTime
        /// </param>
        /// <param name='timestamps'>
        /// timestamps, If true, add an RFC3339 or RFC3339Nano timestamp at
        /// the beginning of every line of log output. Defaults to false.
        /// </param>
        /// <param name='version'>
        /// version of the build for which to view logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapibuildv1BuildLog>> ReadNamespacedBuildLogWithHttpMessagesAsync(string name, string namespaceParameter, string container = default(string), bool? follow = default(bool?), int? limitBytes = default(int?), bool? nowait = default(bool?), string pretty = default(string), bool? previous = default(bool?), int? sinceSeconds = default(int?), int? tailLines = default(int?), bool? timestamps = default(bool?), int? version = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind DeploymentConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfigList>> ListNamespacedDeploymentConfigWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> CreateNamespacedDeploymentConfigWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentConfig body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of DeploymentConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionNamespacedDeploymentConfigWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified DeploymentConfig
        /// </summary>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> ReadNamespacedDeploymentConfigWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> ReplaceNamespacedDeploymentConfigWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentConfig body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedDeploymentConfigWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> PatchNamespacedDeploymentConfigWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create instantiate of a DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentRequest
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentRequest>> CreateNamespacedDeploymentConfigInstantiateWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentRequest body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read log of the specified DeploymentConfig
        /// </summary>
        /// <param name='name'>
        /// name of the DeploymentLog
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='container'>
        /// The container for which to stream logs. Defaults to only container
        /// if there is one container in the pod.
        /// </param>
        /// <param name='follow'>
        /// Follow if true indicates that the build log should be streamed
        /// until the build terminates.
        /// </param>
        /// <param name='limitBytes'>
        /// If set, the number of bytes to read from the server before
        /// terminating the log output. This may not display a complete final
        /// line of logging, and may return slightly more or slightly less
        /// than the specified limit.
        /// </param>
        /// <param name='nowait'>
        /// NoWait if true causes the call to return immediately even if the
        /// deployment is not available yet. Otherwise the server will wait
        /// until the deployment has started.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='previous'>
        /// Return previous deployment logs. Defaults to false.
        /// </param>
        /// <param name='sinceSeconds'>
        /// A relative time in seconds before the current time from which to
        /// show logs. If this value precedes the time a pod was started,
        /// only logs since the pod start will be returned. If this value is
        /// in the future, no logs will be returned. Only one of sinceSeconds
        /// or sinceTime may be specified.
        /// </param>
        /// <param name='tailLines'>
        /// If set, the number of lines from the end of the logs to show. If
        /// not specified, logs are shown from the creation of the container
        /// or sinceSeconds or sinceTime
        /// </param>
        /// <param name='timestamps'>
        /// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning
        /// of every line of log output. Defaults to false.
        /// </param>
        /// <param name='version'>
        /// Version of the deployment for which to view logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentLog>> ReadNamespacedDeploymentConfigLogWithHttpMessagesAsync(string name, string namespaceParameter, string container = default(string), bool? follow = default(bool?), int? limitBytes = default(int?), bool? nowait = default(bool?), string pretty = default(string), bool? previous = default(bool?), int? sinceSeconds = default(int?), int? tailLines = default(int?), bool? timestamps = default(bool?), int? version = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create rollback of a DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfigRollback
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfigRollback>> CreateNamespacedDeploymentConfigRollbackRollbackWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentConfigRollback body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read scale of the specified DeploymentConfig
        /// </summary>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReadNamespacedDeploymentConfigScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace scale of the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> ReplaceNamespacedDeploymentConfigScaleWithHttpMessagesAsync(Iok8sapiextensionsv1beta1Scale body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update scale of the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Scale
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapiextensionsv1beta1Scale>> PatchNamespacedDeploymentConfigScaleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified DeploymentConfig
        /// </summary>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> ReadNamespacedDeploymentConfigStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> ReplaceNamespacedDeploymentConfigStatusWithHttpMessagesAsync(Comgithubopenshiftapiappsv1DeploymentConfig body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified DeploymentConfig
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiappsv1DeploymentConfig>> PatchNamespacedDeploymentConfigStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind EgressNetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicyList>> ListNamespacedEgressNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an EgressNetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicy>> CreateNamespacedEgressNetworkPolicyWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1EgressNetworkPolicy body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of EgressNetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionNamespacedEgressNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified EgressNetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the EgressNetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicy>> ReadNamespacedEgressNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified EgressNetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the EgressNetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicy>> ReplaceNamespacedEgressNetworkPolicyWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1EgressNetworkPolicy body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an EgressNetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the EgressNetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedEgressNetworkPolicyWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified EgressNetworkPolicy
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the EgressNetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1EgressNetworkPolicy>> PatchNamespacedEgressNetworkPolicyWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ImageStreamImage
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStreamImage
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamImage>> ReadNamespacedImageStreamImageWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamImport
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamImport>> CreateNamespacedImageStreamImportWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamImport body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamMapping
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamMapping>> CreateNamespacedImageStreamMappingWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamMapping body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind ImageStream
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamList>> ListNamespacedImageStreamWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> CreateNamespacedImageStreamWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStream body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of ImageStream
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionNamespacedImageStreamWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ImageStream
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> ReadNamespacedImageStreamWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> ReplaceNamespacedImageStreamWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStream body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedImageStreamWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> PatchNamespacedImageStreamWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read secrets of the specified ImageStream
        /// </summary>
        /// <param name='name'>
        /// name of the SecretList
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapicorev1SecretList>> ReadNamespacedImageStreamSecretsWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified ImageStream
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> ReadNamespacedImageStreamStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> ReplaceNamespacedImageStreamStatusWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStream body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified ImageStream
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStream>> PatchNamespacedImageStreamStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ImageStreamTag
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTagList>> ListNamespacedImageStreamTagWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an ImageStreamTag
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTag>> CreateNamespacedImageStreamTagWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamTag body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified ImageStreamTag
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStreamTag
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTag>> ReadNamespacedImageStreamTagWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified ImageStreamTag
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStreamTag
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTag>> ReplaceNamespacedImageStreamTagWithHttpMessagesAsync(Comgithubopenshiftapiimagev1ImageStreamTag body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an ImageStreamTag
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStreamTag
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedImageStreamTagWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified ImageStreamTag
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the ImageStreamTag
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiimagev1ImageStreamTag>> PatchNamespacedImageStreamTagWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalResourceAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview>> CreateNamespacedLocalResourceAccessReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1LocalResourceAccessReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a LocalSubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview>> CreateNamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1LocalSubjectAccessReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicyReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicyReview>> CreateNamespacedPodSecurityPolicyReviewWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicyReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicySelfSubjectReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview>> CreateNamespacedPodSecurityPolicySelfSubjectReviewWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicySubjectReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview>> CreateNamespacedPodSecurityPolicySubjectReviewWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> CreateNamespacedProcessedTemplateWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1Template body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ResourceAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ResourceAccessReview>> CreateNamespacedResourceAccessReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ResourceAccessReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBindingRestriction
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>> ListNamespacedRoleBindingRestrictionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBindingRestriction
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>> CreateNamespacedRoleBindingRestrictionWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBindingRestriction body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of RoleBindingRestriction
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionNamespacedRoleBindingRestrictionWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified RoleBindingRestriction
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBindingRestriction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>> ReadNamespacedRoleBindingRestrictionWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified RoleBindingRestriction
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBindingRestriction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>> ReplaceNamespacedRoleBindingRestrictionWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBindingRestriction body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a RoleBindingRestriction
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBindingRestriction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedRoleBindingRestrictionWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified RoleBindingRestriction
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBindingRestriction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>> PatchNamespacedRoleBindingRestrictionWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind RoleBinding
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingList>> ListNamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBinding>> CreateNamespacedRoleBindingWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBinding body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified RoleBinding
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBinding>> ReadNamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBinding>> ReplaceNamespacedRoleBindingWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBinding body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedRoleBindingWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the RoleBinding
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBinding>> PatchNamespacedRoleBindingWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind Role
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleList>> ListNamespacedRoleWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1Role>> CreateNamespacedRoleWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1Role body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Role
        /// </summary>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1Role>> ReadNamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1Role>> ReplaceNamespacedRoleWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1Role body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedRoleWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Role
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1Role>> PatchNamespacedRoleWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Route
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1RouteList>> ListNamespacedRouteWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> CreateNamespacedRouteWithHttpMessagesAsync(Comgithubopenshiftapiroutev1Route body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Route
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionNamespacedRouteWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Route
        /// </summary>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> ReadNamespacedRouteWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> ReplaceNamespacedRouteWithHttpMessagesAsync(Comgithubopenshiftapiroutev1Route body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedRouteWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> PatchNamespacedRouteWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read status of the specified Route
        /// </summary>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> ReadNamespacedRouteStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace status of the specified Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> ReplaceNamespacedRouteStatusWithHttpMessagesAsync(Comgithubopenshiftapiroutev1Route body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update status of the specified Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> PatchNamespacedRouteStatusWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview>> CreateNamespacedSelfSubjectRulesReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SubjectAccessReview>> CreateNamespacedSubjectAccessReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SubjectAccessReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SubjectRulesReview>> CreateNamespacedSubjectRulesReviewWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SubjectRulesReview body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Template
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateList>> ListNamespacedTemplateWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> CreateNamespacedTemplateWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1Template body, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of Template
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionNamespacedTemplateWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Template
        /// </summary>
        /// <param name='name'>
        /// name of the Template
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> ReadNamespacedTemplateWithHttpMessagesAsync(string name, string namespaceParameter, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Template
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> ReplaceNamespacedTemplateWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1Template body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Template
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNamespacedTemplateWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, string namespaceParameter, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Template
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> PatchNamespacedTemplateWithHttpMessagesAsync(object body, string name, string namespaceParameter, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind NetNamespace
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1NetNamespaceList>> ListNetNamespaceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a NetNamespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1NetNamespace>> CreateNetNamespaceWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1NetNamespace body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of NetNamespace
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionNetNamespaceWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified NetNamespace
        /// </summary>
        /// <param name='name'>
        /// name of the NetNamespace
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1NetNamespace>> ReadNetNamespaceWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified NetNamespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetNamespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1NetNamespace>> ReplaceNetNamespaceWithHttpMessagesAsync(Comgithubopenshiftapinetworkv1NetNamespace body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a NetNamespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetNamespace
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteNetNamespaceWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified NetNamespace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the NetNamespace
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapinetworkv1NetNamespace>> PatchNetNamespaceWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind OAuthAccessToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAccessTokenList>> ListOAuthAccessTokenWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an OAuthAccessToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAccessToken>> CreateOAuthAccessTokenWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthAccessToken body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of OAuthAccessToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionOAuthAccessTokenWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified OAuthAccessToken
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthAccessToken
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAccessToken>> ReadOAuthAccessTokenWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified OAuthAccessToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAccessToken
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAccessToken>> ReplaceOAuthAccessTokenWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthAccessToken body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an OAuthAccessToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAccessToken
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOAuthAccessTokenWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified OAuthAccessToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAccessToken
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAccessToken>> PatchOAuthAccessTokenWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind OAuthAuthorizeToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAuthorizeTokenList>> ListOAuthAuthorizeTokenWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an OAuthAuthorizeToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAuthorizeToken>> CreateOAuthAuthorizeTokenWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthAuthorizeToken body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of OAuthAuthorizeToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionOAuthAuthorizeTokenWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified OAuthAuthorizeToken
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthAuthorizeToken
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAuthorizeToken>> ReadOAuthAuthorizeTokenWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified OAuthAuthorizeToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAuthorizeToken
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAuthorizeToken>> ReplaceOAuthAuthorizeTokenWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthAuthorizeToken body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an OAuthAuthorizeToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAuthorizeToken
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOAuthAuthorizeTokenWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified OAuthAuthorizeToken
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthAuthorizeToken
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthAuthorizeToken>> PatchOAuthAuthorizeTokenWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind OAuthClientAuthorization
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientAuthorizationList>> ListOAuthClientAuthorizationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an OAuthClientAuthorization
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientAuthorization>> CreateOAuthClientAuthorizationWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthClientAuthorization body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of OAuthClientAuthorization
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionOAuthClientAuthorizationWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified OAuthClientAuthorization
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthClientAuthorization
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientAuthorization>> ReadOAuthClientAuthorizationWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified OAuthClientAuthorization
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClientAuthorization
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientAuthorization>> ReplaceOAuthClientAuthorizationWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthClientAuthorization body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an OAuthClientAuthorization
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClientAuthorization
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOAuthClientAuthorizationWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified OAuthClientAuthorization
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClientAuthorization
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientAuthorization>> PatchOAuthClientAuthorizationWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind OAuthClient
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClientList>> ListOAuthClientWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an OAuthClient
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClient>> CreateOAuthClientWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthClient body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of OAuthClient
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionOAuthClientWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified OAuthClient
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthClient
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClient>> ReadOAuthClientWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified OAuthClient
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClient
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClient>> ReplaceOAuthClientWithHttpMessagesAsync(Comgithubopenshiftapioauthv1OAuthClient body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an OAuthClient
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClient
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteOAuthClientWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified OAuthClient
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the OAuthClient
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapioauthv1OAuthClient>> PatchOAuthClientWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicyReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicyReview>> CreatePodSecurityPolicyReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicyReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicySelfSubjectReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview>> CreatePodSecurityPolicySelfSubjectReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicySelfSubjectReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a PodSecurityPolicySubjectReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview>> CreatePodSecurityPolicySubjectReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapisecurityv1PodSecurityPolicySubjectReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> CreateProcessedTemplateForAllNamespacesV1WithHttpMessagesAsync(Comgithubopenshiftapitemplatev1Template body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind ProjectRequest
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> ListProjectRequestWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ProjectRequest
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1ProjectRequest>> CreateProjectRequestWithHttpMessagesAsync(Comgithubopenshiftapiprojectv1ProjectRequest body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Project
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1ProjectList>> ListProjectWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Project
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1Project>> CreateProjectWithHttpMessagesAsync(Comgithubopenshiftapiprojectv1Project body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified Project
        /// </summary>
        /// <param name='name'>
        /// name of the Project
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1Project>> ReadProjectWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified Project
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Project
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1Project>> ReplaceProjectWithHttpMessagesAsync(Comgithubopenshiftapiprojectv1Project body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete a Project
        /// </summary>
        /// <param name='name'>
        /// name of the Project
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteProjectWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified Project
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the Project
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiprojectv1Project>> PatchProjectWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a ResourceAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1ResourceAccessReview>> CreateResourceAccessReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1ResourceAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind RoleBindingRestriction
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestrictionList>> ListRoleBindingRestrictionForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBindingRestriction
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingRestriction>> CreateRoleBindingRestrictionForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBindingRestriction body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind RoleBinding
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBindingList>> ListRoleBindingForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a RoleBinding
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleBinding>> CreateRoleBindingForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1RoleBinding body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list objects of kind Role
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1RoleList>> ListRoleForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Role
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1Role>> CreateRoleForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1Role body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Route
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1RouteList>> ListRouteForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Route
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiroutev1Route>> CreateRouteForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiroutev1Route body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SelfSubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview>> CreateSelfSubjectRulesReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SelfSubjectRulesReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectAccessReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SubjectAccessReview>> CreateSubjectAccessReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SubjectAccessReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a SubjectRulesReview
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiauthorizationv1SubjectRulesReview>> CreateSubjectRulesReviewForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapiauthorizationv1SubjectRulesReview body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind Template
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1TemplateList>> ListTemplateForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create a Template
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapitemplatev1Template>> CreateTemplateForAllNamespacesWithHttpMessagesAsync(Comgithubopenshiftapitemplatev1Template body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an UserIdentityMapping
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1UserIdentityMapping>> CreateUserIdentityMappingWithHttpMessagesAsync(Comgithubopenshiftapiuserv1UserIdentityMapping body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified UserIdentityMapping
        /// </summary>
        /// <param name='name'>
        /// name of the UserIdentityMapping
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1UserIdentityMapping>> ReadUserIdentityMappingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified UserIdentityMapping
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the UserIdentityMapping
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1UserIdentityMapping>> ReplaceUserIdentityMappingWithHttpMessagesAsync(Comgithubopenshiftapiuserv1UserIdentityMapping body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an UserIdentityMapping
        /// </summary>
        /// <param name='name'>
        /// name of the UserIdentityMapping
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteUserIdentityMappingWithHttpMessagesAsync(string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified UserIdentityMapping
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the UserIdentityMapping
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1UserIdentityMapping>> PatchUserIdentityMappingWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list or watch objects of kind User
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1UserList>> ListUserWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create an User
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1User>> CreateUserWithHttpMessagesAsync(Comgithubopenshiftapiuserv1User body, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete collection of User
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteCollectionUserWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// read the specified User
        /// </summary>
        /// <param name='name'>
        /// name of the User
        /// </param>
        /// <param name='exact'>
        /// Should the export be exact.  Exact export maintains
        /// cluster-specific fields like 'Namespace'.
        /// </param>
        /// <param name='export'>
        /// Should this value be exported.  Export strips fields that a user
        /// can not specify.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1User>> ReadUserWithHttpMessagesAsync(string name, bool? exact = default(bool?), bool? export = default(bool?), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// replace the specified User
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the User
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1User>> ReplaceUserWithHttpMessagesAsync(Comgithubopenshiftapiuserv1User body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete an User
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the User
        /// </param>
        /// <param name='gracePeriodSeconds'>
        /// The duration in seconds before the object should be deleted. Value
        /// must be non-negative integer. The value zero indicates delete
        /// immediately. If this value is nil, the default grace period for
        /// the specified type will be used. Defaults to a per object value
        /// if not specified. zero means delete immediately.
        /// </param>
        /// <param name='orphanDependents'>
        /// Deprecated: please use the PropagationPolicy, this field will be
        /// deprecated in 1.7. Should the dependent objects be orphaned. If
        /// true/false, the "orphan" finalizer will be added to/removed from
        /// the object's finalizers list. Either this field or
        /// PropagationPolicy may be set, but not both.
        /// </param>
        /// <param name='propagationPolicy'>
        /// Whether and how garbage collection will be performed. Either this
        /// field or OrphanDependents may be set, but not both. The default
        /// policy is decided by the existing finalizer set in the
        /// metadata.finalizers and the resource-specific default policy.
        /// Acceptable values are: 'Orphan' - orphan the dependents;
        /// 'Background' - allow the garbage collector to delete the
        /// dependents in the background; 'Foreground' - a cascading policy
        /// that deletes all dependents in the foreground.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1Status>> DeleteUserWithHttpMessagesAsync(Iok8sapimachinerypkgapismetav1DeleteOptions body, string name, int? gracePeriodSeconds = default(int?), bool? orphanDependents = default(bool?), string propagationPolicy = default(string), string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// partially update the specified User
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='name'>
        /// name of the User
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Comgithubopenshiftapiuserv1User>> PatchUserWithHttpMessagesAsync(object body, string name, string pretty = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of BuildConfig
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBuildConfigListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Build
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchBuildListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterNetwork
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchClusterNetworkListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterNetwork
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterNetwork
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchClusterNetworkWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ClusterResourceQuota
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchClusterResourceQuotaListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ClusterResourceQuota
        /// </summary>
        /// <param name='name'>
        /// name of the ClusterResourceQuota
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchClusterResourceQuotaWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DeploymentConfig
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchDeploymentConfigListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of EgressNetworkPolicy
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchEgressNetworkPolicyListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Group
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchGroupListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Group
        /// </summary>
        /// <param name='name'>
        /// name of the Group
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchGroupWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of HostSubnet
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchHostSubnetListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind HostSubnet
        /// </summary>
        /// <param name='name'>
        /// name of the HostSubnet
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchHostSubnetWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Identity
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchIdentityListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Identity
        /// </summary>
        /// <param name='name'>
        /// name of the Identity
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchIdentityWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Image
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchImageListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Image
        /// </summary>
        /// <param name='name'>
        /// name of the Image
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchImageWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ImageStream
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchImageStreamListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of BuildConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedBuildConfigListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind BuildConfig
        /// </summary>
        /// <param name='name'>
        /// name of the BuildConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedBuildConfigWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Build
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedBuildListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Build
        /// </summary>
        /// <param name='name'>
        /// name of the Build
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedBuildWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of DeploymentConfig
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedDeploymentConfigListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind DeploymentConfig
        /// </summary>
        /// <param name='name'>
        /// name of the DeploymentConfig
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedDeploymentConfigWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of EgressNetworkPolicy
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedEgressNetworkPolicyListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind EgressNetworkPolicy
        /// </summary>
        /// <param name='name'>
        /// name of the EgressNetworkPolicy
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedEgressNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of ImageStream
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedImageStreamListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind ImageStream
        /// </summary>
        /// <param name='name'>
        /// name of the ImageStream
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedImageStreamWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBindingRestriction
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedRoleBindingRestrictionListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind RoleBindingRestriction
        /// </summary>
        /// <param name='name'>
        /// name of the RoleBindingRestriction
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedRoleBindingRestrictionWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Route
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedRouteListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Route
        /// </summary>
        /// <param name='name'>
        /// name of the Route
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedRouteWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Template
        /// </summary>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedTemplateListWithHttpMessagesAsync(string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Template
        /// </summary>
        /// <param name='name'>
        /// name of the Template
        /// </param>
        /// <param name='namespaceParameter'>
        /// object name and auth scope, such as for teams and projects
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNamespacedTemplateWithHttpMessagesAsync(string name, string namespaceParameter, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of NetNamespace
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetNamespaceListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind NetNamespace
        /// </summary>
        /// <param name='name'>
        /// name of the NetNamespace
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchNetNamespaceWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of OAuthAccessToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOAuthAccessTokenListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind OAuthAccessToken
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthAccessToken
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOAuthAccessTokenWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of OAuthAuthorizeToken
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOAuthAuthorizeTokenListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind OAuthAuthorizeToken
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthAuthorizeToken
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOAuthAuthorizeTokenWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of OAuthClientAuthorization
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOAuthClientAuthorizationListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind OAuthClientAuthorization
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthClientAuthorization
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOAuthClientAuthorizationWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of OAuthClient
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOAuthClientListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind OAuthClient
        /// </summary>
        /// <param name='name'>
        /// name of the OAuthClient
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchOAuthClientWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Project
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchProjectListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind Project
        /// </summary>
        /// <param name='name'>
        /// name of the Project
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchProjectWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of RoleBindingRestriction
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRoleBindingRestrictionListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Route
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchRouteListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of Template
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchTemplateListForAllNamespacesWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch individual changes to a list of User
        /// </summary>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchUserListWithHttpMessagesAsync(string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// watch changes to an object of kind User
        /// </summary>
        /// <param name='name'>
        /// name of the User
        /// </param>
        /// <param name='continueParameter'>
        /// The continue option should be set when retrieving more results
        /// from the server. Since this value is server defined, clients may
        /// only use the continue value from a previous query result with
        /// identical query parameters (except for the value of continue) and
        /// the server may reject a continue value it does not recognize. If
        /// the specified continue value is no longer valid whether due to
        /// expiration (generally five to fifteen minutes) or a configuration
        /// change on the server the server will respond with a 410
        /// ResourceExpired error indicating the client must restart their
        /// list without the continue field. This field is not supported when
        /// watch is true. Clients may start a watch from the last
        /// resourceVersion value returned by the server and not miss any
        /// modifications.
        /// </param>
        /// <param name='fieldSelector'>
        /// A selector to restrict the list of returned objects by their
        /// fields. Defaults to everything.
        /// </param>
        /// <param name='includeUninitialized'>
        /// If true, partially initialized resources are included in the
        /// response.
        /// </param>
        /// <param name='labelSelector'>
        /// A selector to restrict the list of returned objects by their
        /// labels. Defaults to everything.
        /// </param>
        /// <param name='limit'>
        /// limit is a maximum number of responses to return for a list call.
        /// If more items exist, the server will set the `continue` field on
        /// the list metadata to a value that can be used with the same
        /// initial query to retrieve the next set of results. Setting a
        /// limit may return fewer than the requested amount of items (up to
        /// zero items) in the event all requested objects are filtered out
        /// and clients should only use the presence of the continue field to
        /// determine whether more results are available. Servers may choose
        /// not to support the limit argument and will return all of the
        /// available results. If limit is specified and the continue field
        /// is empty, clients may assume that no more results are available.
        /// This field is not supported if watch is true.
        /// 
        /// The server guarantees that the objects returned when using
        /// continue will be identical to issuing a single list call without
        /// a limit - that is, no objects created, modified, or deleted after
        /// the first request is issued will be included in any subsequent
        /// continued requests. This is sometimes referred to as a consistent
        /// snapshot, and ensures that a client that is using limit to
        /// receive smaller chunks of a very large result can ensure they see
        /// all possible objects. If objects are updated during a chunked
        /// list the version of the object that was present at the time the
        /// first list result was calculated is returned.
        /// </param>
        /// <param name='pretty'>
        /// If 'true', then the output is pretty printed.
        /// </param>
        /// <param name='resourceVersion'>
        /// When specified with a watch call, shows changes that occur after
        /// that particular version of a resource. Defaults to changes from
        /// the beginning of history. When specified for list: - if unset,
        /// then the result is returned from remote storage based on
        /// quorum-read flag; - if it's 0, then we simply return what we
        /// currently have in cache, no guarantee; - if set to non zero, then
        /// the result is at least as fresh as given rv.
        /// </param>
        /// <param name='timeoutSeconds'>
        /// Timeout for the list/watch call.
        /// </param>
        /// <param name='watch'>
        /// Watch for changes to the described resources and return them as a
        /// stream of add, update, and remove notifications. Specify
        /// resourceVersion.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Iok8sapimachinerypkgapismetav1WatchEvent>> WatchUserWithHttpMessagesAsync(string name, string continueParameter = default(string), string fieldSelector = default(string), bool? includeUninitialized = default(bool?), string labelSelector = default(string), int? limit = default(int?), string pretty = default(string), string resourceVersion = default(string), int? timeoutSeconds = default(int?), bool? watch = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
